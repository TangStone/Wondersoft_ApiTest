{"name": "新增用户组-特殊字符校验", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <test_cases.TestUserSync object at 0x000001E30559F7C0>\ncase = 'groupAdd_Spechar_check'\ncasedata = {'description': '新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确', 'epic': '用户管理', 'feature': '基础数据管理', 'name': '新增用户组-特殊字符校验', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:133: in excute_apicase\n    self.apicase_processors(api_casedata['postProcessors'], recv_data, recv_code)\ncommon\\runcase.py:153: in apicase_processors\n    checkresult.check_result(pro_data['assert'], recv_data, recv_code)\ncommon\\checkresult.py:33: in check_result\n    assert_db(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = [{'result': [{'path': '$.count', 'value': 0}], 'sql': \"select count(*) as count from `bms-general-uba`.t_group_info where groupName = '自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组' and isRemoved = '0'\", 'type': 'mysql'}]\n\n    def assert_db(hope_res):\n        \"\"\"\n        数据库校验\n        :param hope_res:\n        :return:\n        \"\"\"\n        if hope_res:\n            for dbcheck_data in hope_res:\n                db_type = dbcheck_data['type']  # 数据库类型\n                db_sql = dbcheck_data['sql']\n                if db_type == 'mysql':\n                    if db_sql[0:6].upper() == 'SELECT':\n                        sql_date = database.MysqlConn().mysql_query(db_sql)\n                        with allure.step(\"数据库校验校验\"):\n                            for param in dbcheck_data['result']:\n                                sql_value = jsonpath.jsonpath(sql_date, param['path'])\n                                value = param['value']\n                                try:\n                                    allure.attach(name=\"查询sql\", body=str(db_sql))\n                                    allure.attach(name=\"期望返回值\", body=str(value))\n                                    if sql_value:\n                                        allure.attach(name='实际返回值', body=str(sql_value[0]))\n>                                       assert str(value) == str(sql_value[0])\nE                                       AssertionError\n\ncommon\\checkresult.py:57: AssertionError"}, "description": "新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确", "steps": [{"name": "新增用户组-长度校验", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 59, in excute_case\n    self.excute_apicase(api, api_casedata)\n  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 133, in excute_apicase\n    self.apicase_processors(api_casedata['postProcessors'], recv_data, recv_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 153, in apicase_processors\n    checkresult.check_result(pro_data['assert'], recv_data, recv_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 33, in check_result\n    assert_db(value)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n"}, "steps": [{"name": "发送请求", "status": "passed", "attachments": [{"name": "请求方法：", "source": "50a6701b-c79a-4c14-8fc7-6a91aa97d888-attachment.attach"}, {"name": "请求地址", "source": "40684113-2f44-4fcd-8736-d88e716208aa-attachment.attach"}, {"name": "请求头", "source": "2e046011-aad2-4d2a-abae-d9a98946b14f-attachment.attach"}, {"name": "请求参数", "source": "4abc0ec0-8bb3-4483-b8bf-98c57aec3745-attachment.attach"}, {"name": "请求结果", "source": "474a047e-26a2-4d1e-99fc-02daa7c42958-attachment.attach"}], "start": 1692006454955, "stop": 1692006455045}, {"name": "结果校验", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 33, in check_result\n    assert_db(value)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n"}, "steps": [{"name": "状态码校验", "status": "passed", "attachments": [{"name": "期望状态码", "source": "4ad7ac1c-b425-46a4-985c-d965057f2ccc-attachment.attach"}, {"name": "实际状态码", "source": "669fc1b9-e6b1-4dd5-bba7-da6af6e6ef1d-attachment.attach"}], "start": 1692006455045, "stop": 1692006455047}, {"name": "数据库校验校验", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n"}, "attachments": [{"name": "查询sql", "source": "d3f963e3-9e26-4d9b-8ae4-ebd7f5380363-attachment.attach"}, {"name": "期望返回值", "source": "d582015d-914c-4767-93f1-afe67f3d2f5a-attachment.attach"}, {"name": "实际返回值", "source": "31b4cfa3-a32b-491e-91ff-b1e345be5ef9-attachment.attach"}], "start": 1692006455053, "stop": 1692006455054}], "start": 1692006455045, "stop": 1692006455054}], "start": 1692006454953, "stop": 1692006455054}], "attachments": [{"name": "log", "source": "fb6657f1-b41e-4e54-a6fa-08c8259a6f9e-attachment.txt", "type": "text/plain"}], "start": 1692006454938, "stop": 1692006455055, "uuid": "44fc66c5-97fa-4002-ac02-57949529530d", "historyId": "456b341a62764b4afc36ef12994b7bd6", "testCaseId": "2cc05bdd47264d0a6d036e2b95402968", "fullName": "testcases.test_cases.TestUserSync#test_businesscases", "labels": [{"name": "epic", "value": "用户管理"}, {"name": "feature", "value": "基础数据管理"}, {"name": "story", "value": "用户与机构管理"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_cases"}, {"name": "subSuite", "value": "TestUserSync"}, {"name": "host", "value": "OFYI7JX9DURTDV6"}, {"name": "thread", "value": "10488-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_cases"}]}