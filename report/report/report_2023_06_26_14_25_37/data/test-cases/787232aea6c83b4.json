{"uid":"787232aea6c83b4","name":"修改指纹库-本地上传-挂载","fullName":"bms.testcases.test_11_docFinger.TestDocFinger#test_docFinger_update","historyId":"4fbc21d1c39e62d14a030ecc6dc5f6bf","time":{"start":1687760716915,"stop":1687760717208,"duration":293},"description":"修改指纹库-本地上传-挂载","descriptionHtml":"<p>修改指纹库-本地上传-挂载</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x0000025263E711F0>\ncaseid = 'docFinger_update_02'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_02', 'description': '修改指纹库-本地上传-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"修改指纹库-本地上传-挂载","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x0000025263E711F0>\ncaseid = 'docFinger_update_02'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_02', 'description': '修改指纹库-本地上传-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687760716918,"stop":1687760717124,"duration":206},"status":"passed","steps":[{"name":"执行当前接口：获取json文件类型","time":{"start":1687760716941,"stop":1687760717031,"duration":90},"status":"passed","steps":[],"attachments":[{"uid":"4706b53a68d00306","name":"请求方法：","source":"4706b53a68d00306.attach","type":"text/plain","size":4},{"uid":"3cf29ab7948099b9","name":"请求地址","source":"3cf29ab7948099b9.attach","type":"text/plain","size":71},{"uid":"94ec20475e4a1db0","name":"请求头","source":"94ec20475e4a1db0.attach","type":"text/plain","size":497},{"uid":"eabde430a162336e","name":"请求参数","source":"eabde430a162336e.attach","type":"text/plain","size":25},{"uid":"87969c5682df369c","name":"请求结果","source":"87969c5682df369c.attach","type":"text/plain","size":103}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687760717031,"stop":1687760717035,"duration":4},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687760717031,"stop":1687760717033,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"9aa5e3014624bddc","name":"期望状态码","source":"9aa5e3014624bddc.attach","type":"text/plain","size":3},{"uid":"87ab207298a42657","name":"实际状态码","source":"87ab207298a42657.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687760717033,"stop":1687760717034,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"8b2deed1c88dc790","name":"期望返回值","source":"8b2deed1c88dc790.attach","type":"text/plain","size":17},{"uid":"9b29bbbc1f986335","name":"实际返回值","source":"9b29bbbc1f986335.attach","type":"text/plain","size":103}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"shouldDisplayMessage":false,"attachmentsCount":4},{"name":"执行当前接口：文档指纹库列表查询-根据指纹库名称模糊筛选","time":{"start":1687760717055,"stop":1687760717120,"duration":65},"status":"passed","steps":[],"attachments":[{"uid":"efe2d713113f72dc","name":"请求方法：","source":"efe2d713113f72dc.attach","type":"text/plain","size":4},{"uid":"793a8989930700f9","name":"请求地址","source":"793a8989930700f9.attach","type":"text/plain","size":80},{"uid":"52ff7604749ceabb","name":"请求头","source":"52ff7604749ceabb.attach","type":"text/plain","size":497},{"uid":"9f13226c031ee7a5","name":"请求参数","source":"9f13226c031ee7a5.attach","type":"text/plain","size":81},{"uid":"af74e1c6072df4b2","name":"请求结果","source":"af74e1c6072df4b2.attach","type":"text/plain","size":1288}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687760717120,"stop":1687760717124,"duration":4},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687760717120,"stop":1687760717121,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"ccbb1e1206de5b49","name":"期望状态码","source":"ccbb1e1206de5b49.attach","type":"text/plain","size":3},{"uid":"37c8a117a16b7a79","name":"实际状态码","source":"37c8a117a16b7a79.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687760717121,"stop":1687760717123,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"707574bb7e8f7b17","name":"期望返回值","source":"707574bb7e8f7b17.attach","type":"text/plain","size":17},{"uid":"57765d85d23dcbd6","name":"实际返回值","source":"57765d85d23dcbd6.attach","type":"text/plain","size":1288}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"json断言判断包含","time":{"start":1687760717123,"stop":1687760717124,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"c0a6aca95c4eb467","name":"期望结果","source":"c0a6aca95c4eb467.attach","type":"text/plain","size":96},{"uid":"ca95c221578a529b","name":"实际实际结果","source":"ca95c221578a529b.attach","type":"text/plain","size":47}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":3,"shouldDisplayMessage":false,"attachmentsCount":6}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":9,"shouldDisplayMessage":false,"attachmentsCount":20},{"name":"执行当前接口：修改指纹库-本地上传-挂载","time":{"start":1687760717127,"stop":1687760717204,"duration":77},"status":"passed","steps":[],"attachments":[{"uid":"5669c0bb7099fe80","name":"请求方法：","source":"5669c0bb7099fe80.attach","type":"text/plain","size":4},{"uid":"1124870557e07adb","name":"请求地址","source":"1124870557e07adb.attach","type":"text/plain","size":76},{"uid":"3b8bf281eccf8ae6","name":"请求头","source":"3b8bf281eccf8ae6.attach","type":"text/plain","size":483},{"uid":"8872d565a1a76d6d","name":"请求参数","source":"8872d565a1a76d6d.attach","type":"text/plain","size":428},{"uid":"3cb2c2edd3635bd5","name":"上传文件","source":"3cb2c2edd3635bd5.attach","type":"text/plain","size":29},{"uid":"4c1f56afb65354a1","name":"请求结果","source":"4c1f56afb65354a1.attach","type":"text/plain","size":77}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":6},{"name":"结果校验","time":{"start":1687760717204,"stop":1687760717208,"duration":4},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687760717204,"stop":1687760717206,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"c8aaba080c7c09bf","name":"期望状态码","source":"c8aaba080c7c09bf.attach","type":"text/plain","size":3},{"uid":"900b9368b516e5b7","name":"实际状态码","source":"900b9368b516e5b7.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687760717206,"stop":1687760717207,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"1227c0efa6f2571b","name":"期望返回值","source":"1227c0efa6f2571b.attach","type":"text/plain","size":17},{"uid":"ef6e98ca3cc4800e","name":"实际返回值","source":"ef6e98ca3cc4800e.attach","type":"text/plain","size":77}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[{"uid":"4ccea14ac779a015","name":"log","source":"4ccea14ac779a015.txt","type":"text/plain","size":27415}],"parameters":[],"hasContent":true,"stepsCount":14,"shouldDisplayMessage":true,"attachmentsCount":31},"afterStages":[],"labels":[{"name":"epic","value":"规则管理"},{"name":"feature","value":"基础规则-文件指纹"},{"name":"story","value":"更新文档指纹库接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_11_docFinger"},{"name":"subSuite","value":"TestDocFinger"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"9620-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_11_docFinger"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"787232aea6c83b4.json","parameterValues":[]}