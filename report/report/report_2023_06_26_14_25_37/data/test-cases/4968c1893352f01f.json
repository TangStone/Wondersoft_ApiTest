{"uid":"4968c1893352f01f","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687760699029,"stop":1687760699261,"duration":232},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x0000025263D56D60>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x0000025263D56D60>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687760699033,"stop":1687760699178,"duration":145},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687760699063,"stop":1687760699175,"duration":112},"status":"passed","steps":[],"attachments":[{"uid":"e6aa27824ae20f4b","name":"请求方法：","source":"e6aa27824ae20f4b.attach","type":"text/plain","size":3},{"uid":"ba986c51524f516c","name":"请求地址","source":"ba986c51524f516c.attach","type":"text/plain","size":51},{"uid":"9f37c02967f4a533","name":"请求头","source":"9f37c02967f4a533.attach","type":"text/plain","size":467},{"uid":"e7359354b8604632","name":"请求参数","source":"e7359354b8604632.attach","type":"text/plain","size":30},{"uid":"9687b449b4465e76","name":"请求结果","source":"9687b449b4465e76.attach","type":"text/plain","size":3053}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687760699175,"stop":1687760699178,"duration":3},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687760699175,"stop":1687760699176,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"fbda5265f559b48f","name":"期望状态码","source":"fbda5265f559b48f.attach","type":"text/plain","size":3},{"uid":"ae455390cab6681d","name":"实际状态码","source":"ae455390cab6681d.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687760699176,"stop":1687760699178,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"81b2e2c2ca04fa2a","name":"期望返回值","source":"81b2e2c2ca04fa2a.attach","type":"text/plain","size":35},{"uid":"dfcbd8359f15fc12","name":"实际返回值","source":"dfcbd8359f15fc12.attach","type":"text/plain","size":3053}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"shouldDisplayMessage":false,"attachmentsCount":9},{"name":"执行当前接口：获取同步根组id","time":{"start":1687760699183,"stop":1687760699258,"duration":75},"status":"passed","steps":[],"attachments":[{"uid":"44b24a4a82b8e6f4","name":"请求方法：","source":"44b24a4a82b8e6f4.attach","type":"text/plain","size":3},{"uid":"1fa7662e0436ac62","name":"请求地址","source":"1fa7662e0436ac62.attach","type":"text/plain","size":64},{"uid":"6d0579208df4ca27","name":"请求头","source":"6d0579208df4ca27.attach","type":"text/plain","size":467},{"uid":"92ac33a75aa19fb5","name":"请求参数","source":"92ac33a75aa19fb5.attach","type":"text/plain","size":34},{"uid":"935902c4046b4f01","name":"请求结果","source":"935902c4046b4f01.attach","type":"text/plain","size":64}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687760699258,"stop":1687760699261,"duration":3},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687760699258,"stop":1687760699259,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"331ee6d356f5b412","name":"期望状态码","source":"331ee6d356f5b412.attach","type":"text/plain","size":3},{"uid":"301ee89a56daa25f","name":"实际状态码","source":"301ee89a56daa25f.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687760699260,"stop":1687760699261,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"38cfd4ce6771c47d","name":"期望返回值","source":"38cfd4ce6771c47d.attach","type":"text/plain","size":35},{"uid":"3a37919319f97196","name":"实际返回值","source":"3a37919319f97196.attach","type":"text/plain","size":64}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[{"uid":"c250166728b47307","name":"log","source":"c250166728b47307.txt","type":"text/plain","size":46169}],"parameters":[],"hasContent":true,"stepsCount":9,"shouldDisplayMessage":true,"attachmentsCount":19},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"9620-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"5f95c6dd618025a8","status":"failed","statusDetails":"AssertionError","time":{"start":1687760693796,"stop":1687760693984,"duration":188}},{"uid":"f29f62f574b60aa6","status":"failed","statusDetails":"AssertionError","time":{"start":1687760688593,"stop":1687760688765,"duration":172}},{"uid":"220ee9c48306eac9","status":"failed","statusDetails":"AssertionError","time":{"start":1687760683228,"stop":1687760683394,"duration":166}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"4968c1893352f01f.json","parameterValues":[]}