{"uid":"5f95c6dd618025a8","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687760693796,"stop":1687760693984,"duration":188},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x0000025263D56D60>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x0000025263D56D60>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687760693798,"stop":1687760693911,"duration":113},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687760693827,"stop":1687760693906,"duration":79},"status":"passed","steps":[],"attachments":[{"uid":"1352aa2b38a980d8","name":"请求方法：","source":"1352aa2b38a980d8.attach","type":"text/plain","size":3},{"uid":"cf492d5b3c4209a9","name":"请求地址","source":"cf492d5b3c4209a9.attach","type":"text/plain","size":51},{"uid":"8f7447ad0cc62dd3","name":"请求头","source":"8f7447ad0cc62dd3.attach","type":"text/plain","size":467},{"uid":"4aec1e71588064e3","name":"请求参数","source":"4aec1e71588064e3.attach","type":"text/plain","size":30},{"uid":"69d1fd0f33f278e7","name":"请求结果","source":"69d1fd0f33f278e7.attach","type":"text/plain","size":3053}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687760693906,"stop":1687760693911,"duration":5},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687760693906,"stop":1687760693907,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"9eaa9f11b6cffafd","name":"期望状态码","source":"9eaa9f11b6cffafd.attach","type":"text/plain","size":3},{"uid":"8d5d9af481b92381","name":"实际状态码","source":"8d5d9af481b92381.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687760693907,"stop":1687760693911,"duration":4},"status":"passed","steps":[],"attachments":[{"uid":"5513f631aa5f1a08","name":"期望返回值","source":"5513f631aa5f1a08.attach","type":"text/plain","size":35},{"uid":"f4277e3cc3cd6376","name":"实际返回值","source":"f4277e3cc3cd6376.attach","type":"text/plain","size":3053}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"shouldDisplayMessage":false,"attachmentsCount":9},{"name":"执行当前接口：获取同步根组id","time":{"start":1687760693915,"stop":1687760693982,"duration":67},"status":"passed","steps":[],"attachments":[{"uid":"c82c180cfe8dd882","name":"请求方法：","source":"c82c180cfe8dd882.attach","type":"text/plain","size":3},{"uid":"f68c3b589c610cfd","name":"请求地址","source":"f68c3b589c610cfd.attach","type":"text/plain","size":64},{"uid":"137490f4d77a24b2","name":"请求头","source":"137490f4d77a24b2.attach","type":"text/plain","size":467},{"uid":"91754e868aefdb","name":"请求参数","source":"91754e868aefdb.attach","type":"text/plain","size":34},{"uid":"3c03a61af4e0d567","name":"请求结果","source":"3c03a61af4e0d567.attach","type":"text/plain","size":64}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687760693982,"stop":1687760693984,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687760693982,"stop":1687760693983,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"7dc283985fe67962","name":"期望状态码","source":"7dc283985fe67962.attach","type":"text/plain","size":3},{"uid":"29b268afd8391d9e","name":"实际状态码","source":"29b268afd8391d9e.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687760693983,"stop":1687760693983,"duration":0},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"335d3bf1230a832a","name":"期望返回值","source":"335d3bf1230a832a.attach","type":"text/plain","size":35},{"uid":"58d4f456d7f54a2b","name":"实际返回值","source":"58d4f456d7f54a2b.attach","type":"text/plain","size":64}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[{"uid":"d10dc48e4aee5a2b","name":"log","source":"d10dc48e4aee5a2b.txt","type":"text/plain","size":34564}],"parameters":[],"hasContent":true,"stepsCount":9,"shouldDisplayMessage":true,"attachmentsCount":19},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"9620-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"5f95c6dd618025a8.json","parameterValues":[]}