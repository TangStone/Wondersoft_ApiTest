{"uid":"220ee9c48306eac9","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687760683228,"stop":1687760683394,"duration":166},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x0000025263D56D60>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x0000025263D56D60>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687760683229,"stop":1687760683315,"duration":86},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687760683238,"stop":1687760683308,"duration":70},"status":"passed","steps":[],"attachments":[{"uid":"fd7149d672313c19","name":"请求方法：","source":"fd7149d672313c19.attach","type":"text/plain","size":3},{"uid":"e23339c08dbf9770","name":"请求地址","source":"e23339c08dbf9770.attach","type":"text/plain","size":51},{"uid":"4a4a56c1ff97f210","name":"请求头","source":"4a4a56c1ff97f210.attach","type":"text/plain","size":467},{"uid":"8e3341c2ec421030","name":"请求参数","source":"8e3341c2ec421030.attach","type":"text/plain","size":30},{"uid":"62660fc2f3ca507f","name":"请求结果","source":"62660fc2f3ca507f.attach","type":"text/plain","size":2961}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687760683308,"stop":1687760683313,"duration":5},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687760683308,"stop":1687760683309,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"f22b467b9bb5dbfa","name":"期望状态码","source":"f22b467b9bb5dbfa.attach","type":"text/plain","size":3},{"uid":"877a1c9b9bbcfd42","name":"实际状态码","source":"877a1c9b9bbcfd42.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687760683309,"stop":1687760683313,"duration":4},"status":"passed","steps":[],"attachments":[{"uid":"ad1653957c747ecb","name":"期望返回值","source":"ad1653957c747ecb.attach","type":"text/plain","size":35},{"uid":"be4818b2e03dd45","name":"实际返回值","source":"be4818b2e03dd45.attach","type":"text/plain","size":2961}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"shouldDisplayMessage":false,"attachmentsCount":9},{"name":"执行当前接口：获取同步根组id","time":{"start":1687760683318,"stop":1687760683392,"duration":74},"status":"passed","steps":[],"attachments":[{"uid":"aa996a670e9243fb","name":"请求方法：","source":"aa996a670e9243fb.attach","type":"text/plain","size":3},{"uid":"94fe350c1cf25639","name":"请求地址","source":"94fe350c1cf25639.attach","type":"text/plain","size":64},{"uid":"aff8789b6293b211","name":"请求头","source":"aff8789b6293b211.attach","type":"text/plain","size":467},{"uid":"d5b7ee8dcd0636f0","name":"请求参数","source":"d5b7ee8dcd0636f0.attach","type":"text/plain","size":34},{"uid":"56d5c201bd4bc008","name":"请求结果","source":"56d5c201bd4bc008.attach","type":"text/plain","size":64}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687760683392,"stop":1687760683394,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687760683392,"stop":1687760683393,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"a8d8fa87d4a9fdd9","name":"期望状态码","source":"a8d8fa87d4a9fdd9.attach","type":"text/plain","size":3},{"uid":"ad19edb9d9c31782","name":"实际状态码","source":"ad19edb9d9c31782.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687760683393,"stop":1687760683393,"duration":0},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"78fd214144ac3a89","name":"期望返回值","source":"78fd214144ac3a89.attach","type":"text/plain","size":35},{"uid":"b38a1a900c3733c0","name":"实际返回值","source":"b38a1a900c3733c0.attach","type":"text/plain","size":64}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[{"uid":"ff500cfe3f7623a8","name":"log","source":"ff500cfe3f7623a8.txt","type":"text/plain","size":11420}],"parameters":[],"hasContent":true,"stepsCount":9,"shouldDisplayMessage":true,"attachmentsCount":19},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"9620-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"220ee9c48306eac9.json","parameterValues":[]}