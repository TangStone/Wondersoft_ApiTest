{"uid":"b60fb288b1f61e25","name":"修改指纹库-本地上传-挂载","fullName":"bms.testcases.test_11_docFinger.TestDocFinger#test_docFinger_update","historyId":"4fbc21d1c39e62d14a030ecc6dc5f6bf","time":{"start":1687760711652,"stop":1687760711881,"duration":229},"description":"修改指纹库-本地上传-挂载","descriptionHtml":"<p>修改指纹库-本地上传-挂载</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x0000025263E711F0>\ncaseid = 'docFinger_update_02'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_02', 'description': '修改指纹库-本地上传-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"修改指纹库-本地上传-挂载","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x0000025263E711F0>\ncaseid = 'docFinger_update_02'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_02', 'description': '修改指纹库-本地上传-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687760711653,"stop":1687760711811,"duration":158},"status":"passed","steps":[{"name":"执行当前接口：获取json文件类型","time":{"start":1687760711658,"stop":1687760711716,"duration":58},"status":"passed","steps":[],"attachments":[{"uid":"a67956dfc06d915","name":"请求方法：","source":"a67956dfc06d915.attach","type":"text/plain","size":4},{"uid":"b6935366709b376d","name":"请求地址","source":"b6935366709b376d.attach","type":"text/plain","size":71},{"uid":"6338cee9aa8a9cc3","name":"请求头","source":"6338cee9aa8a9cc3.attach","type":"text/plain","size":497},{"uid":"f69d48d260a05aa0","name":"请求参数","source":"f69d48d260a05aa0.attach","type":"text/plain","size":25},{"uid":"ffeaadf83e1c1ec4","name":"请求结果","source":"ffeaadf83e1c1ec4.attach","type":"text/plain","size":103}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687760711717,"stop":1687760711719,"duration":2},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687760711717,"stop":1687760711718,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"c3bfd6e0139374b1","name":"期望状态码","source":"c3bfd6e0139374b1.attach","type":"text/plain","size":3},{"uid":"f3c6cfc3e2a30dfc","name":"实际状态码","source":"f3c6cfc3e2a30dfc.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687760711718,"stop":1687760711719,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"5469e2fc3ad28210","name":"期望返回值","source":"5469e2fc3ad28210.attach","type":"text/plain","size":17},{"uid":"9aa82bc0bd63da89","name":"实际返回值","source":"9aa82bc0bd63da89.attach","type":"text/plain","size":103}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"shouldDisplayMessage":false,"attachmentsCount":4},{"name":"执行当前接口：文档指纹库列表查询-根据指纹库名称模糊筛选","time":{"start":1687760711733,"stop":1687760711807,"duration":74},"status":"passed","steps":[],"attachments":[{"uid":"35648e36b90777f7","name":"请求方法：","source":"35648e36b90777f7.attach","type":"text/plain","size":4},{"uid":"e29a30f525d5b78c","name":"请求地址","source":"e29a30f525d5b78c.attach","type":"text/plain","size":80},{"uid":"a7246921ec66c1b3","name":"请求头","source":"a7246921ec66c1b3.attach","type":"text/plain","size":497},{"uid":"6ad4bf70e5f38b7d","name":"请求参数","source":"6ad4bf70e5f38b7d.attach","type":"text/plain","size":81},{"uid":"123f158e037d6117","name":"请求结果","source":"123f158e037d6117.attach","type":"text/plain","size":1288}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687760711807,"stop":1687760711811,"duration":4},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687760711807,"stop":1687760711808,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"a78f1e695589a717","name":"期望状态码","source":"a78f1e695589a717.attach","type":"text/plain","size":3},{"uid":"5ea36fdcd80e37b7","name":"实际状态码","source":"5ea36fdcd80e37b7.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687760711808,"stop":1687760711809,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"224f5cceba883cf6","name":"期望返回值","source":"224f5cceba883cf6.attach","type":"text/plain","size":17},{"uid":"abdab0a422e9def1","name":"实际返回值","source":"abdab0a422e9def1.attach","type":"text/plain","size":1288}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"json断言判断包含","time":{"start":1687760711809,"stop":1687760711811,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"4e1e42bea3f25115","name":"期望结果","source":"4e1e42bea3f25115.attach","type":"text/plain","size":96},{"uid":"8e61481e5d2fe7d9","name":"实际实际结果","source":"8e61481e5d2fe7d9.attach","type":"text/plain","size":47}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":3,"shouldDisplayMessage":false,"attachmentsCount":6}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":9,"shouldDisplayMessage":false,"attachmentsCount":20},{"name":"执行当前接口：修改指纹库-本地上传-挂载","time":{"start":1687760711813,"stop":1687760711879,"duration":66},"status":"passed","steps":[],"attachments":[{"uid":"c623974932ac6390","name":"请求方法：","source":"c623974932ac6390.attach","type":"text/plain","size":4},{"uid":"53d5f2791c708a79","name":"请求地址","source":"53d5f2791c708a79.attach","type":"text/plain","size":76},{"uid":"8d4dbed241e1af26","name":"请求头","source":"8d4dbed241e1af26.attach","type":"text/plain","size":483},{"uid":"51d8ea7e8a063284","name":"请求参数","source":"51d8ea7e8a063284.attach","type":"text/plain","size":428},{"uid":"be407c83f2b1c33f","name":"上传文件","source":"be407c83f2b1c33f.attach","type":"text/plain","size":29},{"uid":"720ca5d57bbbca4b","name":"请求结果","source":"720ca5d57bbbca4b.attach","type":"text/plain","size":77}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":6},{"name":"结果校验","time":{"start":1687760711879,"stop":1687760711881,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687760711879,"stop":1687760711880,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"507a2edd6696d6f8","name":"期望状态码","source":"507a2edd6696d6f8.attach","type":"text/plain","size":3},{"uid":"71223851b1fa0de9","name":"实际状态码","source":"71223851b1fa0de9.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687760711880,"stop":1687760711880,"duration":0},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"872c620ef854dda7","name":"期望返回值","source":"872c620ef854dda7.attach","type":"text/plain","size":17},{"uid":"525dca2cc5397592","name":"实际返回值","source":"525dca2cc5397592.attach","type":"text/plain","size":77}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[{"uid":"6dc66b1b26e786c3","name":"log","source":"6dc66b1b26e786c3.txt","type":"text/plain","size":13707}],"parameters":[],"hasContent":true,"stepsCount":14,"shouldDisplayMessage":true,"attachmentsCount":31},"afterStages":[],"labels":[{"name":"epic","value":"规则管理"},{"name":"feature","value":"基础规则-文件指纹"},{"name":"story","value":"更新文档指纹库接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_11_docFinger"},{"name":"subSuite","value":"TestDocFinger"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"9620-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_11_docFinger"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"b60fb288b1f61e25.json","parameterValues":[]}