{"uid":"afd9e99c78d20ea2","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687868043275,"stop":1687868043437,"duration":162},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000001601A27CF40>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:83: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000001601A27CF40>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:83: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687868043278,"stop":1687868043360,"duration":82},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687868043290,"stop":1687868043355,"duration":65},"status":"passed","steps":[],"attachments":[{"uid":"49dbd2abc345ec76","name":"请求方法：","source":"49dbd2abc345ec76.attach","type":"text/plain","size":3},{"uid":"f04069f5430f2230","name":"请求地址","source":"f04069f5430f2230.attach","type":"text/plain","size":51},{"uid":"8f1fc912bf618608","name":"请求头","source":"8f1fc912bf618608.attach","type":"text/plain","size":467},{"uid":"abdae237481d16b0","name":"请求参数","source":"abdae237481d16b0.attach","type":"text/plain","size":30},{"uid":"3961a9ea62da960a","name":"请求结果","source":"3961a9ea62da960a.attach","type":"text/plain","size":3571}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687868043355,"stop":1687868043360,"duration":5},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687868043355,"stop":1687868043356,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"17dfb869d72cab0e","name":"期望状态码","source":"17dfb869d72cab0e.attach","type":"text/plain","size":3},{"uid":"ecd5e9edb03724cb","name":"实际状态码","source":"ecd5e9edb03724cb.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687868043356,"stop":1687868043360,"duration":4},"status":"passed","steps":[],"attachments":[{"uid":"bef0d72952396251","name":"期望返回值","source":"bef0d72952396251.attach","type":"text/plain","size":35},{"uid":"709b1a6808fceac7","name":"实际返回值","source":"709b1a6808fceac7.attach","type":"text/plain","size":3571}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":9},{"name":"执行当前接口：获取同步根组id","time":{"start":1687868043361,"stop":1687868043427,"duration":66},"status":"passed","steps":[],"attachments":[{"uid":"24d67bc23674e781","name":"请求方法：","source":"24d67bc23674e781.attach","type":"text/plain","size":3},{"uid":"231208fd733a5311","name":"请求地址","source":"231208fd733a5311.attach","type":"text/plain","size":64},{"uid":"6222522d7b21706b","name":"请求头","source":"6222522d7b21706b.attach","type":"text/plain","size":467},{"uid":"8d5b314c9fa85c1","name":"请求参数","source":"8d5b314c9fa85c1.attach","type":"text/plain","size":34},{"uid":"2ea2a62b4ba49614","name":"请求结果","source":"2ea2a62b4ba49614.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687868043427,"stop":1687868043437,"duration":10},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 83, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687868043427,"stop":1687868043428,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"c4351ddc2a48f78b","name":"期望状态码","source":"c4351ddc2a48f78b.attach","type":"text/plain","size":3},{"uid":"51d233121b513e3e","name":"实际状态码","source":"51d233121b513e3e.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687868043428,"stop":1687868043428,"duration":0},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 83, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"fed8675929ee0de2","name":"期望返回值","source":"fed8675929ee0de2.attach","type":"text/plain","size":35},{"uid":"96159a0c914defaf","name":"实际返回值","source":"96159a0c914defaf.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[{"uid":"2bf12ac120374501","name":"log","source":"2bf12ac120374501.txt","type":"text/plain","size":37922}],"parameters":[],"stepsCount":9,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":19},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"14564-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"afd9e99c78d20ea2.json","parameterValues":[]}