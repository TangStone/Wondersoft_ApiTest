{"uid":"f4d6c7b0bae19378","name":"修改指纹库-本地上传-挂载","fullName":"bms.testcases.test_11_docFinger.TestDocFinger#test_docFinger_update","historyId":"4fbc21d1c39e62d14a030ecc6dc5f6bf","time":{"start":1687868066659,"stop":1687868066945,"duration":286},"description":"修改指纹库-本地上传-挂载","descriptionHtml":"<p>修改指纹库-本地上传-挂载</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x000001601A385A60>\ncaseid = 'docFinger_update_02'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_02', 'description': '修改指纹库-本地上传-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:83: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"修改指纹库-本地上传-挂载","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x000001601A385A60>\ncaseid = 'docFinger_update_02'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_02', 'description': '修改指纹库-本地上传-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:83: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687868066665,"stop":1687868066864,"duration":199},"status":"passed","steps":[{"name":"执行当前接口：获取json文件类型","time":{"start":1687868066691,"stop":1687868066780,"duration":89},"status":"passed","steps":[],"attachments":[{"uid":"7e4d13ce900e6876","name":"请求方法：","source":"7e4d13ce900e6876.attach","type":"text/plain","size":4},{"uid":"ec7ab1d890811bd1","name":"请求地址","source":"ec7ab1d890811bd1.attach","type":"text/plain","size":71},{"uid":"2999c6ad544b5cb3","name":"请求头","source":"2999c6ad544b5cb3.attach","type":"text/plain","size":497},{"uid":"40c2bd49cfd6a19f","name":"请求参数","source":"40c2bd49cfd6a19f.attach","type":"text/plain","size":25},{"uid":"5456f6ef04ae27ae","name":"请求结果","source":"5456f6ef04ae27ae.attach","type":"text/plain","size":103}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687868066780,"stop":1687868066782,"duration":2},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687868066780,"stop":1687868066781,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"ca358640e5b166a9","name":"期望状态码","source":"ca358640e5b166a9.attach","type":"text/plain","size":3},{"uid":"1c032e3a01b3f740","name":"实际状态码","source":"1c032e3a01b3f740.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687868066781,"stop":1687868066782,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"b1dc45a309c15d3","name":"期望返回值","source":"b1dc45a309c15d3.attach","type":"text/plain","size":17},{"uid":"a6549d2e7637b26f","name":"实际返回值","source":"a6549d2e7637b26f.attach","type":"text/plain","size":103}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":4},{"name":"执行当前接口：文档指纹库列表查询-根据指纹库名称模糊筛选","time":{"start":1687868066794,"stop":1687868066860,"duration":66},"status":"passed","steps":[],"attachments":[{"uid":"224ddfda0c52780","name":"请求方法：","source":"224ddfda0c52780.attach","type":"text/plain","size":4},{"uid":"6ceb711fcc246106","name":"请求地址","source":"6ceb711fcc246106.attach","type":"text/plain","size":80},{"uid":"c3e05bd66a299dde","name":"请求头","source":"c3e05bd66a299dde.attach","type":"text/plain","size":497},{"uid":"6941e7c3aa8d2322","name":"请求参数","source":"6941e7c3aa8d2322.attach","type":"text/plain","size":81},{"uid":"547b88e0584a9f7f","name":"请求结果","source":"547b88e0584a9f7f.attach","type":"text/plain","size":1288}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687868066860,"stop":1687868066864,"duration":4},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687868066860,"stop":1687868066861,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"8bf74eff7ef46e16","name":"期望状态码","source":"8bf74eff7ef46e16.attach","type":"text/plain","size":3},{"uid":"28d4964583fd1f43","name":"实际状态码","source":"28d4964583fd1f43.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687868066861,"stop":1687868066863,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"c9f0b487fac0fb19","name":"期望返回值","source":"c9f0b487fac0fb19.attach","type":"text/plain","size":17},{"uid":"a24ac3cefaccc6cd","name":"实际返回值","source":"a24ac3cefaccc6cd.attach","type":"text/plain","size":1288}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"json断言判断包含","time":{"start":1687868066863,"stop":1687868066864,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"1ef8336c6b43a693","name":"期望结果","source":"1ef8336c6b43a693.attach","type":"text/plain","size":90},{"uid":"1ce8f8c795cd07a6","name":"实际实际结果","source":"1ce8f8c795cd07a6.attach","type":"text/plain","size":47}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":3,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":6}],"attachments":[],"parameters":[],"stepsCount":9,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":20},{"name":"执行当前接口：修改指纹库-本地上传-挂载","time":{"start":1687868066865,"stop":1687868066938,"duration":73},"status":"passed","steps":[],"attachments":[{"uid":"8e941f20ea50d5c3","name":"请求方法：","source":"8e941f20ea50d5c3.attach","type":"text/plain","size":4},{"uid":"8e859f6f46fb2941","name":"请求地址","source":"8e859f6f46fb2941.attach","type":"text/plain","size":76},{"uid":"b2564191f3b5260e","name":"请求头","source":"b2564191f3b5260e.attach","type":"text/plain","size":483},{"uid":"bf3c3b1a0c65fc58","name":"请求参数","source":"bf3c3b1a0c65fc58.attach","type":"text/plain","size":428},{"uid":"352d7f04f07e7cc","name":"上传文件","source":"352d7f04f07e7cc.attach","type":"text/plain","size":29},{"uid":"1700771455cd673d","name":"请求结果","source":"1700771455cd673d.attach","type":"text/plain","size":77}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":6},{"name":"结果校验","time":{"start":1687868066939,"stop":1687868066944,"duration":5},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 83, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687868066939,"stop":1687868066940,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"af67f81a6b17f9e0","name":"期望状态码","source":"af67f81a6b17f9e0.attach","type":"text/plain","size":3},{"uid":"312531d1058e62f4","name":"实际状态码","source":"312531d1058e62f4.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687868066940,"stop":1687868066944,"duration":4},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 83, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"7c45cd1915429e1a","name":"期望返回值","source":"7c45cd1915429e1a.attach","type":"text/plain","size":17},{"uid":"2d60362ffa7aedab","name":"实际返回值","source":"2d60362ffa7aedab.attach","type":"text/plain","size":77}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[{"uid":"68c5eaa964f3b6c7","name":"log","source":"68c5eaa964f3b6c7.txt","type":"text/plain","size":27393}],"parameters":[],"stepsCount":14,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":31},"afterStages":[],"labels":[{"name":"epic","value":"规则管理"},{"name":"feature","value":"基础规则-文件指纹"},{"name":"story","value":"更新文档指纹库接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_11_docFinger"},{"name":"subSuite","value":"TestDocFinger"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"14564-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_11_docFinger"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"f4d6c7b0bae19378.json","parameterValues":[]}