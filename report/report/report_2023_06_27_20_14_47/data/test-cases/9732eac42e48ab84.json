{"uid":"9732eac42e48ab84","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687868038027,"stop":1687868038230,"duration":203},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000001601A27CF40>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:83: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000001601A27CF40>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:83: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687868038034,"stop":1687868038149,"duration":115},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687868038052,"stop":1687868038144,"duration":92},"status":"passed","steps":[],"attachments":[{"uid":"fc9d80ec9e16256e","name":"请求方法：","source":"fc9d80ec9e16256e.attach","type":"text/plain","size":3},{"uid":"54d5886e9c5eded5","name":"请求地址","source":"54d5886e9c5eded5.attach","type":"text/plain","size":51},{"uid":"744c250b57f92752","name":"请求头","source":"744c250b57f92752.attach","type":"text/plain","size":467},{"uid":"ea860310c9b559f5","name":"请求参数","source":"ea860310c9b559f5.attach","type":"text/plain","size":30},{"uid":"b8ecb7856c0b968e","name":"请求结果","source":"b8ecb7856c0b968e.attach","type":"text/plain","size":3571}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687868038144,"stop":1687868038149,"duration":5},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687868038144,"stop":1687868038145,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"4850b9b0cf84a646","name":"期望状态码","source":"4850b9b0cf84a646.attach","type":"text/plain","size":3},{"uid":"7a8ace5ea3b813bd","name":"实际状态码","source":"7a8ace5ea3b813bd.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687868038145,"stop":1687868038149,"duration":4},"status":"passed","steps":[],"attachments":[{"uid":"7ea4e3faf7f16588","name":"期望返回值","source":"7ea4e3faf7f16588.attach","type":"text/plain","size":35},{"uid":"da410053b9c4afaf","name":"实际返回值","source":"da410053b9c4afaf.attach","type":"text/plain","size":3571}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":9},{"name":"执行当前接口：获取同步根组id","time":{"start":1687868038149,"stop":1687868038227,"duration":78},"status":"passed","steps":[],"attachments":[{"uid":"e7e616583473ef71","name":"请求方法：","source":"e7e616583473ef71.attach","type":"text/plain","size":3},{"uid":"3d2bd09ade37df42","name":"请求地址","source":"3d2bd09ade37df42.attach","type":"text/plain","size":64},{"uid":"867917069c6a863b","name":"请求头","source":"867917069c6a863b.attach","type":"text/plain","size":467},{"uid":"48846fc9f3638134","name":"请求参数","source":"48846fc9f3638134.attach","type":"text/plain","size":34},{"uid":"fbd7eea7e5fa679","name":"请求结果","source":"fbd7eea7e5fa679.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687868038227,"stop":1687868038230,"duration":3},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 83, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687868038227,"stop":1687868038228,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"1e5167bc96a3be13","name":"期望状态码","source":"1e5167bc96a3be13.attach","type":"text/plain","size":3},{"uid":"7edbbaa87cb45bf","name":"实际状态码","source":"7edbbaa87cb45bf.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687868038228,"stop":1687868038229,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 83, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"b5c87b9a81faff75","name":"期望返回值","source":"b5c87b9a81faff75.attach","type":"text/plain","size":35},{"uid":"6b78d3a450df9719","name":"实际返回值","source":"6b78d3a450df9719.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[{"uid":"ae1cea318981c3eb","name":"log","source":"ae1cea318981c3eb.txt","type":"text/plain","size":25281}],"parameters":[],"stepsCount":9,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":19},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"14564-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"9732eac42e48ab84.json","parameterValues":[]}