{"uid":"fe43c3096d206159","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687868048469,"stop":1687868048651,"duration":182},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000001601A27CF40>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:83: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000001601A27CF40>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:83: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687868048476,"stop":1687868048580,"duration":104},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687868048501,"stop":1687868048578,"duration":77},"status":"passed","steps":[],"attachments":[{"uid":"aea22bab72a7d15c","name":"请求方法：","source":"aea22bab72a7d15c.attach","type":"text/plain","size":3},{"uid":"90f27a2bb9cea026","name":"请求地址","source":"90f27a2bb9cea026.attach","type":"text/plain","size":51},{"uid":"33a733a4122ee7a9","name":"请求头","source":"33a733a4122ee7a9.attach","type":"text/plain","size":467},{"uid":"94c81594fc6a136b","name":"请求参数","source":"94c81594fc6a136b.attach","type":"text/plain","size":30},{"uid":"1900ca5f988a23db","name":"请求结果","source":"1900ca5f988a23db.attach","type":"text/plain","size":3571}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687868048578,"stop":1687868048580,"duration":2},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687868048578,"stop":1687868048579,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"7cbc4aef55989782","name":"期望状态码","source":"7cbc4aef55989782.attach","type":"text/plain","size":3},{"uid":"1b89327cae8005ee","name":"实际状态码","source":"1b89327cae8005ee.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687868048579,"stop":1687868048580,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"db71f54b0d4169fb","name":"期望返回值","source":"db71f54b0d4169fb.attach","type":"text/plain","size":35},{"uid":"fe5cbf85e935ee23","name":"实际返回值","source":"fe5cbf85e935ee23.attach","type":"text/plain","size":3571}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":9},{"name":"执行当前接口：获取同步根组id","time":{"start":1687868048582,"stop":1687868048649,"duration":67},"status":"passed","steps":[],"attachments":[{"uid":"e062d3a404fd2e2b","name":"请求方法：","source":"e062d3a404fd2e2b.attach","type":"text/plain","size":3},{"uid":"fbaf41e01561dcd2","name":"请求地址","source":"fbaf41e01561dcd2.attach","type":"text/plain","size":64},{"uid":"73d14bc718dc1313","name":"请求头","source":"73d14bc718dc1313.attach","type":"text/plain","size":467},{"uid":"45f8648a6d5cf90e","name":"请求参数","source":"45f8648a6d5cf90e.attach","type":"text/plain","size":34},{"uid":"8e06af623ac8d3fd","name":"请求结果","source":"8e06af623ac8d3fd.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687868048649,"stop":1687868048651,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 83, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687868048649,"stop":1687868048650,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"281451b615aa25c0","name":"期望状态码","source":"281451b615aa25c0.attach","type":"text/plain","size":3},{"uid":"3864c7a11bf1805","name":"实际状态码","source":"3864c7a11bf1805.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687868048650,"stop":1687868048651,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 83, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"dc41c9c2d5c63492","name":"期望返回值","source":"dc41c9c2d5c63492.attach","type":"text/plain","size":35},{"uid":"4b03f2cadaa3dfe3","name":"实际返回值","source":"4b03f2cadaa3dfe3.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[{"uid":"77638b190ff37a69","name":"log","source":"77638b190ff37a69.txt","type":"text/plain","size":50563}],"parameters":[],"stepsCount":9,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":19},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"14564-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"afd9e99c78d20ea2","status":"failed","statusDetails":"AssertionError","time":{"start":1687868043275,"stop":1687868043437,"duration":162}},{"uid":"9732eac42e48ab84","status":"failed","statusDetails":"AssertionError","time":{"start":1687868038027,"stop":1687868038230,"duration":203}},{"uid":"220e731b9e80bb38","status":"failed","statusDetails":"AssertionError","time":{"start":1687868032578,"stop":1687868032749,"duration":171}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"fe43c3096d206159.json","parameterValues":[]}