{"uid":"6139001d592c3e2d","name":"修改指纹库-本地上传-挂载","fullName":"bms.testcases.test_11_docFinger.TestDocFinger#test_docFinger_update","historyId":"4fbc21d1c39e62d14a030ecc6dc5f6bf","time":{"start":1687868061416,"stop":1687868061629,"duration":213},"description":"修改指纹库-本地上传-挂载","descriptionHtml":"<p>修改指纹库-本地上传-挂载</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x000001601A385A60>\ncaseid = 'docFinger_update_02'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_02', 'description': '修改指纹库-本地上传-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:83: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"修改指纹库-本地上传-挂载","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x000001601A385A60>\ncaseid = 'docFinger_update_02'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_02', 'description': '修改指纹库-本地上传-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:83: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687868061417,"stop":1687868061546,"duration":129},"status":"passed","steps":[{"name":"执行当前接口：获取json文件类型","time":{"start":1687868061422,"stop":1687868061476,"duration":54},"status":"passed","steps":[],"attachments":[{"uid":"7a903afa06aa45f1","name":"请求方法：","source":"7a903afa06aa45f1.attach","type":"text/plain","size":4},{"uid":"1efc2842a8fdd7bb","name":"请求地址","source":"1efc2842a8fdd7bb.attach","type":"text/plain","size":71},{"uid":"e005db747ede91ba","name":"请求头","source":"e005db747ede91ba.attach","type":"text/plain","size":497},{"uid":"4bf20246566952ac","name":"请求参数","source":"4bf20246566952ac.attach","type":"text/plain","size":25},{"uid":"ea9e8f33d7cf6932","name":"请求结果","source":"ea9e8f33d7cf6932.attach","type":"text/plain","size":103}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687868061476,"stop":1687868061477,"duration":1},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687868061476,"stop":1687868061477,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"a25e9a9587137466","name":"期望状态码","source":"a25e9a9587137466.attach","type":"text/plain","size":3},{"uid":"62b6f41ed8e85b8a","name":"实际状态码","source":"62b6f41ed8e85b8a.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687868061477,"stop":1687868061477,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"9460014571e8eb3","name":"期望返回值","source":"9460014571e8eb3.attach","type":"text/plain","size":17},{"uid":"e9daf3b005136946","name":"实际返回值","source":"e9daf3b005136946.attach","type":"text/plain","size":103}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":4},{"name":"执行当前接口：文档指纹库列表查询-根据指纹库名称模糊筛选","time":{"start":1687868061487,"stop":1687868061542,"duration":55},"status":"passed","steps":[],"attachments":[{"uid":"35fa348e3f1878fe","name":"请求方法：","source":"35fa348e3f1878fe.attach","type":"text/plain","size":4},{"uid":"1d2fa95f90afcef3","name":"请求地址","source":"1d2fa95f90afcef3.attach","type":"text/plain","size":80},{"uid":"c714719c6c639310","name":"请求头","source":"c714719c6c639310.attach","type":"text/plain","size":497},{"uid":"6479730dbc2b276d","name":"请求参数","source":"6479730dbc2b276d.attach","type":"text/plain","size":81},{"uid":"a8a4fb814d260aa2","name":"请求结果","source":"a8a4fb814d260aa2.attach","type":"text/plain","size":1288}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1687868061542,"stop":1687868061546,"duration":4},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687868061542,"stop":1687868061543,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"1b0a0959946ccf59","name":"期望状态码","source":"1b0a0959946ccf59.attach","type":"text/plain","size":3},{"uid":"6eb32b1a143a841a","name":"实际状态码","source":"6eb32b1a143a841a.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687868061543,"stop":1687868061544,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"8f8d4642d59acd50","name":"期望返回值","source":"8f8d4642d59acd50.attach","type":"text/plain","size":17},{"uid":"af96e8dffd6e7122","name":"实际返回值","source":"af96e8dffd6e7122.attach","type":"text/plain","size":1288}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"json断言判断包含","time":{"start":1687868061545,"stop":1687868061546,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"67bb5bbec3c3442b","name":"期望结果","source":"67bb5bbec3c3442b.attach","type":"text/plain","size":90},{"uid":"935714b7fde84a41","name":"实际实际结果","source":"935714b7fde84a41.attach","type":"text/plain","size":47}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":3,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":6}],"attachments":[],"parameters":[],"stepsCount":9,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":20},{"name":"执行当前接口：修改指纹库-本地上传-挂载","time":{"start":1687868061547,"stop":1687868061625,"duration":78},"status":"passed","steps":[],"attachments":[{"uid":"f78a69171631a36d","name":"请求方法：","source":"f78a69171631a36d.attach","type":"text/plain","size":4},{"uid":"8301a34336ca063c","name":"请求地址","source":"8301a34336ca063c.attach","type":"text/plain","size":76},{"uid":"36d5508fdc81e08f","name":"请求头","source":"36d5508fdc81e08f.attach","type":"text/plain","size":483},{"uid":"566874fbf96b7c64","name":"请求参数","source":"566874fbf96b7c64.attach","type":"text/plain","size":428},{"uid":"ba30e44661c578d4","name":"上传文件","source":"ba30e44661c578d4.attach","type":"text/plain","size":29},{"uid":"7e40c4cfc4968eb3","name":"请求结果","source":"7e40c4cfc4968eb3.attach","type":"text/plain","size":77}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":6},{"name":"结果校验","time":{"start":1687868061625,"stop":1687868061628,"duration":3},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 83, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687868061625,"stop":1687868061627,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"6905eb5424727632","name":"期望状态码","source":"6905eb5424727632.attach","type":"text/plain","size":3},{"uid":"52191537fd2ea5f0","name":"实际状态码","source":"52191537fd2ea5f0.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1687868061627,"stop":1687868061628,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 83, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"447f577aa7ae9ab7","name":"期望返回值","source":"447f577aa7ae9ab7.attach","type":"text/plain","size":17},{"uid":"4ca50ba7f68f6c6d","name":"实际返回值","source":"4ca50ba7f68f6c6d.attach","type":"text/plain","size":77}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[{"uid":"eb28cdd00f02bb7b","name":"log","source":"eb28cdd00f02bb7b.txt","type":"text/plain","size":13696}],"parameters":[],"stepsCount":14,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":31},"afterStages":[],"labels":[{"name":"epic","value":"规则管理"},{"name":"feature","value":"基础规则-文件指纹"},{"name":"story","value":"更新文档指纹库接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_11_docFinger"},{"name":"subSuite","value":"TestDocFinger"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"14564-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_11_docFinger"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"6139001d592c3e2d.json","parameterValues":[]}