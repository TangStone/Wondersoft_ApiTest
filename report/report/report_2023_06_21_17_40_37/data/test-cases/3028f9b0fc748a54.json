{"uid":"3028f9b0fc748a54","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687340393035,"stop":1687340393198,"duration":163},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000001F70BFAD580>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000001F70BFAD580>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687340393035,"stop":1687340393120,"duration":85},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687340393047,"stop":1687340393117,"duration":70},"status":"passed","steps":[],"attachments":[{"uid":"bb559304042c3efa","name":"请求方法：","source":"bb559304042c3efa.attach","type":"text/plain","size":3},{"uid":"b156b813658ebbb7","name":"请求地址","source":"b156b813658ebbb7.attach","type":"text/plain","size":51},{"uid":"d7815321c970f17d","name":"请求头","source":"d7815321c970f17d.attach","type":"text/plain","size":467},{"uid":"4b6e8faf6b790bc5","name":"请求参数","source":"4b6e8faf6b790bc5.attach","type":"text/plain","size":30},{"uid":"5254ae487ef9fbb","name":"请求结果","source":"5254ae487ef9fbb.attach","type":"text/plain","size":2564}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687340393117,"stop":1687340393120,"duration":3},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687340393117,"stop":1687340393119,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"cc250885a0f3ec9a","name":"期望状态码","source":"cc250885a0f3ec9a.attach","type":"text/plain","size":3},{"uid":"a2a2dbe2117091e1","name":"实际状态码","source":"a2a2dbe2117091e1.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687340393119,"stop":1687340393120,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"419280e5292760b3","name":"期望返回值","source":"419280e5292760b3.attach","type":"text/plain","size":35},{"uid":"8910d6b835312ecc","name":"实际返回值","source":"8910d6b835312ecc.attach","type":"text/plain","size":2564}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"attachmentsCount":9,"shouldDisplayMessage":false},{"name":"执行当前接口：获取同步根组id","time":{"start":1687340393125,"stop":1687340393196,"duration":71},"status":"passed","steps":[],"attachments":[{"uid":"240dbc1bbb54cfe7","name":"请求方法：","source":"240dbc1bbb54cfe7.attach","type":"text/plain","size":3},{"uid":"aa16b0ab4e245eb1","name":"请求地址","source":"aa16b0ab4e245eb1.attach","type":"text/plain","size":64},{"uid":"a60b7d0439fd281b","name":"请求头","source":"a60b7d0439fd281b.attach","type":"text/plain","size":467},{"uid":"6852b2446b50a365","name":"请求参数","source":"6852b2446b50a365.attach","type":"text/plain","size":34},{"uid":"f14fab3c9fa4a969","name":"请求结果","source":"f14fab3c9fa4a969.attach","type":"text/plain","size":64}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687340393196,"stop":1687340393198,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687340393196,"stop":1687340393197,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"377f52b136d23bae","name":"期望状态码","source":"377f52b136d23bae.attach","type":"text/plain","size":3},{"uid":"a4929bfd0406d791","name":"实际状态码","source":"a4929bfd0406d791.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687340393197,"stop":1687340393197,"duration":0},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"f95788b19056ec74","name":"期望返回值","source":"f95788b19056ec74.attach","type":"text/plain","size":35},{"uid":"eccc31e63279adc2","name":"实际返回值","source":"eccc31e63279adc2.attach","type":"text/plain","size":64}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"7c08655fb98cce37","name":"log","source":"7c08655fb98cce37.txt","type":"text/plain","size":10626}],"parameters":[],"hasContent":true,"stepsCount":9,"attachmentsCount":19,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"12020-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"3028f9b0fc748a54.json","parameterValues":[]}