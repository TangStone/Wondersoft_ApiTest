{"uid":"295fa0f1f76a1483","name":"更新指纹库-服务器导入-挂载","fullName":"bms.testcases.test_11_docFinger.TestDocFinger#test_docFinger_update","historyId":"ed1e7729e4b9bf1622652111bd7986b0","time":{"start":1687340421466,"stop":1687340421700,"duration":234},"description":"更新指纹库-服务器导入-挂载","descriptionHtml":"<p>更新指纹库-服务器导入-挂载</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x000001F70C0BCC40>\ncaseid = 'docFinger_update_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_01', 'description': '更新指纹库-服务器导入-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"更新指纹库-服务器导入-挂载","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x000001F70C0BCC40>\ncaseid = 'docFinger_update_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_01', 'description': '更新指纹库-服务器导入-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687340421467,"stop":1687340421633,"duration":166},"status":"passed","steps":[{"name":"执行当前接口：获取json文件类型","time":{"start":1687340421478,"stop":1687340421545,"duration":67},"status":"passed","steps":[],"attachments":[{"uid":"71f40fc941dff7ef","name":"请求方法：","source":"71f40fc941dff7ef.attach","type":"text/plain","size":4},{"uid":"90d0bb86986fe8d1","name":"请求地址","source":"90d0bb86986fe8d1.attach","type":"text/plain","size":71},{"uid":"178fbd0368916a94","name":"请求头","source":"178fbd0368916a94.attach","type":"text/plain","size":497},{"uid":"f7911d63640c1034","name":"请求参数","source":"f7911d63640c1034.attach","type":"text/plain","size":25},{"uid":"1c3b9a8843f182f","name":"请求结果","source":"1c3b9a8843f182f.attach","type":"text/plain","size":103}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687340421545,"stop":1687340421547,"duration":2},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687340421545,"stop":1687340421546,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"df3cfda75df6794d","name":"期望状态码","source":"df3cfda75df6794d.attach","type":"text/plain","size":3},{"uid":"60de759a52f0fe9c","name":"实际状态码","source":"60de759a52f0fe9c.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687340421546,"stop":1687340421547,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"5db5ec3db58d4170","name":"期望返回值","source":"5db5ec3db58d4170.attach","type":"text/plain","size":17},{"uid":"84af9661f198b472","name":"实际返回值","source":"84af9661f198b472.attach","type":"text/plain","size":103}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false},{"name":"执行当前接口：文档指纹库列表查询-根据指纹库名称模糊筛选","time":{"start":1687340421558,"stop":1687340421618,"duration":60},"status":"passed","steps":[],"attachments":[{"uid":"12594fde8d28e6dd","name":"请求方法：","source":"12594fde8d28e6dd.attach","type":"text/plain","size":4},{"uid":"2407a536c555e8a1","name":"请求地址","source":"2407a536c555e8a1.attach","type":"text/plain","size":80},{"uid":"75b8d25b9db3670c","name":"请求头","source":"75b8d25b9db3670c.attach","type":"text/plain","size":497},{"uid":"d1880376c32401a0","name":"请求参数","source":"d1880376c32401a0.attach","type":"text/plain","size":81},{"uid":"2a2f4d766988e922","name":"请求结果","source":"2a2f4d766988e922.attach","type":"text/plain","size":1262}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687340421618,"stop":1687340421633,"duration":15},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687340421618,"stop":1687340421619,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"63da3095b60fea24","name":"期望状态码","source":"63da3095b60fea24.attach","type":"text/plain","size":3},{"uid":"fdbfcdb9faf5ce5c","name":"实际状态码","source":"fdbfcdb9faf5ce5c.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687340421619,"stop":1687340421620,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"a6434371fa4220ea","name":"期望返回值","source":"a6434371fa4220ea.attach","type":"text/plain","size":17},{"uid":"65471c9c90b18a7e","name":"实际返回值","source":"65471c9c90b18a7e.attach","type":"text/plain","size":1262}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"json断言判断包含","time":{"start":1687340421620,"stop":1687340421633,"duration":13},"status":"passed","steps":[],"attachments":[{"uid":"9636f8b65aebd8f5","name":"期望结果","source":"9636f8b65aebd8f5.attach","type":"text/plain","size":96},{"uid":"f2b692c29c4bc28a","name":"实际实际结果","source":"f2b692c29c4bc28a.attach","type":"text/plain","size":44}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":3,"attachmentsCount":6,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":9,"attachmentsCount":20,"shouldDisplayMessage":false},{"name":"执行当前接口：更新指纹库-服务器导入-挂载","time":{"start":1687340421635,"stop":1687340421696,"duration":61},"status":"passed","steps":[],"attachments":[{"uid":"def94b62b1ce3249","name":"请求方法：","source":"def94b62b1ce3249.attach","type":"text/plain","size":4},{"uid":"88d4877bae517d5a","name":"请求地址","source":"88d4877bae517d5a.attach","type":"text/plain","size":76},{"uid":"7b5ee66d6c62e1f4","name":"请求头","source":"7b5ee66d6c62e1f4.attach","type":"text/plain","size":497},{"uid":"d69f9b033eb17c6","name":"请求参数","source":"d69f9b033eb17c6.attach","type":"text/plain","size":456},{"uid":"eb5bfa651b78cd58","name":"请求结果","source":"eb5bfa651b78cd58.attach","type":"text/plain","size":77}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687340421696,"stop":1687340421699,"duration":3},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687340421696,"stop":1687340421698,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"41c6f98fb6d34043","name":"期望状态码","source":"41c6f98fb6d34043.attach","type":"text/plain","size":3},{"uid":"ecd38543ce6c4371","name":"实际状态码","source":"ecd38543ce6c4371.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687340421698,"stop":1687340421699,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"56bce9201c7d85df","name":"期望返回值","source":"56bce9201c7d85df.attach","type":"text/plain","size":17},{"uid":"610a1048bf8a63f8","name":"实际返回值","source":"610a1048bf8a63f8.attach","type":"text/plain","size":77}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"3c6d6e8edb6b2544","name":"log","source":"3c6d6e8edb6b2544.txt","type":"text/plain","size":13607}],"parameters":[],"hasContent":true,"stepsCount":14,"attachmentsCount":30,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"规则管理"},{"name":"feature","value":"基础规则-文件指纹"},{"name":"story","value":"更新文档指纹库接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_11_docFinger"},{"name":"subSuite","value":"TestDocFinger"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"12020-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_11_docFinger"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"295fa0f1f76a1483.json","parameterValues":[]}