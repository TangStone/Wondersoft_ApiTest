{"uid":"e4073685477d36f","name":"test_roles_list[casedata0]","fullName":"bms.testcases.roles.test_roles_delete.TestRoles#test_roles_list","historyId":"7bdf95e1c35b07c05b9208ba473555f2","time":{"start":1685525190631,"stop":1685525190635,"duration":4},"status":"broken","statusMessage":"KeyError: 'token'","statusTrace":"self = <bms.testcases.roles.test_roles_delete.TestRoles object at 0x0000025D8AE9F820>\ncasedata = {'base_url': '${config(bms_env,host)}', 'expect': {'code': 200, 'jsonpath': [{'asserttype': '==', 'path': '$.statusCod...s_list_01', 'relevance_data': [{'name': 'role_id', 'relevance_type': 'response', 'value': '$.data.list[0].id'}]}], ...}\n\n    @allure.story(api_data['story'])\n    @pytest.mark.parametrize(\"casedata\", api_data['case'].values())\n    def test_roles_list(self,casedata):\n        # pytest.mark.parametrize(ids=casedata['name'])\n>       case_send_data, recv_data = apisend.RequestsSend().excute_case(casedata)\n\nbms\\testcases\\roles\\test_roles_delete.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\apisend.py:27: in excute_case\n    case_data = apiinit.RequestsInit().regroup_casedata(case_data)\ncommon\\apiinit.py:64: in regroup_casedata\n    relevance_dict = self.get_relevance_data(casedata['relevance'])   # 请求关联用例，获取关联参数值\ncommon\\apiinit.py:84: in get_relevance_data\n    case_send_data, recv_data = apisend.RequestsSend().excute_case(casedata)\ncommon\\apisend.py:27: in excute_case\n    case_data = apiinit.RequestsInit().regroup_casedata(case_data)\ncommon\\apiinit.py:65: in regroup_casedata\n    casedata = replacedata.replace_value(casedata, relevance_dict)\ncommon\\replacedata.py:73: in replace_value\n    value = extract_value(i)\ncommon\\replacedata.py:30: in extract_value\n    value = handleyaml.get_yaml_value(CONFIG_DIR, index_str)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfilepath = 'E:/Wondersoft_ApiTest/config/config.yml', expect_str = 'token'\n\n    def get_yaml_value(filepath, expect_str):\n        \"\"\"\n        获取yaml文件中的指定值\n        :param filepath: yaml文件路径\n        :param expect_str: 期望值字符串，‘bms_env,host'\n        :return:\n        \"\"\"\n        yaml_data = read_yaml_data(filepath)\n        expect_value_list = expect_str.split(',')\n        if isinstance(yaml_data, dict):\n            for i in expect_value_list:\n>               yaml_data = yaml_data[i]\nE               KeyError: 'token'\n\ncommon\\handleyaml.py:43: KeyError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_init","time":{"start":1685525190363,"stop":1685525190464,"duration":101},"status":"passed","steps":[{"name":"执行当前接口用户成功登录获取token","time":{"start":1685525190369,"stop":1685525190458,"duration":89},"status":"passed","steps":[{"name":"POST请求","time":{"start":1685525190369,"stop":1685525190370,"duration":1},"status":"passed","steps":[],"attachments":[{"name":"请求地址","size":0},{"name":"请求头","size":0},{"name":"请求参数","size":0}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":3,"shouldDisplayMessage":false}],"attachments":[{"name":"请求结果","size":0}],"parameters":[],"stepsCount":1,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1685525190458,"stop":1685525190462,"duration":4},"status":"passed","steps":[{"name":"判断状态码","time":{"start":1685525190458,"stop":1685525190460,"duration":2},"status":"passed","steps":[],"attachments":[{"name":"期望状态码","size":0},{"name":"实际状态码","size":0}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"json断言判断相等","time":{"start":1685525190460,"stop":1685525190462,"duration":2},"status":"passed","steps":[],"attachments":[{"name":"期望结果","size":0},{"name":"实际实际结果","size":0}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":5,"hasContent":true,"attachmentsCount":8,"shouldDisplayMessage":false},{"name":"clear_yaml","time":{"start":1685525190363,"stop":1685525190363,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"remove_tmp","time":{"start":1685525190464,"stop":1685525190466,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"KeyError: 'token'","statusTrace":"self = <bms.testcases.roles.test_roles_delete.TestRoles object at 0x0000025D8AE9F820>\ncasedata = {'base_url': '${config(bms_env,host)}', 'expect': {'code': 200, 'jsonpath': [{'asserttype': '==', 'path': '$.statusCod...s_list_01', 'relevance_data': [{'name': 'role_id', 'relevance_type': 'response', 'value': '$.data.list[0].id'}]}], ...}\n\n    @allure.story(api_data['story'])\n    @pytest.mark.parametrize(\"casedata\", api_data['case'].values())\n    def test_roles_list(self,casedata):\n        # pytest.mark.parametrize(ids=casedata['name'])\n>       case_send_data, recv_data = apisend.RequestsSend().excute_case(casedata)\n\nbms\\testcases\\roles\\test_roles_delete.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\apisend.py:27: in excute_case\n    case_data = apiinit.RequestsInit().regroup_casedata(case_data)\ncommon\\apiinit.py:64: in regroup_casedata\n    relevance_dict = self.get_relevance_data(casedata['relevance'])   # 请求关联用例，获取关联参数值\ncommon\\apiinit.py:84: in get_relevance_data\n    case_send_data, recv_data = apisend.RequestsSend().excute_case(casedata)\ncommon\\apisend.py:27: in excute_case\n    case_data = apiinit.RequestsInit().regroup_casedata(case_data)\ncommon\\apiinit.py:65: in regroup_casedata\n    casedata = replacedata.replace_value(casedata, relevance_dict)\ncommon\\replacedata.py:73: in replace_value\n    value = extract_value(i)\ncommon\\replacedata.py:30: in extract_value\n    value = handleyaml.get_yaml_value(CONFIG_DIR, index_str)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfilepath = 'E:/Wondersoft_ApiTest/config/config.yml', expect_str = 'token'\n\n    def get_yaml_value(filepath, expect_str):\n        \"\"\"\n        获取yaml文件中的指定值\n        :param filepath: yaml文件路径\n        :param expect_str: 期望值字符串，‘bms_env,host'\n        :return:\n        \"\"\"\n        yaml_data = read_yaml_data(filepath)\n        expect_value_list = expect_str.split(',')\n        if isinstance(yaml_data, dict):\n            for i in expect_value_list:\n>               yaml_data = yaml_data[i]\nE               KeyError: 'token'\n\ncommon\\handleyaml.py:43: KeyError","steps":[{"name":"执行关联接口（角色列表查看)","time":{"start":1685525190633,"stop":1685525190635,"duration":2},"status":"broken","statusMessage":"KeyError: 'token'\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\apiinit.py\", line 84, in get_relevance_data\n    case_send_data, recv_data = apisend.RequestsSend().excute_case(casedata)\n  File \"E:\\Wondersoft_ApiTest\\common\\apisend.py\", line 27, in excute_case\n    case_data = apiinit.RequestsInit().regroup_casedata(case_data)\n  File \"E:\\Wondersoft_ApiTest\\common\\apiinit.py\", line 65, in regroup_casedata\n    casedata = replacedata.replace_value(casedata, relevance_dict)\n  File \"E:\\Wondersoft_ApiTest\\common\\replacedata.py\", line 73, in replace_value\n    value = extract_value(i)\n  File \"E:\\Wondersoft_ApiTest\\common\\replacedata.py\", line 30, in extract_value\n    value = handleyaml.get_yaml_value(CONFIG_DIR, index_str)\n  File \"E:\\Wondersoft_ApiTest\\common\\handleyaml.py\", line 43, in get_yaml_value\n    yaml_data = yaml_data[i]\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true}],"attachments":[{"uid":"604dfae368188691","name":"log","source":"604dfae368188691.txt","type":"text/plain","size":373}],"parameters":[],"stepsCount":1,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"story","value":"角色删除接口"},{"name":"feature","value":"权限管理-角色配置"},{"name":"epic","value":"系统管理"},{"name":"parentSuite","value":"bms.testcases.roles"},{"name":"suite","value":"test_roles_delete"},{"name":"subSuite","value":"TestRoles"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"13672-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.roles.test_roles_delete"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"casedata","value":"{'name': '角色删除成功', 'base_url': '${config(bms_env,host)}', 'request': {'method': 'delete', 'url': '/api/auth/v1/role/${relevance(role_id)}', 'headers': {'Content-Type': 'application/x-www-form-urlencoded', 'token': '${extract(token)}', 'Referer': '${config(bms_env,host)}/sub-app-unity/systemAdminLog'}, 'verify': False}, 'expect': {'code': 200, 'jsonpath': [{'path': '$.statusCode', 'value': 0, 'asserttype': '=='}, {'path': '$.msg', 'value': 'success', 'asserttype': '=='}]}, 'relevance': [{'api': 'bms.data.roles.roles_list', 'caseid': 'roles_list_01', 'relevance_data': [{'relevance_type': 'response', 'value': '$.data.list[0].id', 'name': 'role_id'}]}]}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"e4073685477d36f.json","parameterValues":["{'name': '角色删除成功', 'base_url': '${config(bms_env,host)}', 'request': {'method': 'delete', 'url': '/api/auth/v1/role/${relevance(role_id)}', 'headers': {'Content-Type': 'application/x-www-form-urlencoded', 'token': '${extract(token)}', 'Referer': '${config(bms_env,host)}/sub-app-unity/systemAdminLog'}, 'verify': False}, 'expect': {'code': 200, 'jsonpath': [{'path': '$.statusCode', 'value': 0, 'asserttype': '=='}, {'path': '$.msg', 'value': 'success', 'asserttype': '=='}]}, 'relevance': [{'api': 'bms.data.roles.roles_list', 'caseid': 'roles_list_01', 'relevance_data': [{'relevance_type': 'response', 'value': '$.data.list[0].id', 'name': 'role_id'}]}]}"]}