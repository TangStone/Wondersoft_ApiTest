{"uid":"46ea34629eb6feab","name":"更新指纹库-服务器导入-挂载","fullName":"bms.testcases.test_11_docFinger.TestDocFinger#test_docFinger_update","historyId":"ed1e7729e4b9bf1622652111bd7986b0","time":{"start":1687942623178,"stop":1687942623409,"duration":231},"description":"更新指纹库-服务器导入-挂载","descriptionHtml":"<p>更新指纹库-服务器导入-挂载</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x00000233A92B1DF0>, caseid = 'docFinger_update_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_01', 'description': '更新指纹库-服务器导入-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}, real_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"更新指纹库-服务器导入-挂载","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x00000233A92B1DF0>, caseid = 'docFinger_update_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_01', 'description': '更新指纹库-服务器导入-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}, real_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687942623181,"stop":1687942623347,"duration":166},"status":"passed","steps":[{"name":"执行当前接口：获取json文件类型","time":{"start":1687942623193,"stop":1687942623264,"duration":71},"status":"passed","steps":[],"attachments":[{"uid":"a6e9835862238b5e","name":"请求方法：","source":"a6e9835862238b5e.attach","type":"text/plain","size":4},{"uid":"29e86a2564f9607d","name":"请求地址","source":"29e86a2564f9607d.attach","type":"text/plain","size":71},{"uid":"ebee17ed00bd1eda","name":"请求头","source":"ebee17ed00bd1eda.attach","type":"text/plain","size":497},{"uid":"149a3e69ebdce5b7","name":"请求参数","source":"149a3e69ebdce5b7.attach","type":"text/plain","size":25},{"uid":"b8f26fdb1bc201af","name":"请求结果","source":"b8f26fdb1bc201af.attach","type":"text/plain","size":103}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687942623264,"stop":1687942623267,"duration":3},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687942623264,"stop":1687942623265,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"d4333be090f7e217","name":"期望状态码","source":"d4333be090f7e217.attach","type":"text/plain","size":3},{"uid":"76698cad616b2158","name":"实际状态码","source":"76698cad616b2158.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687942623265,"stop":1687942623267,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"41d6f10e488c35d","name":"期望返回值","source":"41d6f10e488c35d.attach","type":"text/plain","size":17},{"uid":"3b3d938286c6be26","name":"实际返回值","source":"3b3d938286c6be26.attach","type":"text/plain","size":103}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false},{"name":"执行当前接口：文档指纹库列表查询-根据指纹库名称模糊筛选","time":{"start":1687942623277,"stop":1687942623341,"duration":64},"status":"passed","steps":[],"attachments":[{"uid":"b8c44fd33e7d974e","name":"请求方法：","source":"b8c44fd33e7d974e.attach","type":"text/plain","size":4},{"uid":"38b6db68b516c870","name":"请求地址","source":"38b6db68b516c870.attach","type":"text/plain","size":80},{"uid":"fc5ccd3681761151","name":"请求头","source":"fc5ccd3681761151.attach","type":"text/plain","size":497},{"uid":"61fc2efa86ddb019","name":"请求参数","source":"61fc2efa86ddb019.attach","type":"text/plain","size":81},{"uid":"eefc7af6f6ac9461","name":"请求结果","source":"eefc7af6f6ac9461.attach","type":"text/plain","size":1262}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687942623341,"stop":1687942623347,"duration":6},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687942623341,"stop":1687942623344,"duration":3},"status":"passed","steps":[],"attachments":[{"uid":"bbba1c65516a2db6","name":"期望状态码","source":"bbba1c65516a2db6.attach","type":"text/plain","size":3},{"uid":"dffbb236c8ff86d5","name":"实际状态码","source":"dffbb236c8ff86d5.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687942623344,"stop":1687942623345,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"615e48830d09d42a","name":"期望返回值","source":"615e48830d09d42a.attach","type":"text/plain","size":17},{"uid":"2e9d2a3dcd0aac4d","name":"实际返回值","source":"2e9d2a3dcd0aac4d.attach","type":"text/plain","size":1262}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"json断言判断包含","time":{"start":1687942623345,"stop":1687942623347,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"13860ca7fc054fe9","name":"期望结果","source":"13860ca7fc054fe9.attach","type":"text/plain","size":90},{"uid":"b4ab88cda79e6b7e","name":"实际实际结果","source":"b4ab88cda79e6b7e.attach","type":"text/plain","size":44}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":3,"hasContent":true,"attachmentsCount":6,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":9,"hasContent":true,"attachmentsCount":20,"shouldDisplayMessage":false},{"name":"执行当前接口：更新指纹库-服务器导入-挂载","time":{"start":1687942623348,"stop":1687942623405,"duration":57},"status":"passed","steps":[],"attachments":[{"uid":"da98ca8947a7d7a3","name":"请求方法：","source":"da98ca8947a7d7a3.attach","type":"text/plain","size":4},{"uid":"f3f56ae2c626b13f","name":"请求地址","source":"f3f56ae2c626b13f.attach","type":"text/plain","size":76},{"uid":"b39bc8896653c76c","name":"请求头","source":"b39bc8896653c76c.attach","type":"text/plain","size":497},{"uid":"5f4ed6da9980e505","name":"请求参数","source":"5f4ed6da9980e505.attach","type":"text/plain","size":456},{"uid":"4e5e9d1f52380268","name":"请求结果","source":"4e5e9d1f52380268.attach","type":"text/plain","size":77}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687942623405,"stop":1687942623409,"duration":4},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687942623405,"stop":1687942623407,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"8e05113ffa85bad8","name":"期望状态码","source":"8e05113ffa85bad8.attach","type":"text/plain","size":3},{"uid":"1001a70292cd98e3","name":"实际状态码","source":"1001a70292cd98e3.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687942623407,"stop":1687942623408,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"1c9bfbf4c9258703","name":"期望返回值","source":"1c9bfbf4c9258703.attach","type":"text/plain","size":17},{"uid":"707e299cdbf87b33","name":"实际返回值","source":"707e299cdbf87b33.attach","type":"text/plain","size":77}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"b03c4db0ce6fd12","name":"log","source":"b03c4db0ce6fd12.txt","type":"text/plain","size":27921}],"parameters":[],"stepsCount":14,"hasContent":true,"attachmentsCount":30,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"规则管理"},{"name":"feature","value":"基础规则-文件指纹"},{"name":"story","value":"更新文档指纹库接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_11_docFinger"},{"name":"subSuite","value":"TestDocFinger"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"14556-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_11_docFinger"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"46ea34629eb6feab.json","parameterValues":[]}