{"uid":"63cb0e2075c12fe4","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687942558802,"stop":1687942559114,"duration":312},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x00000233A91A1A30>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}, real_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x00000233A91A1A30>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}, real_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687942558808,"stop":1687942559028,"duration":220},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687942558820,"stop":1687942558965,"duration":145},"status":"passed","steps":[],"attachments":[{"uid":"7a641389b678e3a0","name":"请求方法：","source":"7a641389b678e3a0.attach","type":"text/plain","size":3},{"uid":"75a3dd7acead1c9","name":"请求地址","source":"75a3dd7acead1c9.attach","type":"text/plain","size":51},{"uid":"7581bdee66bf8421","name":"请求头","source":"7581bdee66bf8421.attach","type":"text/plain","size":467},{"uid":"3eb9083071201c0b","name":"请求参数","source":"3eb9083071201c0b.attach","type":"text/plain","size":30},{"uid":"dc5451ba02137854","name":"请求结果","source":"dc5451ba02137854.attach","type":"text/plain","size":3457}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687942558965,"stop":1687942559026,"duration":61},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687942558965,"stop":1687942558967,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"910ac670f900803d","name":"期望状态码","source":"910ac670f900803d.attach","type":"text/plain","size":3},{"uid":"2a5a5437639b1f26","name":"实际状态码","source":"2a5a5437639b1f26.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687942558967,"stop":1687942559026,"duration":59},"status":"passed","steps":[],"attachments":[{"uid":"afa0d708909976ec","name":"期望返回值","source":"afa0d708909976ec.attach","type":"text/plain","size":35},{"uid":"87a415ab9072a980","name":"实际返回值","source":"87a415ab9072a980.attach","type":"text/plain","size":3457}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"attachmentsCount":9,"shouldDisplayMessage":false},{"name":"执行当前接口：获取同步根组id","time":{"start":1687942559029,"stop":1687942559103,"duration":74},"status":"passed","steps":[],"attachments":[{"uid":"a8b95110ff5a3a9","name":"请求方法：","source":"a8b95110ff5a3a9.attach","type":"text/plain","size":3},{"uid":"9448c7d265937739","name":"请求地址","source":"9448c7d265937739.attach","type":"text/plain","size":64},{"uid":"7575fd2a8f35a04","name":"请求头","source":"7575fd2a8f35a04.attach","type":"text/plain","size":467},{"uid":"18da29b9d6915bc6","name":"请求参数","source":"18da29b9d6915bc6.attach","type":"text/plain","size":34},{"uid":"2034991cd8425879","name":"请求结果","source":"2034991cd8425879.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687942559103,"stop":1687942559114,"duration":11},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687942559103,"stop":1687942559104,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"67356f082e537223","name":"期望状态码","source":"67356f082e537223.attach","type":"text/plain","size":3},{"uid":"3e698cfd0e08ec82","name":"实际状态码","source":"3e698cfd0e08ec82.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687942559104,"stop":1687942559104,"duration":0},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"da07812575b9bd10","name":"期望返回值","source":"da07812575b9bd10.attach","type":"text/plain","size":35},{"uid":"977ef6975af5031d","name":"实际返回值","source":"977ef6975af5031d.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"46b3cedc095b2bfb","name":"log","source":"46b3cedc095b2bfb.txt","type":"text/plain","size":37698}],"parameters":[],"stepsCount":9,"hasContent":true,"attachmentsCount":19,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"14556-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"63cb0e2075c12fe4.json","parameterValues":[]}