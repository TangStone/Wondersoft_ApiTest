{"uid":"e31f13defc8d3016","name":"新增用户组-长度校验","fullName":"bms.testcases.test_04_user.TestUser#test_user_group_add","historyId":"01e42f2b4ca4d0e6175537a726fe6570","time":{"start":1687942575911,"stop":1687942576012,"duration":101},"description":"新增用户组，用户组名称超长，新增失败，提示信息正确","descriptionHtml":"<p>新增用户组，用户组名称超长，新增失败，提示信息正确</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_04_user.TestUser object at 0x00000233A91B4550>, caseid = 'user_group_add_04'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'user_group_add_04', 'description': '新增用户组，用户组名称超长，新增失败，提示信息正确', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/user/user_group_add.yaml').items()])\n    def test_user_group_add(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_04_user.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:33: in check_result\n    assert_db(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = [{'result': [{'path': '$.count', 'value': 0}], 'sql': \"select count(*) as count from `bms-general-uba`.t_group_info where groupName = '自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组' and isRemoved = '0'\", 'type': 'mysql'}]\n\n    def assert_db(hope_res):\n        \"\"\"\n        数据库校验\n        :param hope_res:\n        :return:\n        \"\"\"\n        if hope_res:\n            for dbcheck_data in hope_res:\n                db_type = dbcheck_data['type']  # 数据库类型\n                db_sql = dbcheck_data['sql']\n                if db_type == 'mysql':\n                    if db_sql[0:6].upper() == 'SELECT':\n                        sql_date = database.MysqlConn().mysql_query(db_sql)\n                        with allure.step(\"数据库校验校验\"):\n                            for param in dbcheck_data['result']:\n                                sql_value = jsonpath.jsonpath(sql_date, param['path'])\n                                value = param['value']\n                                try:\n                                    allure.attach(name=\"查询sql\", body=str(db_sql))\n                                    allure.attach(name=\"期望返回值\", body=str(value))\n                                    if sql_value:\n                                        allure.attach(name='实际返回值', body=str(sql_value[0]))\n>                                       assert str(value) == str(sql_value[0])\nE                                       AssertionError\n\ncommon\\checkresult.py:57: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"新增用户组，用户组名称超长，新增失败，提示信息正确","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_04_user.TestUser object at 0x00000233A91B4550>, caseid = 'user_group_add_04'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'user_group_add_04', 'description': '新增用户组，用户组名称超长，新增失败，提示信息正确', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/user/user_group_add.yaml').items()])\n    def test_user_group_add(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_04_user.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:33: in check_result\n    assert_db(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = [{'result': [{'path': '$.count', 'value': 0}], 'sql': \"select count(*) as count from `bms-general-uba`.t_group_info where groupName = '自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组' and isRemoved = '0'\", 'type': 'mysql'}]\n\n    def assert_db(hope_res):\n        \"\"\"\n        数据库校验\n        :param hope_res:\n        :return:\n        \"\"\"\n        if hope_res:\n            for dbcheck_data in hope_res:\n                db_type = dbcheck_data['type']  # 数据库类型\n                db_sql = dbcheck_data['sql']\n                if db_type == 'mysql':\n                    if db_sql[0:6].upper() == 'SELECT':\n                        sql_date = database.MysqlConn().mysql_query(db_sql)\n                        with allure.step(\"数据库校验校验\"):\n                            for param in dbcheck_data['result']:\n                                sql_value = jsonpath.jsonpath(sql_date, param['path'])\n                                value = param['value']\n                                try:\n                                    allure.attach(name=\"查询sql\", body=str(db_sql))\n                                    allure.attach(name=\"期望返回值\", body=str(value))\n                                    if sql_value:\n                                        allure.attach(name='实际返回值', body=str(sql_value[0]))\n>                                       assert str(value) == str(sql_value[0])\nE                                       AssertionError\n\ncommon\\checkresult.py:57: AssertionError","steps":[{"name":"执行当前接口：新增用户组-长度校验","time":{"start":1687942575916,"stop":1687942576001,"duration":85},"status":"passed","steps":[],"attachments":[{"uid":"d7c9137071c264a8","name":"请求方法：","source":"d7c9137071c264a8.attach","type":"text/plain","size":4},{"uid":"f0995f1aadbd4dc1","name":"请求地址","source":"f0995f1aadbd4dc1.attach","type":"text/plain","size":47},{"uid":"cab9e6dba92d5a19","name":"请求头","source":"cab9e6dba92d5a19.attach","type":"text/plain","size":464},{"uid":"9ae92d217bc07ab4","name":"请求参数","source":"9ae92d217bc07ab4.attach","type":"text/plain","size":207},{"uid":"4a8507797e0b32b3","name":"请求结果","source":"4a8507797e0b32b3.attach","type":"text/plain","size":230}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687942576001,"stop":1687942576012,"duration":11},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 33, in check_result\n    assert_db(value)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[{"name":"状态码校验","time":{"start":1687942576001,"stop":1687942576002,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"b9d1dc407cd16c51","name":"期望状态码","source":"b9d1dc407cd16c51.attach","type":"text/plain","size":3},{"uid":"e3237c5e23f555d2","name":"实际状态码","source":"e3237c5e23f555d2.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"数据库校验校验","time":{"start":1687942576010,"stop":1687942576012,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[],"attachments":[{"uid":"cdfb26920d7d3a00","name":"查询sql","source":"cdfb26920d7d3a00.attach","type":"text/plain","size":269},{"uid":"30094c40cbdf4155","name":"期望返回值","source":"30094c40cbdf4155.attach","type":"text/plain","size":1},{"uid":"3c551c40dab818ee","name":"实际返回值","source":"3c551c40dab818ee.attach","type":"text/plain","size":1}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":3,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false}],"attachments":[{"uid":"400939097064d86d","name":"log","source":"400939097064d86d.txt","type":"text/plain","size":10390}],"parameters":[],"stepsCount":4,"hasContent":true,"attachmentsCount":11,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"基础数据管理-用户与机构管理"},{"name":"story","value":"新增用户组接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_04_user"},{"name":"subSuite","value":"TestUser"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"14556-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_04_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"e31f13defc8d3016.json","parameterValues":[]}