{"uid":"3d1e80602278175f","name":"更新指纹库-服务器导入-挂载","fullName":"bms.testcases.test_11_docFinger.TestDocFinger#test_docFinger_update","historyId":"ed1e7729e4b9bf1622652111bd7986b0","time":{"start":1687942617445,"stop":1687942617710,"duration":265},"description":"更新指纹库-服务器导入-挂载","descriptionHtml":"<p>更新指纹库-服务器导入-挂载</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x00000233A92B1DF0>, caseid = 'docFinger_update_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_01', 'description': '更新指纹库-服务器导入-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}, real_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"更新指纹库-服务器导入-挂载","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x00000233A92B1DF0>, caseid = 'docFinger_update_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_01', 'description': '更新指纹库-服务器导入-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}, real_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687942617447,"stop":1687942617644,"duration":197},"status":"passed","steps":[{"name":"执行当前接口：获取json文件类型","time":{"start":1687942617454,"stop":1687942617507,"duration":53},"status":"passed","steps":[],"attachments":[{"uid":"464baed3eec87f59","name":"请求方法：","source":"464baed3eec87f59.attach","type":"text/plain","size":4},{"uid":"3005c1db8ec476fd","name":"请求地址","source":"3005c1db8ec476fd.attach","type":"text/plain","size":71},{"uid":"d2eb075dd0ea0411","name":"请求头","source":"d2eb075dd0ea0411.attach","type":"text/plain","size":497},{"uid":"96b6577a4ca2715d","name":"请求参数","source":"96b6577a4ca2715d.attach","type":"text/plain","size":25},{"uid":"12823223fc6b53b3","name":"请求结果","source":"12823223fc6b53b3.attach","type":"text/plain","size":103}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687942617508,"stop":1687942617510,"duration":2},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687942617508,"stop":1687942617509,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"6a3915243d30b677","name":"期望状态码","source":"6a3915243d30b677.attach","type":"text/plain","size":3},{"uid":"bdcfddf4e1ac494","name":"实际状态码","source":"bdcfddf4e1ac494.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687942617509,"stop":1687942617510,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"e9281e63f20ed58f","name":"期望返回值","source":"e9281e63f20ed58f.attach","type":"text/plain","size":17},{"uid":"bb29cab465242424","name":"实际返回值","source":"bb29cab465242424.attach","type":"text/plain","size":103}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false},{"name":"执行当前接口：文档指纹库列表查询-根据指纹库名称模糊筛选","time":{"start":1687942617520,"stop":1687942617638,"duration":118},"status":"passed","steps":[],"attachments":[{"uid":"e9f6f282ef6db1b3","name":"请求方法：","source":"e9f6f282ef6db1b3.attach","type":"text/plain","size":4},{"uid":"8baaea8f67c58773","name":"请求地址","source":"8baaea8f67c58773.attach","type":"text/plain","size":80},{"uid":"c2ea19a8648fd97b","name":"请求头","source":"c2ea19a8648fd97b.attach","type":"text/plain","size":497},{"uid":"33c800d7948ea033","name":"请求参数","source":"33c800d7948ea033.attach","type":"text/plain","size":81},{"uid":"f7b77e0cff3a470a","name":"请求结果","source":"f7b77e0cff3a470a.attach","type":"text/plain","size":1262}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687942617638,"stop":1687942617643,"duration":5},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687942617638,"stop":1687942617640,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"4f85e8cdc57c86b6","name":"期望状态码","source":"4f85e8cdc57c86b6.attach","type":"text/plain","size":3},{"uid":"a3fd12581e0fe144","name":"实际状态码","source":"a3fd12581e0fe144.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687942617640,"stop":1687942617642,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"5109fd97236168d1","name":"期望返回值","source":"5109fd97236168d1.attach","type":"text/plain","size":17},{"uid":"2e338ff584debb9e","name":"实际返回值","source":"2e338ff584debb9e.attach","type":"text/plain","size":1262}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"json断言判断包含","time":{"start":1687942617642,"stop":1687942617643,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"f7dd24ed3477b691","name":"期望结果","source":"f7dd24ed3477b691.attach","type":"text/plain","size":90},{"uid":"a83c8272b1279b18","name":"实际实际结果","source":"a83c8272b1279b18.attach","type":"text/plain","size":44}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":3,"hasContent":true,"attachmentsCount":6,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":9,"hasContent":true,"attachmentsCount":20,"shouldDisplayMessage":false},{"name":"执行当前接口：更新指纹库-服务器导入-挂载","time":{"start":1687942617645,"stop":1687942617706,"duration":61},"status":"passed","steps":[],"attachments":[{"uid":"9e04674c9a3b2feb","name":"请求方法：","source":"9e04674c9a3b2feb.attach","type":"text/plain","size":4},{"uid":"69825bc93cc89546","name":"请求地址","source":"69825bc93cc89546.attach","type":"text/plain","size":76},{"uid":"29141b0f9b08ff86","name":"请求头","source":"29141b0f9b08ff86.attach","type":"text/plain","size":497},{"uid":"cf96db03068e262","name":"请求参数","source":"cf96db03068e262.attach","type":"text/plain","size":456},{"uid":"5b59c0e5b10c8200","name":"请求结果","source":"5b59c0e5b10c8200.attach","type":"text/plain","size":77}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687942617707,"stop":1687942617710,"duration":3},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687942617707,"stop":1687942617708,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"547634a97d099887","name":"期望状态码","source":"547634a97d099887.attach","type":"text/plain","size":3},{"uid":"53ab32cfd69dcd39","name":"实际状态码","source":"53ab32cfd69dcd39.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687942617708,"stop":1687942617709,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"11312d3231b7d169","name":"期望返回值","source":"11312d3231b7d169.attach","type":"text/plain","size":17},{"uid":"696aae5aa9137e98","name":"实际返回值","source":"696aae5aa9137e98.attach","type":"text/plain","size":77}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"47ace0484cd46d7c","name":"log","source":"47ace0484cd46d7c.txt","type":"text/plain","size":13960}],"parameters":[],"stepsCount":14,"hasContent":true,"attachmentsCount":30,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"规则管理"},{"name":"feature","value":"基础规则-文件指纹"},{"name":"story","value":"更新文档指纹库接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_11_docFinger"},{"name":"subSuite","value":"TestDocFinger"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"14556-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_11_docFinger"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"3d1e80602278175f.json","parameterValues":[]}