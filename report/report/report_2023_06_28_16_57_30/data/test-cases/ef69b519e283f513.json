{"uid":"ef69b519e283f513","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687942546703,"stop":1687942546907,"duration":204},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x00000233A91A1A30>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}, real_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x00000233A91A1A30>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}, real_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687942546709,"stop":1687942546790,"duration":81},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687942546724,"stop":1687942546785,"duration":61},"status":"passed","steps":[],"attachments":[{"uid":"da478401cce122ca","name":"请求方法：","source":"da478401cce122ca.attach","type":"text/plain","size":3},{"uid":"509a02ed2efc7f44","name":"请求地址","source":"509a02ed2efc7f44.attach","type":"text/plain","size":51},{"uid":"71ea0b7cf33566b0","name":"请求头","source":"71ea0b7cf33566b0.attach","type":"text/plain","size":467},{"uid":"1954af9d251e5d2d","name":"请求参数","source":"1954af9d251e5d2d.attach","type":"text/plain","size":30},{"uid":"b8775afd312d7e99","name":"请求结果","source":"b8775afd312d7e99.attach","type":"text/plain","size":3364}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687942546785,"stop":1687942546790,"duration":5},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687942546785,"stop":1687942546787,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"30107de062b6ea54","name":"期望状态码","source":"30107de062b6ea54.attach","type":"text/plain","size":3},{"uid":"e255ca0f27edc7e3","name":"实际状态码","source":"e255ca0f27edc7e3.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687942546787,"stop":1687942546790,"duration":3},"status":"passed","steps":[],"attachments":[{"uid":"80f7ca0c314c2bfb","name":"期望返回值","source":"80f7ca0c314c2bfb.attach","type":"text/plain","size":35},{"uid":"7cc232a28d32df83","name":"实际返回值","source":"7cc232a28d32df83.attach","type":"text/plain","size":3364}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"attachmentsCount":9,"shouldDisplayMessage":false},{"name":"执行当前接口：获取同步根组id","time":{"start":1687942546791,"stop":1687942546858,"duration":67},"status":"passed","steps":[],"attachments":[{"uid":"f8d47731f5c468a5","name":"请求方法：","source":"f8d47731f5c468a5.attach","type":"text/plain","size":3},{"uid":"6817f9d758961a20","name":"请求地址","source":"6817f9d758961a20.attach","type":"text/plain","size":64},{"uid":"e55aa55e9b554c26","name":"请求头","source":"e55aa55e9b554c26.attach","type":"text/plain","size":467},{"uid":"abc80c86b4c58cf6","name":"请求参数","source":"abc80c86b4c58cf6.attach","type":"text/plain","size":34},{"uid":"1c8bbea0b519441d","name":"请求结果","source":"1c8bbea0b519441d.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687942546858,"stop":1687942546906,"duration":48},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687942546858,"stop":1687942546859,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"cd69539997e4b681","name":"期望状态码","source":"cd69539997e4b681.attach","type":"text/plain","size":3},{"uid":"17d862d03006c88f","name":"实际状态码","source":"17d862d03006c88f.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687942546859,"stop":1687942546860,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"5bc50607570b20e8","name":"期望返回值","source":"5bc50607570b20e8.attach","type":"text/plain","size":35},{"uid":"6c00f15950459e99","name":"实际返回值","source":"6c00f15950459e99.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"f268ed89fceeb70b","name":"log","source":"f268ed89fceeb70b.txt","type":"text/plain","size":12464}],"parameters":[],"stepsCount":9,"hasContent":true,"attachmentsCount":19,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"14556-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"ef69b519e283f513.json","parameterValues":[]}