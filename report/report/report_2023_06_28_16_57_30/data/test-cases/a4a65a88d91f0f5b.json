{"uid":"a4a65a88d91f0f5b","name":"新增用户组-特殊字符校验","fullName":"bms.testcases.test_04_user.TestUser#test_user_group_add","historyId":"05c4baabf07ce16940066db47c892f8b","time":{"start":1687942581175,"stop":1687942581344,"duration":169},"description":"新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确","descriptionHtml":"<p>新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_04_user.TestUser object at 0x00000233A91B4DF0>, caseid = 'user_group_add_05'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'user_group_add_05', 'description': '新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/user/user_group_add.yaml').items()])\n    def test_user_group_add(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_04_user.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:33: in check_result\n    assert_db(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = [{'result': [{'path': '$.count', 'value': 0}], 'sql': \"select count(*) as count from `bms-general-uba`.t_group_info where groupName = '自动化测试根组……&%' and isRemoved = '0'\", 'type': 'mysql'}]\n\n    def assert_db(hope_res):\n        \"\"\"\n        数据库校验\n        :param hope_res:\n        :return:\n        \"\"\"\n        if hope_res:\n            for dbcheck_data in hope_res:\n                db_type = dbcheck_data['type']  # 数据库类型\n                db_sql = dbcheck_data['sql']\n                if db_type == 'mysql':\n                    if db_sql[0:6].upper() == 'SELECT':\n                        sql_date = database.MysqlConn().mysql_query(db_sql)\n                        with allure.step(\"数据库校验校验\"):\n                            for param in dbcheck_data['result']:\n                                sql_value = jsonpath.jsonpath(sql_date, param['path'])\n                                value = param['value']\n                                try:\n                                    allure.attach(name=\"查询sql\", body=str(db_sql))\n                                    allure.attach(name=\"期望返回值\", body=str(value))\n                                    if sql_value:\n                                        allure.attach(name='实际返回值', body=str(sql_value[0]))\n>                                       assert str(value) == str(sql_value[0])\nE                                       AssertionError\n\ncommon\\checkresult.py:57: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_04_user.TestUser object at 0x00000233A91B4DF0>, caseid = 'user_group_add_05'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'user_group_add_05', 'description': '新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/user/user_group_add.yaml').items()])\n    def test_user_group_add(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_04_user.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:33: in check_result\n    assert_db(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = [{'result': [{'path': '$.count', 'value': 0}], 'sql': \"select count(*) as count from `bms-general-uba`.t_group_info where groupName = '自动化测试根组……&%' and isRemoved = '0'\", 'type': 'mysql'}]\n\n    def assert_db(hope_res):\n        \"\"\"\n        数据库校验\n        :param hope_res:\n        :return:\n        \"\"\"\n        if hope_res:\n            for dbcheck_data in hope_res:\n                db_type = dbcheck_data['type']  # 数据库类型\n                db_sql = dbcheck_data['sql']\n                if db_type == 'mysql':\n                    if db_sql[0:6].upper() == 'SELECT':\n                        sql_date = database.MysqlConn().mysql_query(db_sql)\n                        with allure.step(\"数据库校验校验\"):\n                            for param in dbcheck_data['result']:\n                                sql_value = jsonpath.jsonpath(sql_date, param['path'])\n                                value = param['value']\n                                try:\n                                    allure.attach(name=\"查询sql\", body=str(db_sql))\n                                    allure.attach(name=\"期望返回值\", body=str(value))\n                                    if sql_value:\n                                        allure.attach(name='实际返回值', body=str(sql_value[0]))\n>                                       assert str(value) == str(sql_value[0])\nE                                       AssertionError\n\ncommon\\checkresult.py:57: AssertionError","steps":[{"name":"执行当前接口：新增用户组-特殊字符校验","time":{"start":1687942581203,"stop":1687942581310,"duration":107},"status":"passed","steps":[],"attachments":[{"uid":"c3549565d97fb959","name":"请求方法：","source":"c3549565d97fb959.attach","type":"text/plain","size":4},{"uid":"7442e0db4489bf56","name":"请求地址","source":"7442e0db4489bf56.attach","type":"text/plain","size":47},{"uid":"54247e33672e41be","name":"请求头","source":"54247e33672e41be.attach","type":"text/plain","size":464},{"uid":"10ba4b6437a22caf","name":"请求参数","source":"10ba4b6437a22caf.attach","type":"text/plain","size":68},{"uid":"9db9c074617b492b","name":"请求结果","source":"9db9c074617b492b.attach","type":"text/plain","size":35}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687942581311,"stop":1687942581343,"duration":32},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 33, in check_result\n    assert_db(value)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[{"name":"状态码校验","time":{"start":1687942581311,"stop":1687942581312,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"c3e34ee3315d5d9e","name":"期望状态码","source":"c3e34ee3315d5d9e.attach","type":"text/plain","size":3},{"uid":"c990ee93cb01ae20","name":"实际状态码","source":"c990ee93cb01ae20.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"数据库校验校验","time":{"start":1687942581340,"stop":1687942581343,"duration":3},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[],"attachments":[{"uid":"aae29096eba5149c","name":"查询sql","source":"aae29096eba5149c.attach","type":"text/plain","size":130},{"uid":"7966f191d7aa7170","name":"期望返回值","source":"7966f191d7aa7170.attach","type":"text/plain","size":1},{"uid":"6803ae2a5ee1146b","name":"实际返回值","source":"6803ae2a5ee1146b.attach","type":"text/plain","size":1}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":3,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false}],"attachments":[{"uid":"ea7e40c750f3edbb","name":"log","source":"ea7e40c750f3edbb.txt","type":"text/plain","size":2933}],"parameters":[],"stepsCount":4,"hasContent":true,"attachmentsCount":11,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"基础数据管理-用户与机构管理"},{"name":"story","value":"新增用户组接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_04_user"},{"name":"subSuite","value":"TestUser"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"14556-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_04_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"a4a65a88d91f0f5b.json","parameterValues":[]}