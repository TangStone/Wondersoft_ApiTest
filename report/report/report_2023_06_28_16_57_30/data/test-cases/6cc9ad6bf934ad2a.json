{"uid":"6cc9ad6bf934ad2a","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687942564171,"stop":1687942564643,"duration":472},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x00000233A91A1A30>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}, real_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x00000233A91A1A30>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}, real_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687942564177,"stop":1687942564553,"duration":376},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687942564194,"stop":1687942564271,"duration":77},"status":"passed","steps":[],"attachments":[{"uid":"196ed0b6110310a1","name":"请求方法：","source":"196ed0b6110310a1.attach","type":"text/plain","size":3},{"uid":"f6eb93c674d1deab","name":"请求地址","source":"f6eb93c674d1deab.attach","type":"text/plain","size":51},{"uid":"c255d30d6429682e","name":"请求头","source":"c255d30d6429682e.attach","type":"text/plain","size":467},{"uid":"5c0f1fbd266a78ea","name":"请求参数","source":"5c0f1fbd266a78ea.attach","type":"text/plain","size":30},{"uid":"f99391e011bf4b65","name":"请求结果","source":"f99391e011bf4b65.attach","type":"text/plain","size":3457}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687942564271,"stop":1687942564552,"duration":281},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687942564271,"stop":1687942564274,"duration":3},"status":"passed","steps":[],"attachments":[{"uid":"a79a65e074b591e","name":"期望状态码","source":"a79a65e074b591e.attach","type":"text/plain","size":3},{"uid":"86313fb884ab12a","name":"实际状态码","source":"86313fb884ab12a.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687942564274,"stop":1687942564551,"duration":277},"status":"passed","steps":[],"attachments":[{"uid":"f97b4cb20a482bcc","name":"期望返回值","source":"f97b4cb20a482bcc.attach","type":"text/plain","size":35},{"uid":"39bade2a103045f2","name":"实际返回值","source":"39bade2a103045f2.attach","type":"text/plain","size":3457}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"attachmentsCount":9,"shouldDisplayMessage":false},{"name":"执行当前接口：获取同步根组id","time":{"start":1687942564554,"stop":1687942564640,"duration":86},"status":"passed","steps":[],"attachments":[{"uid":"ce4d68e6497a3984","name":"请求方法：","source":"ce4d68e6497a3984.attach","type":"text/plain","size":3},{"uid":"1d8239a7a3efa259","name":"请求地址","source":"1d8239a7a3efa259.attach","type":"text/plain","size":64},{"uid":"b23bcad0ed643f47","name":"请求头","source":"b23bcad0ed643f47.attach","type":"text/plain","size":467},{"uid":"cab0b1fe2b581af7","name":"请求参数","source":"cab0b1fe2b581af7.attach","type":"text/plain","size":34},{"uid":"698aad3a6e962415","name":"请求结果","source":"698aad3a6e962415.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687942564640,"stop":1687942564643,"duration":3},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687942564640,"stop":1687942564641,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"c7d9ac97e9d69c19","name":"期望状态码","source":"c7d9ac97e9d69c19.attach","type":"text/plain","size":3},{"uid":"6e039c98a067d2f6","name":"实际状态码","source":"6e039c98a067d2f6.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687942564641,"stop":1687942564642,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"4a2390f10066177f","name":"期望返回值","source":"4a2390f10066177f.attach","type":"text/plain","size":35},{"uid":"c88c0b73e0c7fabf","name":"实际返回值","source":"c88c0b73e0c7fabf.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"7a2c76bb44b70a2a","name":"log","source":"7a2c76bb44b70a2a.txt","type":"text/plain","size":50349}],"parameters":[],"stepsCount":9,"hasContent":true,"attachmentsCount":19,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"14556-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"63cb0e2075c12fe4","status":"failed","statusDetails":"AssertionError","time":{"start":1687942558802,"stop":1687942559114,"duration":312}},{"uid":"abb0b025bd618de0","status":"failed","statusDetails":"AssertionError","time":{"start":1687942553210,"stop":1687942553779,"duration":569}},{"uid":"ef69b519e283f513","status":"failed","statusDetails":"AssertionError","time":{"start":1687942546703,"stop":1687942546907,"duration":204}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"6cc9ad6bf934ad2a.json","parameterValues":[]}