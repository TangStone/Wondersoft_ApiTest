{"uid":"a8b1b9190bf8477f","name":"新增用户组-长度校验","fullName":"testcases.test_cases.TestUserSync#test_businesscases","historyId":"f92a754065a8f7f8643f7eba2c471a78","time":{"start":1692256722939,"stop":1692256723072,"duration":133},"description":"新增用户组，用户组名称超长，新增失败，提示信息正确","descriptionHtml":"<p>新增用户组，用户组名称超长，新增失败，提示信息正确</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x0000014AE64BFEB0>\ncase = 'groupAdd_len_check'\ncasedata = {'description': '新增用户组，用户组名称超长，新增失败，提示信息正确', 'epic': '用户管理', 'feature': '基础数据管理', 'name': '新增用户组-长度校验', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:133: in excute_apicase\n    self.apicase_processors(api_casedata['postProcessors'], recv_data, recv_code)\ncommon\\runcase.py:154: in apicase_processors\n    checkresult.check_result(pro_data['assert'], recv_data, recv_code)\ncommon\\checkresult.py:33: in check_result\n    assert_db(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = [{'result': [{'path': '$.count', 'value': 0}], 'sql': \"select count(*) as count from `bms-general-uba`.t_group_info where groupName = '自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组' and isRemoved = '0'\", 'type': 'mysql'}]\n\n    def assert_db(hope_res):\n        \"\"\"\n        数据库校验\n        :param hope_res:\n        :return:\n        \"\"\"\n        if hope_res:\n            for dbcheck_data in hope_res:\n                db_type = dbcheck_data['type']  # 数据库类型\n                db_sql = dbcheck_data['sql']\n                if db_type == 'mysql':\n                    if db_sql[0:6].upper() == 'SELECT':\n                        sql_date = database.MysqlConn().mysql_query(db_sql)\n                        with allure.step(\"数据库校验校验\"):\n                            for param in dbcheck_data['result']:\n                                sql_value = jsonpath.jsonpath(sql_date, param['path'])\n                                value = param['value']\n                                try:\n                                    allure.attach(name=\"查询sql\", body=str(db_sql))\n                                    allure.attach(name=\"期望返回值\", body=str(value))\n                                    if sql_value:\n                                        allure.attach(name='实际返回值', body=str(sql_value[0]))\n>                                       assert str(value) == str(sql_value[0])\nE                                       AssertionError\n\ncommon\\checkresult.py:57: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_init","time":{"start":1692256615163,"stop":1692256615674,"duration":511},"status":"passed","steps":[{"name":"发送请求","time":{"start":1692256615281,"stop":1692256615668,"duration":387},"status":"passed","steps":[],"attachments":[{"uid":"a3ec843e2fa6c53","name":"请求方法：","source":"a3ec843e2fa6c53.attach","type":"text/plain","size":4},{"uid":"244290201384b139","name":"请求地址","source":"244290201384b139.attach","type":"text/plain","size":52},{"uid":"6f239833d85907a6","name":"请求头","source":"6f239833d85907a6.attach","type":"text/plain","size":109},{"uid":"23f280feaa8f44e2","name":"请求参数","source":"23f280feaa8f44e2.attach","type":"text/plain","size":225},{"uid":"7012531b4231eaf","name":"请求结果","source":"7012531b4231eaf.attach","type":"text/plain","size":2569}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1692256615668,"stop":1692256615672,"duration":4},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1692256615668,"stop":1692256615669,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"464fc8bf42bd5fc4","name":"期望状态码","source":"464fc8bf42bd5fc4.attach","type":"text/plain","size":3},{"uid":"63995bd1b9e97b3c","name":"实际状态码","source":"63995bd1b9e97b3c.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1692256615669,"stop":1692256615672,"duration":3},"status":"passed","steps":[],"attachments":[{"uid":"6c46006f7b911cae","name":"期望返回值","source":"6c46006f7b911cae.attach","type":"text/plain","size":66},{"uid":"7c6fcdcc11d54a91","name":"实际返回值","source":"7c6fcdcc11d54a91.attach","type":"text/plain","size":2569}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":9}],"testStage":{"description":"新增用户组，用户组名称超长，新增失败，提示信息正确","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x0000014AE64BFEB0>\ncase = 'groupAdd_len_check'\ncasedata = {'description': '新增用户组，用户组名称超长，新增失败，提示信息正确', 'epic': '用户管理', 'feature': '基础数据管理', 'name': '新增用户组-长度校验', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:133: in excute_apicase\n    self.apicase_processors(api_casedata['postProcessors'], recv_data, recv_code)\ncommon\\runcase.py:154: in apicase_processors\n    checkresult.check_result(pro_data['assert'], recv_data, recv_code)\ncommon\\checkresult.py:33: in check_result\n    assert_db(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = [{'result': [{'path': '$.count', 'value': 0}], 'sql': \"select count(*) as count from `bms-general-uba`.t_group_info where groupName = '自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组' and isRemoved = '0'\", 'type': 'mysql'}]\n\n    def assert_db(hope_res):\n        \"\"\"\n        数据库校验\n        :param hope_res:\n        :return:\n        \"\"\"\n        if hope_res:\n            for dbcheck_data in hope_res:\n                db_type = dbcheck_data['type']  # 数据库类型\n                db_sql = dbcheck_data['sql']\n                if db_type == 'mysql':\n                    if db_sql[0:6].upper() == 'SELECT':\n                        sql_date = database.MysqlConn().mysql_query(db_sql)\n                        with allure.step(\"数据库校验校验\"):\n                            for param in dbcheck_data['result']:\n                                sql_value = jsonpath.jsonpath(sql_date, param['path'])\n                                value = param['value']\n                                try:\n                                    allure.attach(name=\"查询sql\", body=str(db_sql))\n                                    allure.attach(name=\"期望返回值\", body=str(value))\n                                    if sql_value:\n                                        allure.attach(name='实际返回值', body=str(sql_value[0]))\n>                                       assert str(value) == str(sql_value[0])\nE                                       AssertionError\n\ncommon\\checkresult.py:57: AssertionError","steps":[{"name":"新增用户组-长度校验","time":{"start":1692256722978,"stop":1692256723072,"duration":94},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 59, in excute_case\n    self.excute_apicase(api, api_casedata)\n  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 133, in excute_apicase\n    self.apicase_processors(api_casedata['postProcessors'], recv_data, recv_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 154, in apicase_processors\n    checkresult.check_result(pro_data['assert'], recv_data, recv_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 33, in check_result\n    assert_db(value)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[{"name":"发送请求","time":{"start":1692256722980,"stop":1692256723065,"duration":85},"status":"passed","steps":[],"attachments":[{"uid":"4e42a7ea76594763","name":"请求方法：","source":"4e42a7ea76594763.attach","type":"text/plain","size":4},{"uid":"e43cd7728c50c81c","name":"请求地址","source":"e43cd7728c50c81c.attach","type":"text/plain","size":47},{"uid":"c6087e6fed5149f1","name":"请求头","source":"c6087e6fed5149f1.attach","type":"text/plain","size":464},{"uid":"6c329a66899653fa","name":"请求参数","source":"6c329a66899653fa.attach","type":"text/plain","size":207},{"uid":"a8702b351ac5ab47","name":"请求结果","source":"a8702b351ac5ab47.attach","type":"text/plain","size":230}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1692256723065,"stop":1692256723072,"duration":7},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 33, in check_result\n    assert_db(value)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[{"name":"状态码校验","time":{"start":1692256723065,"stop":1692256723066,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"63a55eadba537450","name":"期望状态码","source":"63a55eadba537450.attach","type":"text/plain","size":3},{"uid":"c93d6ec98520e661","name":"实际状态码","source":"c93d6ec98520e661.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"数据库校验校验","time":{"start":1692256723070,"stop":1692256723072,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[],"attachments":[{"uid":"139f321a6543e75a","name":"查询sql","source":"139f321a6543e75a.attach","type":"text/plain","size":269},{"uid":"e36bf0af48caf13f","name":"期望返回值","source":"e36bf0af48caf13f.attach","type":"text/plain","size":1},{"uid":"4ba1c7ce6218171","name":"实际返回值","source":"4ba1c7ce6218171.attach","type":"text/plain","size":1}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":3}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":5}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":10}],"attachments":[{"uid":"fd9454c2f8d2d3fe","name":"log","source":"fd9454c2f8d2d3fe.txt","type":"text/plain","size":9488}],"parameters":[],"stepsCount":5,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":11},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"基础数据管理"},{"name":"story","value":"用户与机构管理"},{"name":"parentSuite","value":"testcases"},{"name":"suite","value":"test_cases"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"18048-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_cases"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"a8b1b9190bf8477f.json","parameterValues":[]}