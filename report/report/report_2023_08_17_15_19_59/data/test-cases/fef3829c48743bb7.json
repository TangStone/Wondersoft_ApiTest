{"uid":"fef3829c48743bb7","name":"系统配置修改-参数不存在","fullName":"testcases.test_cases.TestUserSync#test_businesscases","historyId":"27f11ef736a6251d66124363209a7cf2","time":{"start":1692256691018,"stop":1692256691120,"duration":102},"description":"系统配置修改-参数不存在","descriptionHtml":"<p>系统配置修改-参数不存在</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x0000014AE645D250>\ncase = 'updateInfoByPropKey_PropKey_absent'\ncasedata = {'description': '系统配置修改-参数不存在', 'epic': '系统管理', 'feature': '参数管理', 'name': '系统配置修改-参数不存在', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:133: in excute_apicase\n    self.apicase_processors(api_casedata['postProcessors'], recv_data, recv_code)\ncommon\\runcase.py:154: in apicase_processors\n    checkresult.check_result(pro_data['assert'], recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': -1}, real_res = {'statusCode': 0}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_init","time":{"start":1692256615163,"stop":1692256615674,"duration":511},"status":"passed","steps":[{"name":"发送请求","time":{"start":1692256615281,"stop":1692256615668,"duration":387},"status":"passed","steps":[],"attachments":[{"uid":"a3ec843e2fa6c53","name":"请求方法：","source":"a3ec843e2fa6c53.attach","type":"text/plain","size":4},{"uid":"244290201384b139","name":"请求地址","source":"244290201384b139.attach","type":"text/plain","size":52},{"uid":"6f239833d85907a6","name":"请求头","source":"6f239833d85907a6.attach","type":"text/plain","size":109},{"uid":"23f280feaa8f44e2","name":"请求参数","source":"23f280feaa8f44e2.attach","type":"text/plain","size":225},{"uid":"7012531b4231eaf","name":"请求结果","source":"7012531b4231eaf.attach","type":"text/plain","size":2569}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1692256615668,"stop":1692256615672,"duration":4},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1692256615668,"stop":1692256615669,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"464fc8bf42bd5fc4","name":"期望状态码","source":"464fc8bf42bd5fc4.attach","type":"text/plain","size":3},{"uid":"63995bd1b9e97b3c","name":"实际状态码","source":"63995bd1b9e97b3c.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1692256615669,"stop":1692256615672,"duration":3},"status":"passed","steps":[],"attachments":[{"uid":"6c46006f7b911cae","name":"期望返回值","source":"6c46006f7b911cae.attach","type":"text/plain","size":66},{"uid":"7c6fcdcc11d54a91","name":"实际返回值","source":"7c6fcdcc11d54a91.attach","type":"text/plain","size":2569}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":9}],"testStage":{"description":"系统配置修改-参数不存在","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x0000014AE645D250>\ncase = 'updateInfoByPropKey_PropKey_absent'\ncasedata = {'description': '系统配置修改-参数不存在', 'epic': '系统管理', 'feature': '参数管理', 'name': '系统配置修改-参数不存在', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:133: in excute_apicase\n    self.apicase_processors(api_casedata['postProcessors'], recv_data, recv_code)\ncommon\\runcase.py:154: in apicase_processors\n    checkresult.check_result(pro_data['assert'], recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': -1}, real_res = {'statusCode': 0}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","steps":[{"name":"系统配置修改-参数不存在","time":{"start":1692256691025,"stop":1692256691120,"duration":95},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 59, in excute_case\n    self.excute_apicase(api, api_casedata)\n  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 133, in excute_apicase\n    self.apicase_processors(api_casedata['postProcessors'], recv_data, recv_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 154, in apicase_processors\n    checkresult.check_result(pro_data['assert'], recv_data, recv_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"发送请求","time":{"start":1692256691026,"stop":1692256691117,"duration":91},"status":"passed","steps":[],"attachments":[{"uid":"6b7e9d3008c94b21","name":"请求方法：","source":"6b7e9d3008c94b21.attach","type":"text/plain","size":4},{"uid":"de4219a5a01ec14c","name":"请求地址","source":"de4219a5a01ec14c.attach","type":"text/plain","size":70},{"uid":"86f14ecea707353e","name":"请求头","source":"86f14ecea707353e.attach","type":"text/plain","size":488},{"uid":"3e134f237743d152","name":"请求参数","source":"3e134f237743d152.attach","type":"text/plain","size":56},{"uid":"91bf9c11ef2ab230","name":"请求结果","source":"91bf9c11ef2ab230.attach","type":"text/plain","size":17}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1692256691117,"stop":1692256691119,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1692256691117,"stop":1692256691118,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"4b0e064521f5102d","name":"期望状态码","source":"4b0e064521f5102d.attach","type":"text/plain","size":3},{"uid":"149992e5c0c0de61","name":"实际状态码","source":"149992e5c0c0de61.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"返回值校验","time":{"start":1692256691118,"stop":1692256691119,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"244538b863dfe890","name":"期望返回值","source":"244538b863dfe890.attach","type":"text/plain","size":18},{"uid":"d203b8e007d274d","name":"实际返回值","source":"d203b8e007d274d.attach","type":"text/plain","size":17}],"parameters":[],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":9}],"attachments":[{"uid":"163c1c58b0a8052c","name":"log","source":"163c1c58b0a8052c.txt","type":"text/plain","size":2511}],"parameters":[],"stepsCount":5,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":10},"afterStages":[],"labels":[{"name":"epic","value":"系统管理"},{"name":"feature","value":"参数管理"},{"name":"story","value":"系统参数管理"},{"name":"parentSuite","value":"testcases"},{"name":"suite","value":"test_cases"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"18048-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_cases"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"fef3829c48743bb7.json","parameterValues":[]}