{"uid":"719a7ff2696b95bc","name":"新增用户组-特殊字符校验","fullName":"testcases.test_cases.TestUserSync#test_businesscases","historyId":"456b341a62764b4afc36ef12994b7bd6","time":{"start":1692006465247,"stop":1692006465368,"duration":121},"description":"新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确","descriptionHtml":"<p>新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x000001E30559F7C0>\ncase = 'groupAdd_Spechar_check'\ncasedata = {'description': '新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确', 'epic': '用户管理', 'feature': '基础数据管理', 'name': '新增用户组-特殊字符校验', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:133: in excute_apicase\n    self.apicase_processors(api_casedata['postProcessors'], recv_data, recv_code)\ncommon\\runcase.py:153: in apicase_processors\n    checkresult.check_result(pro_data['assert'], recv_data, recv_code)\ncommon\\checkresult.py:33: in check_result\n    assert_db(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = [{'result': [{'path': '$.count', 'value': 0}], 'sql': \"select count(*) as count from `bms-general-uba`.t_group_info where groupName = '自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组' and isRemoved = '0'\", 'type': 'mysql'}]\n\n    def assert_db(hope_res):\n        \"\"\"\n        数据库校验\n        :param hope_res:\n        :return:\n        \"\"\"\n        if hope_res:\n            for dbcheck_data in hope_res:\n                db_type = dbcheck_data['type']  # 数据库类型\n                db_sql = dbcheck_data['sql']\n                if db_type == 'mysql':\n                    if db_sql[0:6].upper() == 'SELECT':\n                        sql_date = database.MysqlConn().mysql_query(db_sql)\n                        with allure.step(\"数据库校验校验\"):\n                            for param in dbcheck_data['result']:\n                                sql_value = jsonpath.jsonpath(sql_date, param['path'])\n                                value = param['value']\n                                try:\n                                    allure.attach(name=\"查询sql\", body=str(db_sql))\n                                    allure.attach(name=\"期望返回值\", body=str(value))\n                                    if sql_value:\n                                        allure.attach(name='实际返回值', body=str(sql_value[0]))\n>                                       assert str(value) == str(sql_value[0])\nE                                       AssertionError\n\ncommon\\checkresult.py:57: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[{"name":"login_init","time":{"start":1692006343018,"stop":1692006343128,"duration":110},"status":"passed","steps":[{"name":"发送请求","time":{"start":1692006343045,"stop":1692006343121,"duration":76},"status":"passed","steps":[],"attachments":[{"uid":"5b7e58e1602d3938","name":"请求方法：","source":"5b7e58e1602d3938.attach","type":"text/plain","size":4},{"uid":"d681b9f149096301","name":"请求地址","source":"d681b9f149096301.attach","type":"text/plain","size":52},{"uid":"91f7749b11aa354d","name":"请求头","source":"91f7749b11aa354d.attach","type":"text/plain","size":109},{"uid":"9fea7040c4a5140f","name":"请求参数","source":"9fea7040c4a5140f.attach","type":"text/plain","size":225},{"uid":"c7239e209c39283","name":"请求结果","source":"c7239e209c39283.attach","type":"text/plain","size":2593}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1692006343121,"stop":1692006343126,"duration":5},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1692006343121,"stop":1692006343122,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"3ae1b21161076da","name":"期望状态码","source":"3ae1b21161076da.attach","type":"text/plain","size":3},{"uid":"852b14422592ea44","name":"实际状态码","source":"852b14422592ea44.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1692006343122,"stop":1692006343126,"duration":4},"status":"passed","steps":[],"attachments":[{"uid":"4931028765ced41d","name":"期望返回值","source":"4931028765ced41d.attach","type":"text/plain","size":66},{"uid":"defa0d6ac4e70c72","name":"实际返回值","source":"defa0d6ac4e70c72.attach","type":"text/plain","size":2593}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"attachmentsCount":9,"shouldDisplayMessage":false}],"testStage":{"description":"新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x000001E30559F7C0>\ncase = 'groupAdd_Spechar_check'\ncasedata = {'description': '新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确', 'epic': '用户管理', 'feature': '基础数据管理', 'name': '新增用户组-特殊字符校验', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:133: in excute_apicase\n    self.apicase_processors(api_casedata['postProcessors'], recv_data, recv_code)\ncommon\\runcase.py:153: in apicase_processors\n    checkresult.check_result(pro_data['assert'], recv_data, recv_code)\ncommon\\checkresult.py:33: in check_result\n    assert_db(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = [{'result': [{'path': '$.count', 'value': 0}], 'sql': \"select count(*) as count from `bms-general-uba`.t_group_info where groupName = '自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组' and isRemoved = '0'\", 'type': 'mysql'}]\n\n    def assert_db(hope_res):\n        \"\"\"\n        数据库校验\n        :param hope_res:\n        :return:\n        \"\"\"\n        if hope_res:\n            for dbcheck_data in hope_res:\n                db_type = dbcheck_data['type']  # 数据库类型\n                db_sql = dbcheck_data['sql']\n                if db_type == 'mysql':\n                    if db_sql[0:6].upper() == 'SELECT':\n                        sql_date = database.MysqlConn().mysql_query(db_sql)\n                        with allure.step(\"数据库校验校验\"):\n                            for param in dbcheck_data['result']:\n                                sql_value = jsonpath.jsonpath(sql_date, param['path'])\n                                value = param['value']\n                                try:\n                                    allure.attach(name=\"查询sql\", body=str(db_sql))\n                                    allure.attach(name=\"期望返回值\", body=str(value))\n                                    if sql_value:\n                                        allure.attach(name='实际返回值', body=str(sql_value[0]))\n>                                       assert str(value) == str(sql_value[0])\nE                                       AssertionError\n\ncommon\\checkresult.py:57: AssertionError","steps":[{"name":"新增用户组-长度校验","time":{"start":1692006465268,"stop":1692006465368,"duration":100},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 59, in excute_case\n    self.excute_apicase(api, api_casedata)\n  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 133, in excute_apicase\n    self.apicase_processors(api_casedata['postProcessors'], recv_data, recv_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 153, in apicase_processors\n    checkresult.check_result(pro_data['assert'], recv_data, recv_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 33, in check_result\n    assert_db(value)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[{"name":"发送请求","time":{"start":1692006465270,"stop":1692006465360,"duration":90},"status":"passed","steps":[],"attachments":[{"uid":"3a781d117de90a5a","name":"请求方法：","source":"3a781d117de90a5a.attach","type":"text/plain","size":4},{"uid":"702ddcc0c5b6683","name":"请求地址","source":"702ddcc0c5b6683.attach","type":"text/plain","size":47},{"uid":"a1099003cc074815","name":"请求头","source":"a1099003cc074815.attach","type":"text/plain","size":464},{"uid":"949e17223e889553","name":"请求参数","source":"949e17223e889553.attach","type":"text/plain","size":207},{"uid":"898d46de0b9851f0","name":"请求结果","source":"898d46de0b9851f0.attach","type":"text/plain","size":230}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1692006465360,"stop":1692006465368,"duration":8},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 33, in check_result\n    assert_db(value)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[{"name":"状态码校验","time":{"start":1692006465360,"stop":1692006465361,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"8e8ad0774047b6e","name":"期望状态码","source":"8e8ad0774047b6e.attach","type":"text/plain","size":3},{"uid":"c701a486912b27d2","name":"实际状态码","source":"c701a486912b27d2.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"数据库校验校验","time":{"start":1692006465366,"stop":1692006465368,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[],"attachments":[{"uid":"540659569562d03c","name":"查询sql","source":"540659569562d03c.attach","type":"text/plain","size":269},{"uid":"34aaaa2ce3c9cb56","name":"期望返回值","source":"34aaaa2ce3c9cb56.attach","type":"text/plain","size":1},{"uid":"3869cc086208b369","name":"实际返回值","source":"3869cc086208b369.attach","type":"text/plain","size":1}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":3,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"attachmentsCount":10,"shouldDisplayMessage":false}],"attachments":[{"uid":"e6e22594e8a8a63c","name":"log","source":"e6e22594e8a8a63c.txt","type":"text/plain","size":12951}],"parameters":[],"stepsCount":5,"hasContent":true,"attachmentsCount":11,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"基础数据管理"},{"name":"story","value":"用户与机构管理"},{"name":"parentSuite","value":"testcases"},{"name":"suite","value":"test_cases"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"10488-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_cases"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"eb050b2ed8f7be8f","status":"failed","statusDetails":"AssertionError","time":{"start":1692006460094,"stop":1692006460201,"duration":107}},{"uid":"68673dd6b4328558","status":"failed","statusDetails":"AssertionError","time":{"start":1692006454938,"stop":1692006455055,"duration":117}},{"uid":"5ce07e600e6b1840","status":"failed","statusDetails":"AssertionError","time":{"start":1692006449818,"stop":1692006449897,"duration":79}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"719a7ff2696b95bc.json","parameterValues":[]}