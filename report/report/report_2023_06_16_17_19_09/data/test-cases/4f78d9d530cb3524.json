{"uid":"4f78d9d530cb3524","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1686907143946,"stop":1686907144086,"duration":140},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x0000017C97CA6CD0>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': 'https://192.168.148.174:31000', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:52: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        if isinstance(hope_res, dict) and isinstance(real_res, dict):\n            try:\n                with allure.step(\"返回值校验\"):\n                    allure.attach(name=\"期望返回值\", body=str(hope_res))\n                    allure.attach(name='实际返回值', body=str(real_res))\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x0000017C97CA6CD0>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': 'https://192.168.148.174:31000', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:52: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        if isinstance(hope_res, dict) and isinstance(real_res, dict):\n            try:\n                with allure.step(\"返回值校验\"):\n                    allure.attach(name=\"期望返回值\", body=str(hope_res))\n                    allure.attach(name='实际返回值', body=str(real_res))\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1686907143946,"stop":1686907144018,"duration":72},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1686907143955,"stop":1686907144015,"duration":60},"status":"passed","steps":[],"attachments":[{"uid":"15cc7ad32adcf924","name":"请求方法：","source":"15cc7ad32adcf924.attach","type":"text/plain","size":3},{"uid":"1fdc2a05651eecd6","name":"请求地址","source":"1fdc2a05651eecd6.attach","type":"text/plain","size":51},{"uid":"b7643c196151dfbc","name":"请求头","source":"b7643c196151dfbc.attach","type":"text/plain","size":467},{"uid":"7c6cb161f0e1b1eb","name":"请求参数","source":"7c6cb161f0e1b1eb.attach","type":"text/plain","size":30},{"uid":"84f5da9c7962592f","name":"请求结果","source":"84f5da9c7962592f.attach","type":"text/plain","size":785}],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true},{"name":"结果校验","time":{"start":1686907144015,"stop":1686907144017,"duration":2},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1686907144015,"stop":1686907144016,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"10a3e56e025ab034","name":"期望状态码","source":"10a3e56e025ab034.attach","type":"text/plain","size":3},{"uid":"b4329553229a5315","name":"实际状态码","source":"b4329553229a5315.attach","type":"text/plain","size":3}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true},{"name":"返回值校验","time":{"start":1686907144016,"stop":1686907144017,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"2e8a765d1de1964e","name":"期望返回值","source":"2e8a765d1de1964e.attach","type":"text/plain","size":35},{"uid":"2a79b38d9c3516fc","name":"实际返回值","source":"2a79b38d9c3516fc.attach","type":"text/plain","size":785}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"attachmentsCount":4,"shouldDisplayMessage":false,"stepsCount":2,"hasContent":true}],"attachments":[],"parameters":[],"attachmentsCount":9,"shouldDisplayMessage":false,"stepsCount":4,"hasContent":true},{"name":"执行当前接口：获取同步根组id","time":{"start":1686907144022,"stop":1686907144084,"duration":62},"status":"passed","steps":[],"attachments":[{"uid":"c0b868ef9a785a8f","name":"请求方法：","source":"c0b868ef9a785a8f.attach","type":"text/plain","size":3},{"uid":"518f21af1e97b4fa","name":"请求地址","source":"518f21af1e97b4fa.attach","type":"text/plain","size":64},{"uid":"8fc342fcf6b7bab0","name":"请求头","source":"8fc342fcf6b7bab0.attach","type":"text/plain","size":467},{"uid":"5a331194387f70ec","name":"请求参数","source":"5a331194387f70ec.attach","type":"text/plain","size":33},{"uid":"6b2607f3627eb0e8","name":"请求结果","source":"6b2607f3627eb0e8.attach","type":"text/plain","size":64}],"parameters":[],"attachmentsCount":5,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true},{"name":"结果校验","time":{"start":1686907144084,"stop":1686907144086,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1686907144084,"stop":1686907144085,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"f6e976e32f0ab194","name":"期望状态码","source":"f6e976e32f0ab194.attach","type":"text/plain","size":3},{"uid":"31cb704882b0c1e9","name":"实际状态码","source":"31cb704882b0c1e9.attach","type":"text/plain","size":3}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":true},{"name":"返回值校验","time":{"start":1686907144085,"stop":1686907144085,"duration":0},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"9852219cdb865808","name":"期望返回值","source":"9852219cdb865808.attach","type":"text/plain","size":35},{"uid":"bdc3f3e8f2234691","name":"实际返回值","source":"bdc3f3e8f2234691.attach","type":"text/plain","size":64}],"parameters":[],"attachmentsCount":2,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"attachmentsCount":4,"shouldDisplayMessage":false,"stepsCount":2,"hasContent":true}],"attachments":[{"uid":"25459268c7016060","name":"log","source":"25459268c7016060.txt","type":"text/plain","size":7065}],"parameters":[],"attachmentsCount":19,"shouldDisplayMessage":true,"stepsCount":9,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"8040-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"4f78d9d530cb3524.json","parameterValues":[]}