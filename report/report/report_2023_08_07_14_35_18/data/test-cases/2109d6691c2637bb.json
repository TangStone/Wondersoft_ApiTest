{"uid":"2109d6691c2637bb","name":"新增用户组-特殊字符校验","fullName":"testcases.test_cases.TestUserSync#test_businesscases","historyId":"456b341a62764b4afc36ef12994b7bd6","time":{"start":1691389929370,"stop":1691389929577,"duration":207},"description":"新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确","descriptionHtml":"<p>新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x000001D680B5F7C0>\ncase = 'groupAdd_Spechar_check'\ncasedata = {'description': '新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确', 'epic': '用户管理', 'feature': '基础数据管理', 'name': '新增用户组-特殊字符校验', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:90: in excute_apicase\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:33: in check_result\n    assert_db(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = [{'result': [{'path': '$.count', 'value': 0}], 'sql': \"select count(*) as count from `bms-general-uba`.t_group_info where groupName = '自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组' and isRemoved = '0'\", 'type': 'mysql'}]\n\n    def assert_db(hope_res):\n        \"\"\"\n        数据库校验\n        :param hope_res:\n        :return:\n        \"\"\"\n        if hope_res:\n            for dbcheck_data in hope_res:\n                db_type = dbcheck_data['type']  # 数据库类型\n                db_sql = dbcheck_data['sql']\n                if db_type == 'mysql':\n                    if db_sql[0:6].upper() == 'SELECT':\n                        sql_date = database.MysqlConn().mysql_query(db_sql)\n                        with allure.step(\"数据库校验校验\"):\n                            for param in dbcheck_data['result']:\n                                sql_value = jsonpath.jsonpath(sql_date, param['path'])\n                                value = param['value']\n                                try:\n                                    allure.attach(name=\"查询sql\", body=str(db_sql))\n                                    allure.attach(name=\"期望返回值\", body=str(value))\n                                    if sql_value:\n                                        allure.attach(name='实际返回值', body=str(sql_value[0]))\n>                                       assert str(value) == str(sql_value[0])\nE                                       AssertionError\n\ncommon\\checkresult.py:57: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_init","time":{"start":1691389804807,"stop":1691389804943,"duration":136},"status":"passed","steps":[{"name":"发送请求","time":{"start":1691389804834,"stop":1691389804936,"duration":102},"status":"passed","steps":[],"attachments":[{"uid":"68370ddef11f0923","name":"请求方法：","source":"68370ddef11f0923.attach","type":"text/plain","size":4},{"uid":"d20cd1cfdb26a39f","name":"请求地址","source":"d20cd1cfdb26a39f.attach","type":"text/plain","size":52},{"uid":"5f8f4338f5924a40","name":"请求头","source":"5f8f4338f5924a40.attach","type":"text/plain","size":109},{"uid":"4a0da79f657e7165","name":"请求参数","source":"4a0da79f657e7165.attach","type":"text/plain","size":225},{"uid":"a6af9e703b765d24","name":"请求结果","source":"a6af9e703b765d24.attach","type":"text/plain","size":2569}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1691389804936,"stop":1691389804941,"duration":5},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1691389804936,"stop":1691389804938,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"a680b2fd85e12011","name":"期望状态码","source":"a680b2fd85e12011.attach","type":"text/plain","size":3},{"uid":"aca4211ae53d64b7","name":"实际状态码","source":"aca4211ae53d64b7.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1691389804938,"stop":1691389804941,"duration":3},"status":"passed","steps":[],"attachments":[{"uid":"c1b73c19e5b5e462","name":"期望返回值","source":"c1b73c19e5b5e462.attach","type":"text/plain","size":66},{"uid":"c3972d14f41e8fac","name":"实际返回值","source":"c3972d14f41e8fac.attach","type":"text/plain","size":2569}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"attachmentsCount":9,"shouldDisplayMessage":false}],"testStage":{"description":"新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x000001D680B5F7C0>\ncase = 'groupAdd_Spechar_check'\ncasedata = {'description': '新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确', 'epic': '用户管理', 'feature': '基础数据管理', 'name': '新增用户组-特殊字符校验', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:90: in excute_apicase\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:33: in check_result\n    assert_db(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = [{'result': [{'path': '$.count', 'value': 0}], 'sql': \"select count(*) as count from `bms-general-uba`.t_group_info where groupName = '自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组' and isRemoved = '0'\", 'type': 'mysql'}]\n\n    def assert_db(hope_res):\n        \"\"\"\n        数据库校验\n        :param hope_res:\n        :return:\n        \"\"\"\n        if hope_res:\n            for dbcheck_data in hope_res:\n                db_type = dbcheck_data['type']  # 数据库类型\n                db_sql = dbcheck_data['sql']\n                if db_type == 'mysql':\n                    if db_sql[0:6].upper() == 'SELECT':\n                        sql_date = database.MysqlConn().mysql_query(db_sql)\n                        with allure.step(\"数据库校验校验\"):\n                            for param in dbcheck_data['result']:\n                                sql_value = jsonpath.jsonpath(sql_date, param['path'])\n                                value = param['value']\n                                try:\n                                    allure.attach(name=\"查询sql\", body=str(db_sql))\n                                    allure.attach(name=\"期望返回值\", body=str(value))\n                                    if sql_value:\n                                        allure.attach(name='实际返回值', body=str(sql_value[0]))\n>                                       assert str(value) == str(sql_value[0])\nE                                       AssertionError\n\ncommon\\checkresult.py:57: AssertionError","steps":[{"name":"新增用户组-长度校验","time":{"start":1691389929422,"stop":1691389929577,"duration":155},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 59, in excute_case\n    self.excute_apicase(api, api_casedata)\n  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 90, in excute_apicase\n    checkresult.check_result(hope_result, recv_data, recv_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 33, in check_result\n    assert_db(value)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[{"name":"发送请求","time":{"start":1691389929426,"stop":1691389929565,"duration":139},"status":"passed","steps":[],"attachments":[{"uid":"15fbb52011228661","name":"请求方法：","source":"15fbb52011228661.attach","type":"text/plain","size":4},{"uid":"c10b02d4321c83af","name":"请求地址","source":"c10b02d4321c83af.attach","type":"text/plain","size":47},{"uid":"f7c74d74a63cdbee","name":"请求头","source":"f7c74d74a63cdbee.attach","type":"text/plain","size":464},{"uid":"3ed6505c703d6bc5","name":"请求参数","source":"3ed6505c703d6bc5.attach","type":"text/plain","size":207},{"uid":"be163bcc9caf21e1","name":"请求结果","source":"be163bcc9caf21e1.attach","type":"text/plain","size":230}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1691389929565,"stop":1691389929577,"duration":12},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 33, in check_result\n    assert_db(value)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[{"name":"状态码校验","time":{"start":1691389929566,"stop":1691389929567,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"eec3e515d1129207","name":"期望状态码","source":"eec3e515d1129207.attach","type":"text/plain","size":3},{"uid":"144f7992b7d54ad4","name":"实际状态码","source":"144f7992b7d54ad4.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"数据库校验校验","time":{"start":1691389929573,"stop":1691389929576,"duration":3},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[],"attachments":[{"uid":"59cc5a3a1939f6d4","name":"查询sql","source":"59cc5a3a1939f6d4.attach","type":"text/plain","size":269},{"uid":"9ede8e11c46e0a96","name":"期望返回值","source":"9ede8e11c46e0a96.attach","type":"text/plain","size":1},{"uid":"daa194ddf36ac777","name":"实际返回值","source":"daa194ddf36ac777.attach","type":"text/plain","size":1}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":5,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"attachmentsCount":10,"shouldDisplayMessage":false}],"attachments":[{"uid":"16aa8febc104adf","name":"log","source":"16aa8febc104adf.txt","type":"text/plain","size":9707}],"parameters":[],"hasContent":true,"stepsCount":5,"attachmentsCount":11,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"基础数据管理"},{"name":"story","value":"用户与机构管理"},{"name":"parentSuite","value":"testcases"},{"name":"suite","value":"test_cases"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"20992-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_cases"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"2109d6691c2637bb.json","parameterValues":[]}