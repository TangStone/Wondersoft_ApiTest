{"uid":"f80fca38935cd7d9","name":"系统配置修改-参数不存在","fullName":"testcases.test_cases.TestUserSync#test_businesscases","historyId":"27f11ef736a6251d66124363209a7cf2","time":{"start":1691389890877,"stop":1691389891017,"duration":140},"description":"系统配置修改-参数不存在","descriptionHtml":"<p>系统配置修改-参数不存在</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x000001D680AFD670>\ncase = 'updateInfoByPropKey_PropKey_absent'\ncasedata = {'description': '系统配置修改-参数不存在', 'epic': '系统管理', 'feature': '参数管理', 'name': '系统配置修改-参数不存在', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:90: in excute_apicase\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': -1}, real_res = {'statusCode': 0}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_init","time":{"start":1691389804807,"stop":1691389804943,"duration":136},"status":"passed","steps":[{"name":"发送请求","time":{"start":1691389804834,"stop":1691389804936,"duration":102},"status":"passed","steps":[],"attachments":[{"uid":"68370ddef11f0923","name":"请求方法：","source":"68370ddef11f0923.attach","type":"text/plain","size":4},{"uid":"d20cd1cfdb26a39f","name":"请求地址","source":"d20cd1cfdb26a39f.attach","type":"text/plain","size":52},{"uid":"5f8f4338f5924a40","name":"请求头","source":"5f8f4338f5924a40.attach","type":"text/plain","size":109},{"uid":"4a0da79f657e7165","name":"请求参数","source":"4a0da79f657e7165.attach","type":"text/plain","size":225},{"uid":"a6af9e703b765d24","name":"请求结果","source":"a6af9e703b765d24.attach","type":"text/plain","size":2569}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1691389804936,"stop":1691389804941,"duration":5},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1691389804936,"stop":1691389804938,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"a680b2fd85e12011","name":"期望状态码","source":"a680b2fd85e12011.attach","type":"text/plain","size":3},{"uid":"aca4211ae53d64b7","name":"实际状态码","source":"aca4211ae53d64b7.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1691389804938,"stop":1691389804941,"duration":3},"status":"passed","steps":[],"attachments":[{"uid":"c1b73c19e5b5e462","name":"期望返回值","source":"c1b73c19e5b5e462.attach","type":"text/plain","size":66},{"uid":"c3972d14f41e8fac","name":"实际返回值","source":"c3972d14f41e8fac.attach","type":"text/plain","size":2569}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"attachmentsCount":9,"shouldDisplayMessage":false}],"testStage":{"description":"系统配置修改-参数不存在","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x000001D680AFD670>\ncase = 'updateInfoByPropKey_PropKey_absent'\ncasedata = {'description': '系统配置修改-参数不存在', 'epic': '系统管理', 'feature': '参数管理', 'name': '系统配置修改-参数不存在', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:90: in excute_apicase\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': -1}, real_res = {'statusCode': 0}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","steps":[{"name":"系统配置修改-参数不存在","time":{"start":1691389890894,"stop":1691389891017,"duration":123},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 59, in excute_case\n    self.excute_apicase(api, api_casedata)\n  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 90, in excute_apicase\n    checkresult.check_result(hope_result, recv_data, recv_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"发送请求","time":{"start":1691389890897,"stop":1691389891014,"duration":117},"status":"passed","steps":[],"attachments":[{"uid":"a2df9566d3cb3cb5","name":"请求方法：","source":"a2df9566d3cb3cb5.attach","type":"text/plain","size":4},{"uid":"822ab8db892d0c16","name":"请求地址","source":"822ab8db892d0c16.attach","type":"text/plain","size":70},{"uid":"4629ad09f1f2c63f","name":"请求头","source":"4629ad09f1f2c63f.attach","type":"text/plain","size":488},{"uid":"55af7f60b3f2fb97","name":"请求参数","source":"55af7f60b3f2fb97.attach","type":"text/plain","size":56},{"uid":"e3f5c26d52d07550","name":"请求结果","source":"e3f5c26d52d07550.attach","type":"text/plain","size":17}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1691389891014,"stop":1691389891016,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1691389891014,"stop":1691389891015,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"3dcf7e7b81426f39","name":"期望状态码","source":"3dcf7e7b81426f39.attach","type":"text/plain","size":3},{"uid":"71feca7a27d8847c","name":"实际状态码","source":"71feca7a27d8847c.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1691389891015,"stop":1691389891016,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"bd410ea072f4a28a","name":"期望返回值","source":"bd410ea072f4a28a.attach","type":"text/plain","size":18},{"uid":"ec479c8492e5620b","name":"实际返回值","source":"ec479c8492e5620b.attach","type":"text/plain","size":17}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"attachmentsCount":9,"shouldDisplayMessage":false}],"attachments":[{"uid":"f3909bb02565ef6","name":"log","source":"f3909bb02565ef6.txt","type":"text/plain","size":7529}],"parameters":[],"hasContent":true,"stepsCount":5,"attachmentsCount":10,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"系统管理"},{"name":"feature","value":"参数管理"},{"name":"story","value":"系统参数管理"},{"name":"parentSuite","value":"testcases"},{"name":"suite","value":"test_cases"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"20992-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_cases"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"f80fca38935cd7d9.json","parameterValues":[]}