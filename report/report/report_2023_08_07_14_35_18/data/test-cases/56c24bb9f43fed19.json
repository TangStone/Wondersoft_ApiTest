{"uid":"56c24bb9f43fed19","name":"系统配置修改-参数不存在","fullName":"testcases.test_cases.TestUserSync#test_businesscases","historyId":"27f11ef736a6251d66124363209a7cf2","time":{"start":1691389885660,"stop":1691389885806,"duration":146},"description":"系统配置修改-参数不存在","descriptionHtml":"<p>系统配置修改-参数不存在</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x000001D680AFD670>\ncase = 'updateInfoByPropKey_PropKey_absent'\ncasedata = {'description': '系统配置修改-参数不存在', 'epic': '系统管理', 'feature': '参数管理', 'name': '系统配置修改-参数不存在', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:90: in excute_apicase\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': -1}, real_res = {'statusCode': 0}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_init","time":{"start":1691389804807,"stop":1691389804943,"duration":136},"status":"passed","steps":[{"name":"发送请求","time":{"start":1691389804834,"stop":1691389804936,"duration":102},"status":"passed","steps":[],"attachments":[{"uid":"68370ddef11f0923","name":"请求方法：","source":"68370ddef11f0923.attach","type":"text/plain","size":4},{"uid":"d20cd1cfdb26a39f","name":"请求地址","source":"d20cd1cfdb26a39f.attach","type":"text/plain","size":52},{"uid":"5f8f4338f5924a40","name":"请求头","source":"5f8f4338f5924a40.attach","type":"text/plain","size":109},{"uid":"4a0da79f657e7165","name":"请求参数","source":"4a0da79f657e7165.attach","type":"text/plain","size":225},{"uid":"a6af9e703b765d24","name":"请求结果","source":"a6af9e703b765d24.attach","type":"text/plain","size":2569}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1691389804936,"stop":1691389804941,"duration":5},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1691389804936,"stop":1691389804938,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"a680b2fd85e12011","name":"期望状态码","source":"a680b2fd85e12011.attach","type":"text/plain","size":3},{"uid":"aca4211ae53d64b7","name":"实际状态码","source":"aca4211ae53d64b7.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1691389804938,"stop":1691389804941,"duration":3},"status":"passed","steps":[],"attachments":[{"uid":"c1b73c19e5b5e462","name":"期望返回值","source":"c1b73c19e5b5e462.attach","type":"text/plain","size":66},{"uid":"c3972d14f41e8fac","name":"实际返回值","source":"c3972d14f41e8fac.attach","type":"text/plain","size":2569}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"attachmentsCount":9,"shouldDisplayMessage":false}],"testStage":{"description":"系统配置修改-参数不存在","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x000001D680AFD670>\ncase = 'updateInfoByPropKey_PropKey_absent'\ncasedata = {'description': '系统配置修改-参数不存在', 'epic': '系统管理', 'feature': '参数管理', 'name': '系统配置修改-参数不存在', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:90: in excute_apicase\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': -1}, real_res = {'statusCode': 0}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","steps":[{"name":"系统配置修改-参数不存在","time":{"start":1691389885685,"stop":1691389885805,"duration":120},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 59, in excute_case\n    self.excute_apicase(api, api_casedata)\n  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 90, in excute_apicase\n    checkresult.check_result(hope_result, recv_data, recv_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"发送请求","time":{"start":1691389885688,"stop":1691389885797,"duration":109},"status":"passed","steps":[],"attachments":[{"uid":"3df9b5613d4fcdd2","name":"请求方法：","source":"3df9b5613d4fcdd2.attach","type":"text/plain","size":4},{"uid":"22cbe0ffa42350ce","name":"请求地址","source":"22cbe0ffa42350ce.attach","type":"text/plain","size":70},{"uid":"b62251b7fdab7037","name":"请求头","source":"b62251b7fdab7037.attach","type":"text/plain","size":488},{"uid":"a745598b9b2e1929","name":"请求参数","source":"a745598b9b2e1929.attach","type":"text/plain","size":56},{"uid":"a0bf9959881f068b","name":"请求结果","source":"a0bf9959881f068b.attach","type":"text/plain","size":17}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1691389885797,"stop":1691389885804,"duration":7},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1691389885797,"stop":1691389885800,"duration":3},"status":"passed","steps":[],"attachments":[{"uid":"f2e9cec72111e606","name":"期望状态码","source":"f2e9cec72111e606.attach","type":"text/plain","size":3},{"uid":"8b49cf1b3c367adf","name":"实际状态码","source":"8b49cf1b3c367adf.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1691389885800,"stop":1691389885803,"duration":3},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"50b780dbff107c7c","name":"期望返回值","source":"50b780dbff107c7c.attach","type":"text/plain","size":18},{"uid":"71a6d973319541fb","name":"实际返回值","source":"71a6d973319541fb.attach","type":"text/plain","size":17}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"attachmentsCount":9,"shouldDisplayMessage":false}],"attachments":[{"uid":"77ff94edd8ea69","name":"log","source":"77ff94edd8ea69.txt","type":"text/plain","size":5019}],"parameters":[],"hasContent":true,"stepsCount":5,"attachmentsCount":10,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"系统管理"},{"name":"feature","value":"参数管理"},{"name":"story","value":"系统参数管理"},{"name":"parentSuite","value":"testcases"},{"name":"suite","value":"test_cases"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"20992-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_cases"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"56c24bb9f43fed19.json","parameterValues":[]}