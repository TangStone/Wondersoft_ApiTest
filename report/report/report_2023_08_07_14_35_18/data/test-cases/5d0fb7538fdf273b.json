{"uid":"5d0fb7538fdf273b","name":"测试数据源配置","fullName":"testcases.test_cases.TestUserSync#test_businesscases","historyId":"f25bd64294e77074dd8fcf15a47c34e2","time":{"start":1691389950975,"stop":1691390081381,"duration":130406},"description":"测试数据源配置","descriptionHtml":"<p>测试数据源配置</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x000001D680B3D190>\ncase = 'config_test'\ncasedata = {'description': '测试数据源配置', 'epic': '用户管理', 'feature': '用户同步管理', 'name': '测试数据源配置', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:90: in excute_apicase\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '无法连接,地址或端口不正确！', 'statusCode': 1114404}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_init","time":{"start":1691389804807,"stop":1691389804943,"duration":136},"status":"passed","steps":[{"name":"发送请求","time":{"start":1691389804834,"stop":1691389804936,"duration":102},"status":"passed","steps":[],"attachments":[{"uid":"68370ddef11f0923","name":"请求方法：","source":"68370ddef11f0923.attach","type":"text/plain","size":4},{"uid":"d20cd1cfdb26a39f","name":"请求地址","source":"d20cd1cfdb26a39f.attach","type":"text/plain","size":52},{"uid":"5f8f4338f5924a40","name":"请求头","source":"5f8f4338f5924a40.attach","type":"text/plain","size":109},{"uid":"4a0da79f657e7165","name":"请求参数","source":"4a0da79f657e7165.attach","type":"text/plain","size":225},{"uid":"a6af9e703b765d24","name":"请求结果","source":"a6af9e703b765d24.attach","type":"text/plain","size":2569}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1691389804936,"stop":1691389804941,"duration":5},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1691389804936,"stop":1691389804938,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"a680b2fd85e12011","name":"期望状态码","source":"a680b2fd85e12011.attach","type":"text/plain","size":3},{"uid":"aca4211ae53d64b7","name":"实际状态码","source":"aca4211ae53d64b7.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1691389804938,"stop":1691389804941,"duration":3},"status":"passed","steps":[],"attachments":[{"uid":"c1b73c19e5b5e462","name":"期望返回值","source":"c1b73c19e5b5e462.attach","type":"text/plain","size":66},{"uid":"c3972d14f41e8fac","name":"实际返回值","source":"c3972d14f41e8fac.attach","type":"text/plain","size":2569}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"attachmentsCount":9,"shouldDisplayMessage":false}],"testStage":{"description":"测试数据源配置","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x000001D680B3D190>\ncase = 'config_test'\ncasedata = {'description': '测试数据源配置', 'epic': '用户管理', 'feature': '用户同步管理', 'name': '测试数据源配置', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:90: in excute_apicase\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '无法连接,地址或端口不正确！', 'statusCode': 1114404}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","steps":[{"name":"测试LADP数据源配置成功","time":{"start":1691389950986,"stop":1691390081381,"duration":130395},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 59, in excute_case\n    self.excute_apicase(api, api_casedata)\n  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 90, in excute_apicase\n    checkresult.check_result(hope_result, recv_data, recv_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"发送请求","time":{"start":1691389950987,"stop":1691390081364,"duration":130377},"status":"passed","steps":[],"attachments":[{"uid":"6766a0dbbeea586b","name":"请求方法：","source":"6766a0dbbeea586b.attach","type":"text/plain","size":4},{"uid":"ffc5132219d34e3b","name":"请求地址","source":"ffc5132219d34e3b.attach","type":"text/plain","size":57},{"uid":"541c951b4bdaa697","name":"请求头","source":"541c951b4bdaa697.attach","type":"text/plain","size":467},{"uid":"26c9feff7ed5f947","name":"请求参数","source":"26c9feff7ed5f947.attach","type":"text/plain","size":312},{"uid":"ee0e9bc9ce18ae1e","name":"请求结果","source":"ee0e9bc9ce18ae1e.attach","type":"text/plain","size":74}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1691390081364,"stop":1691390081381,"duration":17},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1691390081364,"stop":1691390081365,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"e4fb562d38ccf3d4","name":"期望状态码","source":"e4fb562d38ccf3d4.attach","type":"text/plain","size":3},{"uid":"5acdae0762acc527","name":"实际状态码","source":"5acdae0762acc527.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1691390081365,"stop":1691390081380,"duration":15},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"cea54ceadc52fdf3","name":"期望返回值","source":"cea54ceadc52fdf3.attach","type":"text/plain","size":35},{"uid":"f6e8a9424dca791d","name":"实际返回值","source":"f6e8a9424dca791d.attach","type":"text/plain","size":74}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"attachmentsCount":9,"shouldDisplayMessage":false}],"attachments":[{"uid":"3a61961b59c10285","name":"log","source":"3a61961b59c10285.txt","type":"text/plain","size":3077}],"parameters":[],"hasContent":true,"stepsCount":5,"attachmentsCount":10,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理"},{"name":"story","value":"用户同步"},{"name":"parentSuite","value":"testcases"},{"name":"suite","value":"test_cases"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"20992-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_cases"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"5d0fb7538fdf273b.json","parameterValues":[]}