{"uid":"5b8ef6802ffa80b8","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687014061787,"stop":1687014061963,"duration":176},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000002BB8BB87310>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': 'https://192.168.148.174:31000', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:52: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        if isinstance(hope_res, dict) and isinstance(real_res, dict):\n            try:\n                with allure.step(\"返回值校验\"):\n                    allure.attach(name=\"期望返回值\", body=str(hope_res))\n                    allure.attach(name='实际返回值', body=str(real_res))\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000002BB8BB87310>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': 'https://192.168.148.174:31000', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:52: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        if isinstance(hope_res, dict) and isinstance(real_res, dict):\n            try:\n                with allure.step(\"返回值校验\"):\n                    allure.attach(name=\"期望返回值\", body=str(hope_res))\n                    allure.attach(name='实际返回值', body=str(real_res))\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687014061787,"stop":1687014061860,"duration":73},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687014061793,"stop":1687014061856,"duration":63},"status":"passed","steps":[],"attachments":[{"uid":"83972146722facb5","name":"请求方法：","source":"83972146722facb5.attach","type":"text/plain","size":3},{"uid":"3bedb8608e095205","name":"请求地址","source":"3bedb8608e095205.attach","type":"text/plain","size":51},{"uid":"33f3342b907c4970","name":"请求头","source":"33f3342b907c4970.attach","type":"text/plain","size":467},{"uid":"d254d5d6ea81e092","name":"请求参数","source":"d254d5d6ea81e092.attach","type":"text/plain","size":30},{"uid":"6018759b5cb5ac3c","name":"请求结果","source":"6018759b5cb5ac3c.attach","type":"text/plain","size":982}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687014061856,"stop":1687014061860,"duration":4},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687014061856,"stop":1687014061858,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"c4a994583812d07d","name":"期望状态码","source":"c4a994583812d07d.attach","type":"text/plain","size":3},{"uid":"e0e29b84fea29e4","name":"实际状态码","source":"e0e29b84fea29e4.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687014061858,"stop":1687014061860,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"9d76655e56ca34d5","name":"期望返回值","source":"9d76655e56ca34d5.attach","type":"text/plain","size":35},{"uid":"853aff32a0028c43","name":"实际返回值","source":"853aff32a0028c43.attach","type":"text/plain","size":982}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"attachmentsCount":9,"shouldDisplayMessage":false},{"name":"执行当前接口：获取同步根组id","time":{"start":1687014061862,"stop":1687014061960,"duration":98},"status":"passed","steps":[],"attachments":[{"uid":"2164e7a7bc10cd84","name":"请求方法：","source":"2164e7a7bc10cd84.attach","type":"text/plain","size":3},{"uid":"d8c62da797a3c6ad","name":"请求地址","source":"d8c62da797a3c6ad.attach","type":"text/plain","size":64},{"uid":"e59356c65aeba7a9","name":"请求头","source":"e59356c65aeba7a9.attach","type":"text/plain","size":467},{"uid":"bfabed4eb8ff2051","name":"请求参数","source":"bfabed4eb8ff2051.attach","type":"text/plain","size":33},{"uid":"e5552096f1dca972","name":"请求结果","source":"e5552096f1dca972.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687014061960,"stop":1687014061963,"duration":3},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687014061960,"stop":1687014061961,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"75f749d97176354a","name":"期望状态码","source":"75f749d97176354a.attach","type":"text/plain","size":3},{"uid":"7bda25e91b678601","name":"实际状态码","source":"7bda25e91b678601.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687014061961,"stop":1687014061962,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"eb5c2769a3f9a18","name":"期望返回值","source":"eb5c2769a3f9a18.attach","type":"text/plain","size":35},{"uid":"5202c844358ce2a6","name":"实际返回值","source":"5202c844358ce2a6.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"c331550f8983707a","name":"log","source":"c331550f8983707a.txt","type":"text/plain","size":7459}],"parameters":[],"stepsCount":9,"hasContent":true,"attachmentsCount":19,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"11596-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"5b8ef6802ffa80b8.json","parameterValues":[]}