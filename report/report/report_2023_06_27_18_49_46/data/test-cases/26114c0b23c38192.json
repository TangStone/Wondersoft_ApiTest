{"uid":"26114c0b23c38192","name":"更新指纹库-服务器导入-挂载","fullName":"bms.testcases.test_11_docFinger.TestDocFinger#test_docFinger_update","historyId":"ed1e7729e4b9bf1622652111bd7986b0","time":{"start":1687862965703,"stop":1687862965929,"duration":226},"description":"更新指纹库-服务器导入-挂载","descriptionHtml":"<p>更新指纹库-服务器导入-挂载</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x00000209F4737640>\ncaseid = 'docFinger_update_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_01', 'description': '更新指纹库-服务器导入-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"更新指纹库-服务器导入-挂载","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x00000209F4737640>\ncaseid = 'docFinger_update_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_01', 'description': '更新指纹库-服务器导入-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687862965704,"stop":1687862965872,"duration":168},"status":"passed","steps":[{"name":"执行当前接口：获取json文件类型","time":{"start":1687862965710,"stop":1687862965783,"duration":73},"status":"passed","steps":[],"attachments":[{"uid":"2684da5a00418f5","name":"请求方法：","source":"2684da5a00418f5.attach","type":"text/plain","size":4},{"uid":"43fd98bd06e8a7ce","name":"请求地址","source":"43fd98bd06e8a7ce.attach","type":"text/plain","size":71},{"uid":"ae68cadeab5c41b1","name":"请求头","source":"ae68cadeab5c41b1.attach","type":"text/plain","size":497},{"uid":"5c86189ca3f4f273","name":"请求参数","source":"5c86189ca3f4f273.attach","type":"text/plain","size":25},{"uid":"1247f8c49ad96a24","name":"请求结果","source":"1247f8c49ad96a24.attach","type":"text/plain","size":103}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687862965783,"stop":1687862965787,"duration":4},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687862965784,"stop":1687862965785,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"e511f908435fcdd5","name":"期望状态码","source":"e511f908435fcdd5.attach","type":"text/plain","size":3},{"uid":"5a01ee4eac8d31f8","name":"实际状态码","source":"5a01ee4eac8d31f8.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687862965785,"stop":1687862965786,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"3c40f35116741b2e","name":"期望返回值","source":"3c40f35116741b2e.attach","type":"text/plain","size":17},{"uid":"6701a913856583d0","name":"实际返回值","source":"6701a913856583d0.attach","type":"text/plain","size":103}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false},{"name":"执行当前接口：文档指纹库列表查询-根据指纹库名称模糊筛选","time":{"start":1687862965800,"stop":1687862965869,"duration":69},"status":"passed","steps":[],"attachments":[{"uid":"9d5abcdb3e4730c2","name":"请求方法：","source":"9d5abcdb3e4730c2.attach","type":"text/plain","size":4},{"uid":"f20e62aa6b7bd40a","name":"请求地址","source":"f20e62aa6b7bd40a.attach","type":"text/plain","size":80},{"uid":"1d1c06566a589d45","name":"请求头","source":"1d1c06566a589d45.attach","type":"text/plain","size":497},{"uid":"90b77da87b8df08e","name":"请求参数","source":"90b77da87b8df08e.attach","type":"text/plain","size":81},{"uid":"3e08300bee69d737","name":"请求结果","source":"3e08300bee69d737.attach","type":"text/plain","size":1262}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687862965869,"stop":1687862965872,"duration":3},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687862965869,"stop":1687862965870,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"7edf8fcf1fc9c253","name":"期望状态码","source":"7edf8fcf1fc9c253.attach","type":"text/plain","size":3},{"uid":"18d80e6b834586ae","name":"实际状态码","source":"18d80e6b834586ae.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687862965870,"stop":1687862965871,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"8af694673b7be055","name":"期望返回值","source":"8af694673b7be055.attach","type":"text/plain","size":17},{"uid":"30bd2ec9c59ee804","name":"实际返回值","source":"30bd2ec9c59ee804.attach","type":"text/plain","size":1262}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"json断言判断包含","time":{"start":1687862965871,"stop":1687862965872,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"c392b4775c724e8","name":"期望结果","source":"c392b4775c724e8.attach","type":"text/plain","size":90},{"uid":"f07caecb74e74ff1","name":"实际实际结果","source":"f07caecb74e74ff1.attach","type":"text/plain","size":44}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":3,"attachmentsCount":6,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":9,"attachmentsCount":20,"shouldDisplayMessage":false},{"name":"执行当前接口：更新指纹库-服务器导入-挂载","time":{"start":1687862965873,"stop":1687862965927,"duration":54},"status":"passed","steps":[],"attachments":[{"uid":"6092b244a0a0855d","name":"请求方法：","source":"6092b244a0a0855d.attach","type":"text/plain","size":4},{"uid":"3eb603c90540bfae","name":"请求地址","source":"3eb603c90540bfae.attach","type":"text/plain","size":76},{"uid":"8323ec2ad2c83ca2","name":"请求头","source":"8323ec2ad2c83ca2.attach","type":"text/plain","size":497},{"uid":"592c7de8a91b411c","name":"请求参数","source":"592c7de8a91b411c.attach","type":"text/plain","size":456},{"uid":"2c48de7c3bf6d61","name":"请求结果","source":"2c48de7c3bf6d61.attach","type":"text/plain","size":77}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687862965927,"stop":1687862965929,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687862965927,"stop":1687862965928,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"bbce2316d8e126f1","name":"期望状态码","source":"bbce2316d8e126f1.attach","type":"text/plain","size":3},{"uid":"f9a768ac66e231b9","name":"实际状态码","source":"f9a768ac66e231b9.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687862965928,"stop":1687862965928,"duration":0},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"6b19465edc4dca27","name":"期望返回值","source":"6b19465edc4dca27.attach","type":"text/plain","size":17},{"uid":"5a7f9228c91a5da4","name":"实际返回值","source":"5a7f9228c91a5da4.attach","type":"text/plain","size":77}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"162ff364efb7c544","name":"log","source":"162ff364efb7c544.txt","type":"text/plain","size":13595}],"parameters":[],"hasContent":true,"stepsCount":14,"attachmentsCount":30,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"规则管理"},{"name":"feature","value":"基础规则-文件指纹"},{"name":"story","value":"更新文档指纹库接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_11_docFinger"},{"name":"subSuite","value":"TestDocFinger"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"3612-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_11_docFinger"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"26114c0b23c38192.json","parameterValues":[]}