{"uid":"7e82d5aedcb2a8bc","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687862952751,"stop":1687862952935,"duration":184},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x00000209F462BEB0>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x00000209F462BEB0>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687862952758,"stop":1687862952845,"duration":87},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687862952776,"stop":1687862952841,"duration":65},"status":"passed","steps":[],"attachments":[{"uid":"a873808a5750710a","name":"请求方法：","source":"a873808a5750710a.attach","type":"text/plain","size":3},{"uid":"4158d9d2f2731287","name":"请求地址","source":"4158d9d2f2731287.attach","type":"text/plain","size":51},{"uid":"6d1b54c833700dca","name":"请求头","source":"6d1b54c833700dca.attach","type":"text/plain","size":467},{"uid":"cd4e511f3d76e962","name":"请求参数","source":"cd4e511f3d76e962.attach","type":"text/plain","size":30},{"uid":"3c6a02ccc8f95432","name":"请求结果","source":"3c6a02ccc8f95432.attach","type":"text/plain","size":3688}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687862952841,"stop":1687862952845,"duration":4},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687862952841,"stop":1687862952842,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"a57dd0f984923eff","name":"期望状态码","source":"a57dd0f984923eff.attach","type":"text/plain","size":3},{"uid":"f9c92c251cb384c4","name":"实际状态码","source":"f9c92c251cb384c4.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687862952842,"stop":1687862952845,"duration":3},"status":"passed","steps":[],"attachments":[{"uid":"5ce73082ba86af1","name":"期望返回值","source":"5ce73082ba86af1.attach","type":"text/plain","size":35},{"uid":"80f4aa998da4e31","name":"实际返回值","source":"80f4aa998da4e31.attach","type":"text/plain","size":3688}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"attachmentsCount":9,"shouldDisplayMessage":false},{"name":"执行当前接口：获取同步根组id","time":{"start":1687862952846,"stop":1687862952933,"duration":87},"status":"passed","steps":[],"attachments":[{"uid":"5df8cfb2023ccd28","name":"请求方法：","source":"5df8cfb2023ccd28.attach","type":"text/plain","size":3},{"uid":"c705ebb7b6306307","name":"请求地址","source":"c705ebb7b6306307.attach","type":"text/plain","size":64},{"uid":"ed492df07adae6b1","name":"请求头","source":"ed492df07adae6b1.attach","type":"text/plain","size":467},{"uid":"2ecb3396cc35c166","name":"请求参数","source":"2ecb3396cc35c166.attach","type":"text/plain","size":34},{"uid":"3c9db20c3570a348","name":"请求结果","source":"3c9db20c3570a348.attach","type":"text/plain","size":64}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687862952933,"stop":1687862952935,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687862952933,"stop":1687862952934,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"bea7cc23af7b2118","name":"期望状态码","source":"bea7cc23af7b2118.attach","type":"text/plain","size":3},{"uid":"a7ad0f7ea2fb3607","name":"实际状态码","source":"a7ad0f7ea2fb3607.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687862952934,"stop":1687862952935,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"88e2353bb7aa646f","name":"期望返回值","source":"88e2353bb7aa646f.attach","type":"text/plain","size":35},{"uid":"e16df0d933cef81e","name":"实际返回值","source":"e16df0d933cef81e.attach","type":"text/plain","size":64}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"a6db52f93a5b8b7f","name":"log","source":"a6db52f93a5b8b7f.txt","type":"text/plain","size":51499}],"parameters":[],"hasContent":true,"stepsCount":9,"attachmentsCount":19,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"3612-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"bab78593a5afd93d","status":"failed","statusDetails":"AssertionError","time":{"start":1687862947558,"stop":1687862947717,"duration":159}},{"uid":"7741fbf069ccd170","status":"failed","statusDetails":"AssertionError","time":{"start":1687862942336,"stop":1687862942530,"duration":194}},{"uid":"25e14d210f4bb735","status":"failed","statusDetails":"AssertionError","time":{"start":1687862936959,"stop":1687862937118,"duration":159}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"7e82d5aedcb2a8bc.json","parameterValues":[]}