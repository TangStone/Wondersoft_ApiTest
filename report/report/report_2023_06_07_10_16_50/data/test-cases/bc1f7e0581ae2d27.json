{"uid":"bc1f7e0581ae2d27","name":"修改数据源配置成功","fullName":"bms.test_cases#test_cases","historyId":"ac9630858157ba5f71b0913be3129781","time":{"start":1686104209428,"stop":1686104209661,"duration":233},"status":"failed","statusMessage":"AssertionError","statusTrace":"caseid = 'usersync_config_update_01'\n\n    @pytest.mark.parametrize('caseid', all_case.keys())\n    def test_cases(caseid):\n        case_info = readcase.all_case[caseid]\n        case_data = readcase.ReadCase().get_case_data(caseid, case_info['casepath'])\n    \n        allure.dynamic.epic(case_info['epic'])\n        allure.dynamic.feature(case_info['feature'])\n        allure.dynamic.story(case_info['story'])\n        allure.dynamic.title(case_info['title'])\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(case_data)\n\nbms\\test_cases.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:37: in excute_case\n    relevance_dict = relevancecase.Relevance().get_relevance_data(case_data['relevance'])\ncommon\\relevancecase.py:37: in get_relevance_data\n    case_send_data, recv_data = runcase.excute_case(case_data)\ncommon\\runcase.py:49: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:23: in check_result\n    assert_code(value, real_code)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_code = 200, real_code = 400\n\n    def assert_code(hope_code, real_code):\n        \"\"\"\n        返回状态码校验\n        :param hope_res: 期望返回状态码\n        :param real_res: 实际返回状态码\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"状态码校验\"):\n                allure.attach(name=\"期望状态码\", body=str(hope_code))\n                allure.attach(name='实际状态码', body=str(real_code))\n>               assert real_code == hope_code\nE               AssertionError\n\ncommon\\checkresult.py:87: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"clear_yaml","time":{"start":1686104207066,"stop":1686104207066,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"login_init","time":{"start":1686104207066,"stop":1686104207174,"duration":108},"status":"passed","steps":[{"name":"执行当前接口：管理员用户登录获取token","time":{"start":1686104207088,"stop":1686104207171,"duration":83},"status":"passed","steps":[],"attachments":[{"name":"请求方法：","size":0},{"name":"请求地址","size":0},{"name":"请求头","size":0},{"name":"请求参数","size":0},{"name":"请求结果","size":0}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1686104207171,"stop":1686104207173,"duration":2},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1686104207171,"stop":1686104207172,"duration":1},"status":"passed","steps":[],"attachments":[{"name":"期望状态码","size":0},{"name":"实际状态码","size":0}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2},{"name":"json断言判断相等","time":{"start":1686104207172,"stop":1686104207173,"duration":1},"status":"passed","steps":[],"attachments":[{"name":"期望结果","size":0},{"name":"实际实际结果","size":0}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"shouldDisplayMessage":false,"attachmentsCount":4}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"shouldDisplayMessage":false,"attachmentsCount":9},{"name":"remove_tmp","time":{"start":1686104207175,"stop":1686104207254,"duration":79},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError","statusTrace":"caseid = 'usersync_config_update_01'\n\n    @pytest.mark.parametrize('caseid', all_case.keys())\n    def test_cases(caseid):\n        case_info = readcase.all_case[caseid]\n        case_data = readcase.ReadCase().get_case_data(caseid, case_info['casepath'])\n    \n        allure.dynamic.epic(case_info['epic'])\n        allure.dynamic.feature(case_info['feature'])\n        allure.dynamic.story(case_info['story'])\n        allure.dynamic.title(case_info['title'])\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(case_data)\n\nbms\\test_cases.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:37: in excute_case\n    relevance_dict = relevancecase.Relevance().get_relevance_data(case_data['relevance'])\ncommon\\relevancecase.py:37: in get_relevance_data\n    case_send_data, recv_data = runcase.excute_case(case_data)\ncommon\\runcase.py:49: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:23: in check_result\n    assert_code(value, real_code)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_code = 200, real_code = 400\n\n    def assert_code(hope_code, real_code):\n        \"\"\"\n        返回状态码校验\n        :param hope_res: 期望返回状态码\n        :param real_res: 实际返回状态码\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"状态码校验\"):\n                allure.attach(name=\"期望状态码\", body=str(hope_code))\n                allure.attach(name='实际状态码', body=str(real_code))\n>               assert real_code == hope_code\nE               AssertionError\n\ncommon\\checkresult.py:87: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1686104209432,"stop":1686104209659,"duration":227},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\relevancecase.py\", line 37, in get_relevance_data\n    case_send_data, recv_data = runcase.excute_case(case_data)\n  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 49, in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 23, in check_result\n    assert_code(value, real_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 87, in assert_code\n    assert real_code == hope_code\n","steps":[{"name":"执行当前接口：新增数据源配置成功","time":{"start":1686104209438,"stop":1686104209657,"duration":219},"status":"passed","steps":[],"attachments":[{"uid":"e761021c4b92da82","name":"请求方法：","source":"e761021c4b92da82.attach","type":"text/plain","size":3},{"uid":"42f2aeb7b9b47640","name":"请求地址","source":"42f2aeb7b9b47640.attach","type":"text/plain","size":52},{"uid":"b3ab6b6c35e8f29","name":"请求头","source":"b3ab6b6c35e8f29.attach","type":"text/plain","size":467},{"uid":"adebf97fc9858459","name":"请求参数","source":"adebf97fc9858459.attach","type":"text/plain","size":447},{"uid":"63129096e005eed0","name":"请求结果","source":"63129096e005eed0.attach","type":"text/plain","size":70}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":5},{"name":"结果校验","time":{"start":1686104209657,"stop":1686104209659,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 23, in check_result\n    assert_code(value, real_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 87, in assert_code\n    assert real_code == hope_code\n","steps":[{"name":"状态码校验","time":{"start":1686104209657,"stop":1686104209658,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 87, in assert_code\n    assert real_code == hope_code\n","steps":[],"attachments":[{"uid":"91ece09278273e03","name":"期望状态码","source":"91ece09278273e03.attach","type":"text/plain","size":3},{"uid":"8122ee0a5bb783d7","name":"实际状态码","source":"8122ee0a5bb783d7.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":1,"shouldDisplayMessage":false,"attachmentsCount":2}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":3,"shouldDisplayMessage":false,"attachmentsCount":7}],"attachments":[{"uid":"ba10a9bdff6f433f","name":"log","source":"ba10a9bdff6f433f.txt","type":"text/plain","size":3374}],"parameters":[],"hasContent":true,"stepsCount":4,"shouldDisplayMessage":true,"attachmentsCount":8},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"修改数据源配置接口"},{"name":"parentSuite","value":"bms"},{"name":"suite","value":"test_cases"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"13680-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.test_cases"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"caseid","value":"'usersync_config_update_01'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"bc1f7e0581ae2d27.json","parameterValues":["'usersync_config_update_01'"]}