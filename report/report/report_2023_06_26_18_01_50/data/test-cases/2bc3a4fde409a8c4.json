{"uid":"2bc3a4fde409a8c4","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687773648099,"stop":1687773648371,"duration":272},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000002A712CE69D0>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000002A712CE69D0>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687773648100,"stop":1687773648246,"duration":146},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687773648107,"stop":1687773648234,"duration":127},"status":"passed","steps":[],"attachments":[{"uid":"a5998c88735c0a54","name":"请求方法：","source":"a5998c88735c0a54.attach","type":"text/plain","size":3},{"uid":"ca8d1b4ff57ce664","name":"请求地址","source":"ca8d1b4ff57ce664.attach","type":"text/plain","size":51},{"uid":"ff7aa0ad8996fa9","name":"请求头","source":"ff7aa0ad8996fa9.attach","type":"text/plain","size":467},{"uid":"e14d23ee9ff7b1ac","name":"请求参数","source":"e14d23ee9ff7b1ac.attach","type":"text/plain","size":30},{"uid":"8d86db2ee860bc82","name":"请求结果","source":"8d86db2ee860bc82.attach","type":"text/plain","size":3938}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687773648234,"stop":1687773648241,"duration":7},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687773648234,"stop":1687773648238,"duration":4},"status":"passed","steps":[],"attachments":[{"uid":"e8600b5e91c0c1fa","name":"期望状态码","source":"e8600b5e91c0c1fa.attach","type":"text/plain","size":3},{"uid":"526daaa8baae4287","name":"实际状态码","source":"526daaa8baae4287.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687773648238,"stop":1687773648241,"duration":3},"status":"passed","steps":[],"attachments":[{"uid":"b48f1d59f9db0d78","name":"期望返回值","source":"b48f1d59f9db0d78.attach","type":"text/plain","size":35},{"uid":"1705db3c26d4f968","name":"实际返回值","source":"1705db3c26d4f968.attach","type":"text/plain","size":3938}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"attachmentsCount":9,"shouldDisplayMessage":false},{"name":"执行当前接口：获取同步根组id","time":{"start":1687773648248,"stop":1687773648317,"duration":69},"status":"passed","steps":[],"attachments":[{"uid":"cf42e2a463b1ebbc","name":"请求方法：","source":"cf42e2a463b1ebbc.attach","type":"text/plain","size":3},{"uid":"11099ac49852ddd1","name":"请求地址","source":"11099ac49852ddd1.attach","type":"text/plain","size":64},{"uid":"f97b7c6a234aaedb","name":"请求头","source":"f97b7c6a234aaedb.attach","type":"text/plain","size":467},{"uid":"64582e9862d761ec","name":"请求参数","source":"64582e9862d761ec.attach","type":"text/plain","size":34},{"uid":"60c3bee6f620e82e","name":"请求结果","source":"60c3bee6f620e82e.attach","type":"text/plain","size":64}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687773648317,"stop":1687773648370,"duration":53},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687773648317,"stop":1687773648318,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"fd880108d0c39429","name":"期望状态码","source":"fd880108d0c39429.attach","type":"text/plain","size":3},{"uid":"2841968eb53065c9","name":"实际状态码","source":"2841968eb53065c9.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687773648318,"stop":1687773648319,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"a39de3ddebf45244","name":"期望返回值","source":"a39de3ddebf45244.attach","type":"text/plain","size":35},{"uid":"b5c8ef6489c64bc","name":"实际返回值","source":"b5c8ef6489c64bc.attach","type":"text/plain","size":64}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"7ce95307b354933a","name":"log","source":"7ce95307b354933a.txt","type":"text/plain","size":13374}],"parameters":[],"hasContent":true,"stepsCount":9,"attachmentsCount":19,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"16008-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"2bc3a4fde409a8c4.json","parameterValues":[]}