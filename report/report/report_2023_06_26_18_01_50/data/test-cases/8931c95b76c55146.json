{"uid":"8931c95b76c55146","name":"修改指纹库-本地上传-挂载","fullName":"bms.testcases.test_11_docFinger.TestDocFinger#test_docFinger_update","historyId":"4fbc21d1c39e62d14a030ecc6dc5f6bf","time":{"start":1687773683493,"stop":1687773683787,"duration":294},"description":"修改指纹库-本地上传-挂载","descriptionHtml":"<p>修改指纹库-本地上传-挂载</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x000002A712DF11F0>\ncaseid = 'docFinger_update_02'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_02', 'description': '修改指纹库-本地上传-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"修改指纹库-本地上传-挂载","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x000002A712DF11F0>\ncaseid = 'docFinger_update_02'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_02', 'description': '修改指纹库-本地上传-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687773683494,"stop":1687773683703,"duration":209},"status":"passed","steps":[{"name":"执行当前接口：获取json文件类型","time":{"start":1687773683500,"stop":1687773683571,"duration":71},"status":"passed","steps":[],"attachments":[{"uid":"22708171f1c8698d","name":"请求方法：","source":"22708171f1c8698d.attach","type":"text/plain","size":4},{"uid":"10654ea38fb5e404","name":"请求地址","source":"10654ea38fb5e404.attach","type":"text/plain","size":71},{"uid":"bed750589f2fd1b7","name":"请求头","source":"bed750589f2fd1b7.attach","type":"text/plain","size":497},{"uid":"ad3c83f88271455d","name":"请求参数","source":"ad3c83f88271455d.attach","type":"text/plain","size":25},{"uid":"14d6f747a4fb40d3","name":"请求结果","source":"14d6f747a4fb40d3.attach","type":"text/plain","size":103}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687773683571,"stop":1687773683607,"duration":36},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687773683571,"stop":1687773683572,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"597a1081ee9a95e7","name":"期望状态码","source":"597a1081ee9a95e7.attach","type":"text/plain","size":3},{"uid":"111575b2cec418e0","name":"实际状态码","source":"111575b2cec418e0.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687773683572,"stop":1687773683607,"duration":35},"status":"passed","steps":[],"attachments":[{"uid":"a2d80dd993811085","name":"期望返回值","source":"a2d80dd993811085.attach","type":"text/plain","size":17},{"uid":"7e2b495e0c2781bf","name":"实际返回值","source":"7e2b495e0c2781bf.attach","type":"text/plain","size":103}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false},{"name":"执行当前接口：文档指纹库列表查询-根据指纹库名称模糊筛选","time":{"start":1687773683620,"stop":1687773683700,"duration":80},"status":"passed","steps":[],"attachments":[{"uid":"f7d84b6cc8152c4e","name":"请求方法：","source":"f7d84b6cc8152c4e.attach","type":"text/plain","size":4},{"uid":"f6cd9fee0d574565","name":"请求地址","source":"f6cd9fee0d574565.attach","type":"text/plain","size":80},{"uid":"54015f193191f8b8","name":"请求头","source":"54015f193191f8b8.attach","type":"text/plain","size":497},{"uid":"4793599ca661ca43","name":"请求参数","source":"4793599ca661ca43.attach","type":"text/plain","size":81},{"uid":"dd1ae77ca08944de","name":"请求结果","source":"dd1ae77ca08944de.attach","type":"text/plain","size":1288}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687773683700,"stop":1687773683703,"duration":3},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687773683700,"stop":1687773683701,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"2c22de40ecb1e5d3","name":"期望状态码","source":"2c22de40ecb1e5d3.attach","type":"text/plain","size":3},{"uid":"61c7f93f744feb41","name":"实际状态码","source":"61c7f93f744feb41.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687773683701,"stop":1687773683702,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"757c4b95be35d18f","name":"期望返回值","source":"757c4b95be35d18f.attach","type":"text/plain","size":17},{"uid":"36a8124bdb61669f","name":"实际返回值","source":"36a8124bdb61669f.attach","type":"text/plain","size":1288}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"json断言判断包含","time":{"start":1687773683702,"stop":1687773683703,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"617fb7a0cd24f3b4","name":"期望结果","source":"617fb7a0cd24f3b4.attach","type":"text/plain","size":96},{"uid":"154a0632c9f45793","name":"实际实际结果","source":"154a0632c9f45793.attach","type":"text/plain","size":54}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":3,"attachmentsCount":6,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":9,"attachmentsCount":20,"shouldDisplayMessage":false},{"name":"执行当前接口：修改指纹库-本地上传-挂载","time":{"start":1687773683708,"stop":1687773683784,"duration":76},"status":"passed","steps":[],"attachments":[{"uid":"9f0320a26c50aa16","name":"请求方法：","source":"9f0320a26c50aa16.attach","type":"text/plain","size":4},{"uid":"37b5a5e350cf8c27","name":"请求地址","source":"37b5a5e350cf8c27.attach","type":"text/plain","size":76},{"uid":"cad3995b2ee3dee8","name":"请求头","source":"cad3995b2ee3dee8.attach","type":"text/plain","size":483},{"uid":"54bce3f7a450726f","name":"请求参数","source":"54bce3f7a450726f.attach","type":"text/plain","size":428},{"uid":"5525525ea75daa08","name":"上传文件","source":"5525525ea75daa08.attach","type":"text/plain","size":29},{"uid":"7fe6799a5f5711ec","name":"请求结果","source":"7fe6799a5f5711ec.attach","type":"text/plain","size":77}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":6,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687773683784,"stop":1687773683787,"duration":3},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687773683784,"stop":1687773683786,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"ceebb33720c9b68b","name":"期望状态码","source":"ceebb33720c9b68b.attach","type":"text/plain","size":3},{"uid":"534468c1e0e24524","name":"实际状态码","source":"534468c1e0e24524.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687773683786,"stop":1687773683787,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"ebd72256ba8d1636","name":"期望返回值","source":"ebd72256ba8d1636.attach","type":"text/plain","size":17},{"uid":"84e1a184396cb5f","name":"实际返回值","source":"84e1a184396cb5f.attach","type":"text/plain","size":77}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"c2dbe7536a5f346f","name":"log","source":"c2dbe7536a5f346f.txt","type":"text/plain","size":13707}],"parameters":[],"hasContent":true,"stepsCount":14,"attachmentsCount":31,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"规则管理"},{"name":"feature","value":"基础规则-文件指纹"},{"name":"story","value":"更新文档指纹库接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_11_docFinger"},{"name":"subSuite","value":"TestDocFinger"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"16008-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_11_docFinger"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"8931c95b76c55146.json","parameterValues":[]}