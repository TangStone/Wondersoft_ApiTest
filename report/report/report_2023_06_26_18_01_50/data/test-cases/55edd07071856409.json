{"uid":"55edd07071856409","name":"修改指纹库-本地上传-挂载","fullName":"bms.testcases.test_11_docFinger.TestDocFinger#test_docFinger_update","historyId":"4fbc21d1c39e62d14a030ecc6dc5f6bf","time":{"start":1687773688952,"stop":1687773689522,"duration":570},"description":"修改指纹库-本地上传-挂载","descriptionHtml":"<p>修改指纹库-本地上传-挂载</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x000002A712DF11F0>\ncaseid = 'docFinger_update_02'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_02', 'description': '修改指纹库-本地上传-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"修改指纹库-本地上传-挂载","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x000002A712DF11F0>\ncaseid = 'docFinger_update_02'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_02', 'description': '修改指纹库-本地上传-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687773688952,"stop":1687773689429,"duration":477},"status":"passed","steps":[{"name":"执行当前接口：获取json文件类型","time":{"start":1687773688959,"stop":1687773689213,"duration":254},"status":"passed","steps":[],"attachments":[{"uid":"9a8087be2dfbfe2e","name":"请求方法：","source":"9a8087be2dfbfe2e.attach","type":"text/plain","size":4},{"uid":"7072bb8366e5d252","name":"请求地址","source":"7072bb8366e5d252.attach","type":"text/plain","size":71},{"uid":"4781b4c53af1dbc3","name":"请求头","source":"4781b4c53af1dbc3.attach","type":"text/plain","size":497},{"uid":"1830a77dc578758e","name":"请求参数","source":"1830a77dc578758e.attach","type":"text/plain","size":25},{"uid":"9280b893cf3f1072","name":"请求结果","source":"9280b893cf3f1072.attach","type":"text/plain","size":103}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687773689213,"stop":1687773689332,"duration":119},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687773689213,"stop":1687773689265,"duration":52},"status":"passed","steps":[],"attachments":[{"uid":"900a192774ee50e9","name":"期望状态码","source":"900a192774ee50e9.attach","type":"text/plain","size":3},{"uid":"586553a535c733ff","name":"实际状态码","source":"586553a535c733ff.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687773689265,"stop":1687773689332,"duration":67},"status":"passed","steps":[],"attachments":[{"uid":"1eeac02ea62ec9a1","name":"期望返回值","source":"1eeac02ea62ec9a1.attach","type":"text/plain","size":17},{"uid":"14cd3b4f353efc5c","name":"实际返回值","source":"14cd3b4f353efc5c.attach","type":"text/plain","size":103}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false},{"name":"执行当前接口：文档指纹库列表查询-根据指纹库名称模糊筛选","time":{"start":1687773689346,"stop":1687773689424,"duration":78},"status":"passed","steps":[],"attachments":[{"uid":"4be4a970fa65dba9","name":"请求方法：","source":"4be4a970fa65dba9.attach","type":"text/plain","size":4},{"uid":"fbddd6c90073a578","name":"请求地址","source":"fbddd6c90073a578.attach","type":"text/plain","size":80},{"uid":"6c4ce258ead8e3ca","name":"请求头","source":"6c4ce258ead8e3ca.attach","type":"text/plain","size":497},{"uid":"65f7e33dbf48ee4c","name":"请求参数","source":"65f7e33dbf48ee4c.attach","type":"text/plain","size":81},{"uid":"6b928368d57bad33","name":"请求结果","source":"6b928368d57bad33.attach","type":"text/plain","size":1288}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687773689425,"stop":1687773689429,"duration":4},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687773689425,"stop":1687773689426,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"8eb394d1029e17b6","name":"期望状态码","source":"8eb394d1029e17b6.attach","type":"text/plain","size":3},{"uid":"5fd359ed0babcb6f","name":"实际状态码","source":"5fd359ed0babcb6f.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687773689426,"stop":1687773689427,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"60a482c23cc8e210","name":"期望返回值","source":"60a482c23cc8e210.attach","type":"text/plain","size":17},{"uid":"a414ac61a13efb71","name":"实际返回值","source":"a414ac61a13efb71.attach","type":"text/plain","size":1288}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"json断言判断包含","time":{"start":1687773689427,"stop":1687773689429,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"2b1fb415282713cd","name":"期望结果","source":"2b1fb415282713cd.attach","type":"text/plain","size":96},{"uid":"650827aee6b95455","name":"实际实际结果","source":"650827aee6b95455.attach","type":"text/plain","size":54}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":3,"attachmentsCount":6,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":9,"attachmentsCount":20,"shouldDisplayMessage":false},{"name":"执行当前接口：修改指纹库-本地上传-挂载","time":{"start":1687773689432,"stop":1687773689518,"duration":86},"status":"passed","steps":[],"attachments":[{"uid":"fcac8a2df64d0997","name":"请求方法：","source":"fcac8a2df64d0997.attach","type":"text/plain","size":4},{"uid":"186361f72938d367","name":"请求地址","source":"186361f72938d367.attach","type":"text/plain","size":76},{"uid":"140b8df178d03289","name":"请求头","source":"140b8df178d03289.attach","type":"text/plain","size":483},{"uid":"e4ceaeb2c66c1519","name":"请求参数","source":"e4ceaeb2c66c1519.attach","type":"text/plain","size":428},{"uid":"18ebf20861ce3855","name":"上传文件","source":"18ebf20861ce3855.attach","type":"text/plain","size":29},{"uid":"4595dc722d7acb67","name":"请求结果","source":"4595dc722d7acb67.attach","type":"text/plain","size":77}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":6,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687773689518,"stop":1687773689522,"duration":4},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687773689518,"stop":1687773689519,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"ae0f4f8ce0295487","name":"期望状态码","source":"ae0f4f8ce0295487.attach","type":"text/plain","size":3},{"uid":"6b75b05939d2375","name":"实际状态码","source":"6b75b05939d2375.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687773689519,"stop":1687773689521,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"cff44e06978505d1","name":"期望返回值","source":"cff44e06978505d1.attach","type":"text/plain","size":17},{"uid":"9a51e4d218735fd8","name":"实际返回值","source":"9a51e4d218735fd8.attach","type":"text/plain","size":77}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"69e38af82b293230","name":"log","source":"69e38af82b293230.txt","type":"text/plain","size":27415}],"parameters":[],"hasContent":true,"stepsCount":14,"attachmentsCount":31,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"规则管理"},{"name":"feature","value":"基础规则-文件指纹"},{"name":"story","value":"更新文档指纹库接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_11_docFinger"},{"name":"subSuite","value":"TestDocFinger"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"16008-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_11_docFinger"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"55edd07071856409.json","parameterValues":[]}