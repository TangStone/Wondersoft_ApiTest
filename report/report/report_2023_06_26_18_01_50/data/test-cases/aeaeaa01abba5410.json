{"uid":"aeaeaa01abba5410","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687773665874,"stop":1687773666065,"duration":191},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000002A712CE69D0>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000002A712CE69D0>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687773665875,"stop":1687773665968,"duration":93},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687773665881,"stop":1687773665963,"duration":82},"status":"passed","steps":[],"attachments":[{"uid":"1e5b6d73c83bd0c","name":"请求方法：","source":"1e5b6d73c83bd0c.attach","type":"text/plain","size":3},{"uid":"e05ae12465228b","name":"请求地址","source":"e05ae12465228b.attach","type":"text/plain","size":51},{"uid":"237f800f88f7c4f5","name":"请求头","source":"237f800f88f7c4f5.attach","type":"text/plain","size":467},{"uid":"e4c81c97bd0d734f","name":"请求参数","source":"e4c81c97bd0d734f.attach","type":"text/plain","size":30},{"uid":"d8859de544750bdf","name":"请求结果","source":"d8859de544750bdf.attach","type":"text/plain","size":4030}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687773665963,"stop":1687773665968,"duration":5},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687773665963,"stop":1687773665964,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"dcff321418a7d227","name":"期望状态码","source":"dcff321418a7d227.attach","type":"text/plain","size":3},{"uid":"5f4cb6278e10dfa0","name":"实际状态码","source":"5f4cb6278e10dfa0.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687773665964,"stop":1687773665968,"duration":4},"status":"passed","steps":[],"attachments":[{"uid":"d9ed0b874f00a983","name":"期望返回值","source":"d9ed0b874f00a983.attach","type":"text/plain","size":35},{"uid":"3aaa3e9fe733ee30","name":"实际返回值","source":"3aaa3e9fe733ee30.attach","type":"text/plain","size":4030}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"attachmentsCount":9,"shouldDisplayMessage":false},{"name":"执行当前接口：获取同步根组id","time":{"start":1687773665971,"stop":1687773666062,"duration":91},"status":"passed","steps":[],"attachments":[{"uid":"f2c9de2968a7dd81","name":"请求方法：","source":"f2c9de2968a7dd81.attach","type":"text/plain","size":3},{"uid":"2113bf4ab57dd1db","name":"请求地址","source":"2113bf4ab57dd1db.attach","type":"text/plain","size":64},{"uid":"908109644f4b6fb0","name":"请求头","source":"908109644f4b6fb0.attach","type":"text/plain","size":467},{"uid":"f0a3fb5ff3999c76","name":"请求参数","source":"f0a3fb5ff3999c76.attach","type":"text/plain","size":34},{"uid":"4ba30eb6652093b6","name":"请求结果","source":"4ba30eb6652093b6.attach","type":"text/plain","size":64}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687773666062,"stop":1687773666065,"duration":3},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687773666062,"stop":1687773666063,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"cacb1c6700fbbdcb","name":"期望状态码","source":"cacb1c6700fbbdcb.attach","type":"text/plain","size":3},{"uid":"bb3c9f856d847b64","name":"实际状态码","source":"bb3c9f856d847b64.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687773666063,"stop":1687773666064,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"5f945676e981f7ee","name":"期望返回值","source":"5f945676e981f7ee.attach","type":"text/plain","size":35},{"uid":"a01c2e5b11882ef7","name":"实际返回值","source":"a01c2e5b11882ef7.attach","type":"text/plain","size":64}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"cfd4ef355c1b4ca8","name":"log","source":"cfd4ef355c1b4ca8.txt","type":"text/plain","size":54051}],"parameters":[],"hasContent":true,"stepsCount":9,"attachmentsCount":19,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"16008-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"758d2b76fa97673d","status":"failed","statusDetails":"AssertionError","time":{"start":1687773660488,"stop":1687773660847,"duration":359}},{"uid":"4c6e3f01902adb8e","status":"failed","statusDetails":"AssertionError","time":{"start":1687773655169,"stop":1687773655449,"duration":280}},{"uid":"2bc3a4fde409a8c4","status":"failed","statusDetails":"AssertionError","time":{"start":1687773648099,"stop":1687773648371,"duration":272}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"aeaeaa01abba5410.json","parameterValues":[]}