{"uid":"65b2426a50329974","name":"新增用户组-长度校验","fullName":"testcases.test_cases.TestUserSync#test_businesscases","historyId":"f92a754065a8f7f8643f7eba2c471a78","time":{"start":1691056319875,"stop":1691056320025,"duration":150},"description":"新增用户组，用户组名称超长，新增失败，提示信息正确","descriptionHtml":"<p>新增用户组，用户组名称超长，新增失败，提示信息正确</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x000002684C7608E0>\ncase = 'groupAdd_len_check'\ncasedata = {'description': '新增用户组，用户组名称超长，新增失败，提示信息正确', 'epic': '用户管理', 'feature': '基础数据管理', 'name': '新增用户组-长度校验', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:90: in excute_apicase\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:33: in check_result\n    assert_db(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = [{'result': [{'path': '$.count', 'value': 0}], 'sql': \"select count(*) as count from `bms-general-uba`.t_group_info where groupName = '自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组' and isRemoved = '0'\", 'type': 'mysql'}]\n\n    def assert_db(hope_res):\n        \"\"\"\n        数据库校验\n        :param hope_res:\n        :return:\n        \"\"\"\n        if hope_res:\n            for dbcheck_data in hope_res:\n                db_type = dbcheck_data['type']  # 数据库类型\n                db_sql = dbcheck_data['sql']\n                if db_type == 'mysql':\n                    if db_sql[0:6].upper() == 'SELECT':\n                        sql_date = database.MysqlConn().mysql_query(db_sql)\n                        with allure.step(\"数据库校验校验\"):\n                            for param in dbcheck_data['result']:\n                                sql_value = jsonpath.jsonpath(sql_date, param['path'])\n                                value = param['value']\n                                try:\n                                    allure.attach(name=\"查询sql\", body=str(db_sql))\n                                    allure.attach(name=\"期望返回值\", body=str(value))\n                                    if sql_value:\n                                        allure.attach(name='实际返回值', body=str(sql_value[0]))\n>                                       assert str(value) == str(sql_value[0])\nE                                       AssertionError\n\ncommon\\checkresult.py:57: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"login_init","time":{"start":1691056225852,"stop":1691056225971,"duration":119},"status":"passed","steps":[{"name":"发送请求","time":{"start":1691056225879,"stop":1691056225967,"duration":88},"status":"passed","steps":[],"attachments":[{"uid":"e486b581e9f3a145","name":"请求方法：","source":"e486b581e9f3a145.attach","type":"text/plain","size":4},{"uid":"7ced43dde0a93b57","name":"请求地址","source":"7ced43dde0a93b57.attach","type":"text/plain","size":52},{"uid":"2f295756b6ae938e","name":"请求头","source":"2f295756b6ae938e.attach","type":"text/plain","size":109},{"uid":"b4f85d136a0672fc","name":"请求参数","source":"b4f85d136a0672fc.attach","type":"text/plain","size":225},{"uid":"318ffe3257259c7d","name":"请求结果","source":"318ffe3257259c7d.attach","type":"text/plain","size":2569}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1691056225967,"stop":1691056225969,"duration":2},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1691056225967,"stop":1691056225968,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"c6928916a00f24c6","name":"期望状态码","source":"c6928916a00f24c6.attach","type":"text/plain","size":3},{"uid":"ceea4ef73a823c1f","name":"实际状态码","source":"ceea4ef73a823c1f.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1691056225968,"stop":1691056225969,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"b5441693a02ae445","name":"期望返回值","source":"b5441693a02ae445.attach","type":"text/plain","size":66},{"uid":"60e03235946dfa1b","name":"实际返回值","source":"60e03235946dfa1b.attach","type":"text/plain","size":2569}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"attachmentsCount":9,"shouldDisplayMessage":false}],"testStage":{"description":"新增用户组，用户组名称超长，新增失败，提示信息正确","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <test_cases.TestUserSync object at 0x000002684C7608E0>\ncase = 'groupAdd_len_check'\ncasedata = {'description': '新增用户组，用户组名称超长，新增失败，提示信息正确', 'epic': '用户管理', 'feature': '基础数据管理', 'name': '新增用户组-长度校验', ...}\n\n    @pytest.mark.parametrize('case, casedata', readcase.ReadCase().get_case(businesscase_pathlist))\n    def test_businesscases(self, case, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========执行用例START：%s==========\", case)\n>       runcase.RunCase().excute_case(casedata)\n\ntestcases\\test_cases.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:59: in excute_case\n    self.excute_apicase(api, api_casedata)\ncommon\\runcase.py:90: in excute_apicase\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:33: in check_result\n    assert_db(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = [{'result': [{'path': '$.count', 'value': 0}], 'sql': \"select count(*) as count from `bms-general-uba`.t_group_info where groupName = '自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组自动化测试根组' and isRemoved = '0'\", 'type': 'mysql'}]\n\n    def assert_db(hope_res):\n        \"\"\"\n        数据库校验\n        :param hope_res:\n        :return:\n        \"\"\"\n        if hope_res:\n            for dbcheck_data in hope_res:\n                db_type = dbcheck_data['type']  # 数据库类型\n                db_sql = dbcheck_data['sql']\n                if db_type == 'mysql':\n                    if db_sql[0:6].upper() == 'SELECT':\n                        sql_date = database.MysqlConn().mysql_query(db_sql)\n                        with allure.step(\"数据库校验校验\"):\n                            for param in dbcheck_data['result']:\n                                sql_value = jsonpath.jsonpath(sql_date, param['path'])\n                                value = param['value']\n                                try:\n                                    allure.attach(name=\"查询sql\", body=str(db_sql))\n                                    allure.attach(name=\"期望返回值\", body=str(value))\n                                    if sql_value:\n                                        allure.attach(name='实际返回值', body=str(sql_value[0]))\n>                                       assert str(value) == str(sql_value[0])\nE                                       AssertionError\n\ncommon\\checkresult.py:57: AssertionError","steps":[{"name":"新增用户组-长度校验","time":{"start":1691056319916,"stop":1691056320025,"duration":109},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 59, in excute_case\n    self.excute_apicase(api, api_casedata)\n  File \"E:\\Wondersoft_ApiTest\\common\\runcase.py\", line 90, in excute_apicase\n    checkresult.check_result(hope_result, recv_data, recv_code)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 33, in check_result\n    assert_db(value)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[{"name":"发送请求","time":{"start":1691056319919,"stop":1691056320000,"duration":81},"status":"passed","steps":[],"attachments":[{"uid":"2e2ed092f10b187c","name":"请求方法：","source":"2e2ed092f10b187c.attach","type":"text/plain","size":4},{"uid":"342b63ae6e43491a","name":"请求地址","source":"342b63ae6e43491a.attach","type":"text/plain","size":47},{"uid":"3bfdcd6644c26bbe","name":"请求头","source":"3bfdcd6644c26bbe.attach","type":"text/plain","size":464},{"uid":"6e168c4e60558578","name":"请求参数","source":"6e168c4e60558578.attach","type":"text/plain","size":207},{"uid":"3f4dd28465452214","name":"请求结果","source":"3f4dd28465452214.attach","type":"text/plain","size":230}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1691056320000,"stop":1691056320025,"duration":25},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 33, in check_result\n    assert_db(value)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[{"name":"状态码校验","time":{"start":1691056320000,"stop":1691056320001,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"bb78acded38387b5","name":"期望状态码","source":"bb78acded38387b5.attach","type":"text/plain","size":3},{"uid":"d2cb713a0c8ac055","name":"实际状态码","source":"d2cb713a0c8ac055.attach","type":"text/plain","size":3}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"数据库校验校验","time":{"start":1691056320024,"stop":1691056320025,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[],"attachments":[{"uid":"5dcf0cdc55c3ebed","name":"查询sql","source":"5dcf0cdc55c3ebed.attach","type":"text/plain","size":269},{"uid":"6e3d19245d18184c","name":"期望返回值","source":"6e3d19245d18184c.attach","type":"text/plain","size":1},{"uid":"656e0c89f1e43fb3","name":"实际返回值","source":"656e0c89f1e43fb3.attach","type":"text/plain","size":1}],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentsCount":3,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":2,"attachmentsCount":5,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":4,"attachmentsCount":10,"shouldDisplayMessage":false}],"attachments":[{"uid":"6b48369b4de33e00","name":"log","source":"6b48369b4de33e00.txt","type":"text/plain","size":6256}],"parameters":[],"hasContent":true,"stepsCount":5,"attachmentsCount":11,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"基础数据管理"},{"name":"story","value":"用户与机构管理"},{"name":"parentSuite","value":"testcases"},{"name":"suite","value":"test_cases"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"20716-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_cases"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"65b2426a50329974.json","parameterValues":[]}