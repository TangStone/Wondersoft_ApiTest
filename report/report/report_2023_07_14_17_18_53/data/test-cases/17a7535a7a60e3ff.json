{"uid":"17a7535a7a60e3ff","name":"更新指纹库-服务器导入-挂载","fullName":"bms.testcases.test_11_docFinger.TestDocFinger#test_docFinger_update","historyId":"ed1e7729e4b9bf1622652111bd7986b0","time":{"start":1689326306926,"stop":1689326307145,"duration":219},"description":"更新指纹库-服务器导入-挂载","descriptionHtml":"<p>更新指纹库-服务器导入-挂载</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x00000269CB924C40>\ncaseid = 'docFinger_update_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_01', 'description': '更新指纹库-服务器导入-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"更新指纹库-服务器导入-挂载","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x00000269CB924C40>\ncaseid = 'docFinger_update_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_01', 'description': '更新指纹库-服务器导入-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1689326306928,"stop":1689326307084,"duration":156},"status":"passed","steps":[{"name":"执行当前接口：获取json文件类型","time":{"start":1689326306935,"stop":1689326307001,"duration":66},"status":"passed","steps":[],"attachments":[{"uid":"1a2ff56ef1609149","name":"请求方法：","source":"1a2ff56ef1609149.attach","type":"text/plain","size":4},{"uid":"262034a07f352f14","name":"请求地址","source":"262034a07f352f14.attach","type":"text/plain","size":71},{"uid":"b14fa1497b84f69d","name":"请求头","source":"b14fa1497b84f69d.attach","type":"text/plain","size":497},{"uid":"f00f6747dd4c2a82","name":"请求参数","source":"f00f6747dd4c2a82.attach","type":"text/plain","size":25},{"uid":"c16357242fd01512","name":"请求结果","source":"c16357242fd01512.attach","type":"text/plain","size":103}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1689326307001,"stop":1689326307004,"duration":3},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1689326307001,"stop":1689326307002,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"18a057d9fc7c331f","name":"期望状态码","source":"18a057d9fc7c331f.attach","type":"text/plain","size":3},{"uid":"941f81be6de7558b","name":"实际状态码","source":"941f81be6de7558b.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1689326307003,"stop":1689326307004,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"b56e31078299ee96","name":"期望返回值","source":"b56e31078299ee96.attach","type":"text/plain","size":17},{"uid":"b7bb596e8dd3843e","name":"实际返回值","source":"b7bb596e8dd3843e.attach","type":"text/plain","size":103}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false},{"name":"执行当前接口：文档指纹库列表查询-根据指纹库名称模糊筛选","time":{"start":1689326307015,"stop":1689326307079,"duration":64},"status":"passed","steps":[],"attachments":[{"uid":"8cad6a6c1a664ef0","name":"请求方法：","source":"8cad6a6c1a664ef0.attach","type":"text/plain","size":4},{"uid":"73b4f60d21677490","name":"请求地址","source":"73b4f60d21677490.attach","type":"text/plain","size":80},{"uid":"71aac9e36c4deff8","name":"请求头","source":"71aac9e36c4deff8.attach","type":"text/plain","size":497},{"uid":"84eded336888b764","name":"请求参数","source":"84eded336888b764.attach","type":"text/plain","size":81},{"uid":"36cdd6d370b62971","name":"请求结果","source":"36cdd6d370b62971.attach","type":"text/plain","size":1262}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1689326307079,"stop":1689326307084,"duration":5},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1689326307079,"stop":1689326307080,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"5521fc925fac842","name":"期望状态码","source":"5521fc925fac842.attach","type":"text/plain","size":3},{"uid":"541f05617e2f8787","name":"实际状态码","source":"541f05617e2f8787.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1689326307080,"stop":1689326307081,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"86d9f22449dcdfd5","name":"期望返回值","source":"86d9f22449dcdfd5.attach","type":"text/plain","size":17},{"uid":"476093114ea0daf0","name":"实际返回值","source":"476093114ea0daf0.attach","type":"text/plain","size":1262}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"json断言判断包含","time":{"start":1689326307081,"stop":1689326307084,"duration":3},"status":"passed","steps":[],"attachments":[{"uid":"a5b947dbcdfe5469","name":"期望结果","source":"a5b947dbcdfe5469.attach","type":"text/plain","size":90},{"uid":"4109e64bb2e0b6d1","name":"实际实际结果","source":"4109e64bb2e0b6d1.attach","type":"text/plain","size":44}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":3,"hasContent":true,"attachmentsCount":6,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":9,"hasContent":true,"attachmentsCount":20,"shouldDisplayMessage":false},{"name":"执行当前接口：更新指纹库-服务器导入-挂载","time":{"start":1689326307085,"stop":1689326307142,"duration":57},"status":"passed","steps":[],"attachments":[{"uid":"2cd6220cb62f89d9","name":"请求方法：","source":"2cd6220cb62f89d9.attach","type":"text/plain","size":4},{"uid":"e6a605616bf40a5e","name":"请求地址","source":"e6a605616bf40a5e.attach","type":"text/plain","size":76},{"uid":"e9e330b18829fa01","name":"请求头","source":"e9e330b18829fa01.attach","type":"text/plain","size":497},{"uid":"46d011ca6b08e0cf","name":"请求参数","source":"46d011ca6b08e0cf.attach","type":"text/plain","size":456},{"uid":"312a7d736068ede4","name":"请求结果","source":"312a7d736068ede4.attach","type":"text/plain","size":77}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1689326307142,"stop":1689326307145,"duration":3},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\接口自动化备份\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\接口自动化备份\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1689326307142,"stop":1689326307143,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"580f4ba530a5aebc","name":"期望状态码","source":"580f4ba530a5aebc.attach","type":"text/plain","size":3},{"uid":"83eb372a5ec7d53e","name":"实际状态码","source":"83eb372a5ec7d53e.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1689326307143,"stop":1689326307144,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\接口自动化备份\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"98f6f5eb3a63be42","name":"期望返回值","source":"98f6f5eb3a63be42.attach","type":"text/plain","size":17},{"uid":"ac240892d5e964c5","name":"实际返回值","source":"ac240892d5e964c5.attach","type":"text/plain","size":77}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"95c576631aec1788","name":"log","source":"95c576631aec1788.txt","type":"text/plain","size":12794}],"parameters":[],"stepsCount":14,"hasContent":true,"attachmentsCount":30,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"规则管理"},{"name":"feature","value":"基础规则-文件指纹"},{"name":"story","value":"更新文档指纹库接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_11_docFinger"},{"name":"subSuite","value":"TestDocFinger"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"10876-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_11_docFinger"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"17a7535a7a60e3ff.json","parameterValues":[]}