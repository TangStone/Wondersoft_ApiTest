{"uid":"1d9d2be255f1f1eb","name":"更新指纹库-服务器导入-挂载","fullName":"bms.testcases.test_11_docFinger.TestDocFinger#test_docFinger_update","historyId":"ed1e7729e4b9bf1622652111bd7986b0","time":{"start":1689326312179,"stop":1689326312416,"duration":237},"description":"更新指纹库-服务器导入-挂载","descriptionHtml":"<p>更新指纹库-服务器导入-挂载</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x00000269CB924C40>\ncaseid = 'docFinger_update_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_01', 'description': '更新指纹库-服务器导入-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"更新指纹库-服务器导入-挂载","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x00000269CB924C40>\ncaseid = 'docFinger_update_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_01', 'description': '更新指纹库-服务器导入-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1689326312185,"stop":1689326312352,"duration":167},"status":"passed","steps":[{"name":"执行当前接口：获取json文件类型","time":{"start":1689326312204,"stop":1689326312277,"duration":73},"status":"passed","steps":[],"attachments":[{"uid":"455b93541e693448","name":"请求方法：","source":"455b93541e693448.attach","type":"text/plain","size":4},{"uid":"e787f26c3605da2","name":"请求地址","source":"e787f26c3605da2.attach","type":"text/plain","size":71},{"uid":"e2aed31e68d3d3b4","name":"请求头","source":"e2aed31e68d3d3b4.attach","type":"text/plain","size":497},{"uid":"c2543e81b2008e44","name":"请求参数","source":"c2543e81b2008e44.attach","type":"text/plain","size":25},{"uid":"8d3bd634f9674164","name":"请求结果","source":"8d3bd634f9674164.attach","type":"text/plain","size":103}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1689326312277,"stop":1689326312279,"duration":2},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1689326312277,"stop":1689326312278,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"f59b9bb17ceb9e58","name":"期望状态码","source":"f59b9bb17ceb9e58.attach","type":"text/plain","size":3},{"uid":"4525b9b3e498bae0","name":"实际状态码","source":"4525b9b3e498bae0.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1689326312278,"stop":1689326312279,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"218bcff35f21c526","name":"期望返回值","source":"218bcff35f21c526.attach","type":"text/plain","size":17},{"uid":"16ab8eddc8c97e41","name":"实际返回值","source":"16ab8eddc8c97e41.attach","type":"text/plain","size":103}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false},{"name":"执行当前接口：文档指纹库列表查询-根据指纹库名称模糊筛选","time":{"start":1689326312287,"stop":1689326312348,"duration":61},"status":"passed","steps":[],"attachments":[{"uid":"1788c0c9de875525","name":"请求方法：","source":"1788c0c9de875525.attach","type":"text/plain","size":4},{"uid":"9f3be55b16aa28ee","name":"请求地址","source":"9f3be55b16aa28ee.attach","type":"text/plain","size":80},{"uid":"6bc3b1ee54721407","name":"请求头","source":"6bc3b1ee54721407.attach","type":"text/plain","size":497},{"uid":"b8a97ef4858ebc42","name":"请求参数","source":"b8a97ef4858ebc42.attach","type":"text/plain","size":81},{"uid":"17a875a2356f08f3","name":"请求结果","source":"17a875a2356f08f3.attach","type":"text/plain","size":1262}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1689326312348,"stop":1689326312352,"duration":4},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1689326312348,"stop":1689326312349,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"c3a8412d5619b91c","name":"期望状态码","source":"c3a8412d5619b91c.attach","type":"text/plain","size":3},{"uid":"e08097ce0641d446","name":"实际状态码","source":"e08097ce0641d446.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1689326312349,"stop":1689326312350,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"7c91140d9d82795b","name":"期望返回值","source":"7c91140d9d82795b.attach","type":"text/plain","size":17},{"uid":"2e44ab48218e471f","name":"实际返回值","source":"2e44ab48218e471f.attach","type":"text/plain","size":1262}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"json断言判断包含","time":{"start":1689326312350,"stop":1689326312352,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"a4e3e557fd43a649","name":"期望结果","source":"a4e3e557fd43a649.attach","type":"text/plain","size":90},{"uid":"a4b20f3355c6fbea","name":"实际实际结果","source":"a4b20f3355c6fbea.attach","type":"text/plain","size":44}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":3,"hasContent":true,"attachmentsCount":6,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":9,"hasContent":true,"attachmentsCount":20,"shouldDisplayMessage":false},{"name":"执行当前接口：更新指纹库-服务器导入-挂载","time":{"start":1689326312353,"stop":1689326312413,"duration":60},"status":"passed","steps":[],"attachments":[{"uid":"3208bb139e207fa9","name":"请求方法：","source":"3208bb139e207fa9.attach","type":"text/plain","size":4},{"uid":"9139d61d47f5994d","name":"请求地址","source":"9139d61d47f5994d.attach","type":"text/plain","size":76},{"uid":"ce06ae5cbcf00448","name":"请求头","source":"ce06ae5cbcf00448.attach","type":"text/plain","size":497},{"uid":"7a8ec871435b8df2","name":"请求参数","source":"7a8ec871435b8df2.attach","type":"text/plain","size":456},{"uid":"c4d1ec519b5f50a5","name":"请求结果","source":"c4d1ec519b5f50a5.attach","type":"text/plain","size":77}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1689326312413,"stop":1689326312415,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\接口自动化备份\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\接口自动化备份\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1689326312413,"stop":1689326312414,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"dac6d0e11c75ac0b","name":"期望状态码","source":"dac6d0e11c75ac0b.attach","type":"text/plain","size":3},{"uid":"e4405d4da6f53831","name":"实际状态码","source":"e4405d4da6f53831.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1689326312414,"stop":1689326312415,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\接口自动化备份\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"d5617b6251ddeba3","name":"期望返回值","source":"d5617b6251ddeba3.attach","type":"text/plain","size":17},{"uid":"ea75d0019032c81c","name":"实际返回值","source":"ea75d0019032c81c.attach","type":"text/plain","size":77}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"64ce354ee96303b5","name":"log","source":"64ce354ee96303b5.txt","type":"text/plain","size":25589}],"parameters":[],"stepsCount":14,"hasContent":true,"attachmentsCount":30,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"规则管理"},{"name":"feature","value":"基础规则-文件指纹"},{"name":"story","value":"更新文档指纹库接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_11_docFinger"},{"name":"subSuite","value":"TestDocFinger"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"10876-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_11_docFinger"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"1d9d2be255f1f1eb.json","parameterValues":[]}