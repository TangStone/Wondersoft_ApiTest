{"uid":"f03034020ff7025e","name":"新增用户组-特殊字符校验","fullName":"bms.testcases.test_04_user.TestUser#test_user_group_add","historyId":"05c4baabf07ce16940066db47c892f8b","time":{"start":1689326279290,"stop":1689326279374,"duration":84},"description":"新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确","descriptionHtml":"<p>新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_04_user.TestUser object at 0x00000269CB848550>\ncaseid = 'user_group_add_05'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'user_group_add_05', 'description': '新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/user/user_group_add.yaml').items()])\n    def test_user_group_add(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_04_user.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:33: in check_result\n    assert_db(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = [{'result': [{'path': '$.count', 'value': 0}], 'sql': \"select count(*) as count from `bms-general-uba`.t_group_info where groupName = '自动化测试根组……&%' and isRemoved = '0'\", 'type': 'mysql'}]\n\n    def assert_db(hope_res):\n        \"\"\"\n        数据库校验\n        :param hope_res:\n        :return:\n        \"\"\"\n        if hope_res:\n            for dbcheck_data in hope_res:\n                db_type = dbcheck_data['type']  # 数据库类型\n                db_sql = dbcheck_data['sql']\n                if db_type == 'mysql':\n                    if db_sql[0:6].upper() == 'SELECT':\n                        sql_date = database.MysqlConn().mysql_query(db_sql)\n                        with allure.step(\"数据库校验校验\"):\n                            for param in dbcheck_data['result']:\n                                sql_value = jsonpath.jsonpath(sql_date, param['path'])\n                                value = param['value']\n                                try:\n                                    allure.attach(name=\"查询sql\", body=str(db_sql))\n                                    allure.attach(name=\"期望返回值\", body=str(value))\n                                    if sql_value:\n                                        allure.attach(name='实际返回值', body=str(sql_value[0]))\n>                                       assert str(value) == str(sql_value[0])\nE                                       AssertionError\n\ncommon\\checkresult.py:57: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_04_user.TestUser object at 0x00000269CB848550>\ncaseid = 'user_group_add_05'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'user_group_add_05', 'description': '新增用户组，用户组名称存在特殊字符，新增失败，提示信息正确', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/user/user_group_add.yaml').items()])\n    def test_user_group_add(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_04_user.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:33: in check_result\n    assert_db(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = [{'result': [{'path': '$.count', 'value': 0}], 'sql': \"select count(*) as count from `bms-general-uba`.t_group_info where groupName = '自动化测试根组……&%' and isRemoved = '0'\", 'type': 'mysql'}]\n\n    def assert_db(hope_res):\n        \"\"\"\n        数据库校验\n        :param hope_res:\n        :return:\n        \"\"\"\n        if hope_res:\n            for dbcheck_data in hope_res:\n                db_type = dbcheck_data['type']  # 数据库类型\n                db_sql = dbcheck_data['sql']\n                if db_type == 'mysql':\n                    if db_sql[0:6].upper() == 'SELECT':\n                        sql_date = database.MysqlConn().mysql_query(db_sql)\n                        with allure.step(\"数据库校验校验\"):\n                            for param in dbcheck_data['result']:\n                                sql_value = jsonpath.jsonpath(sql_date, param['path'])\n                                value = param['value']\n                                try:\n                                    allure.attach(name=\"查询sql\", body=str(db_sql))\n                                    allure.attach(name=\"期望返回值\", body=str(value))\n                                    if sql_value:\n                                        allure.attach(name='实际返回值', body=str(sql_value[0]))\n>                                       assert str(value) == str(sql_value[0])\nE                                       AssertionError\n\ncommon\\checkresult.py:57: AssertionError","steps":[{"name":"执行当前接口：新增用户组-特殊字符校验","time":{"start":1689326279292,"stop":1689326279360,"duration":68},"status":"passed","steps":[],"attachments":[{"uid":"a290796ab5d87f77","name":"请求方法：","source":"a290796ab5d87f77.attach","type":"text/plain","size":4},{"uid":"f8b4cd1410e111ee","name":"请求地址","source":"f8b4cd1410e111ee.attach","type":"text/plain","size":47},{"uid":"c61624cb4c3ad6b7","name":"请求头","source":"c61624cb4c3ad6b7.attach","type":"text/plain","size":464},{"uid":"bd0d80625be0d568","name":"请求参数","source":"bd0d80625be0d568.attach","type":"text/plain","size":68},{"uid":"4eb3c6972155c888","name":"请求结果","source":"4eb3c6972155c888.attach","type":"text/plain","size":35}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1689326279361,"stop":1689326279373,"duration":12},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\接口自动化备份\\Wondersoft_ApiTest\\common\\checkresult.py\", line 33, in check_result\n    assert_db(value)\n  File \"E:\\接口自动化备份\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[{"name":"状态码校验","time":{"start":1689326279361,"stop":1689326279362,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"84c6308c48e4e686","name":"期望状态码","source":"84c6308c48e4e686.attach","type":"text/plain","size":3},{"uid":"ae2b014c1dc4c6a1","name":"实际状态码","source":"ae2b014c1dc4c6a1.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"数据库校验校验","time":{"start":1689326279367,"stop":1689326279372,"duration":5},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\接口自动化备份\\Wondersoft_ApiTest\\common\\checkresult.py\", line 57, in assert_db\n    assert str(value) == str(sql_value[0])\n","steps":[],"attachments":[{"uid":"7e9d0585ab2c0076","name":"查询sql","source":"7e9d0585ab2c0076.attach","type":"text/plain","size":130},{"uid":"bf26e4f6b2cd56fd","name":"期望返回值","source":"bf26e4f6b2cd56fd.attach","type":"text/plain","size":1},{"uid":"6d6ff86d6886cd90","name":"实际返回值","source":"6d6ff86d6886cd90.attach","type":"text/plain","size":1}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":3,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false}],"attachments":[{"uid":"82754840b4ae60b4","name":"log","source":"82754840b4ae60b4.txt","type":"text/plain","size":2574}],"parameters":[],"stepsCount":4,"hasContent":true,"attachmentsCount":11,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"基础数据管理-用户与机构管理"},{"name":"story","value":"新增用户组接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_04_user"},{"name":"subSuite","value":"TestUser"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"10876-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_04_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"f03034020ff7025e.json","parameterValues":[]}