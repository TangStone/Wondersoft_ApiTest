{"uid":"bdf6394134e64aee","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1689326262557,"stop":1689326262725,"duration":168},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x00000269CB81B580>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x00000269CB81B580>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:55: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:31: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, (dict, list)) and isinstance(real_res, (dict, list)):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:84: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1689326262560,"stop":1689326262634,"duration":74},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1689326262570,"stop":1689326262632,"duration":62},"status":"passed","steps":[],"attachments":[{"uid":"a51ee557fef54a79","name":"请求方法：","source":"a51ee557fef54a79.attach","type":"text/plain","size":3},{"uid":"9976ff8dbc559a28","name":"请求地址","source":"9976ff8dbc559a28.attach","type":"text/plain","size":51},{"uid":"35355f1418f6af00","name":"请求头","source":"35355f1418f6af00.attach","type":"text/plain","size":467},{"uid":"c1ec54d34a36202d","name":"请求参数","source":"c1ec54d34a36202d.attach","type":"text/plain","size":30},{"uid":"e285757d7e13140","name":"请求结果","source":"e285757d7e13140.attach","type":"text/plain","size":3534}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1689326262632,"stop":1689326262634,"duration":2},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1689326262632,"stop":1689326262632,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"2ad564fa3f917ee7","name":"期望状态码","source":"2ad564fa3f917ee7.attach","type":"text/plain","size":3},{"uid":"aedd66ca2bd1ff65","name":"实际状态码","source":"aedd66ca2bd1ff65.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1689326262632,"stop":1689326262634,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"c3218524912222d6","name":"期望返回值","source":"c3218524912222d6.attach","type":"text/plain","size":35},{"uid":"7dfe25720e09594c","name":"实际返回值","source":"7dfe25720e09594c.attach","type":"text/plain","size":3534}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"attachmentsCount":9,"shouldDisplayMessage":false},{"name":"执行当前接口：获取同步根组id","time":{"start":1689326262634,"stop":1689326262723,"duration":89},"status":"passed","steps":[],"attachments":[{"uid":"c9ec4361f1d0d736","name":"请求方法：","source":"c9ec4361f1d0d736.attach","type":"text/plain","size":3},{"uid":"78688de8ec0a524f","name":"请求地址","source":"78688de8ec0a524f.attach","type":"text/plain","size":64},{"uid":"c09662ae72ecc2e8","name":"请求头","source":"c09662ae72ecc2e8.attach","type":"text/plain","size":467},{"uid":"dafe34306bfbb273","name":"请求参数","source":"dafe34306bfbb273.attach","type":"text/plain","size":34},{"uid":"31cce99090817eb7","name":"请求结果","source":"31cce99090817eb7.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1689326262723,"stop":1689326262725,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\接口自动化备份\\Wondersoft_ApiTest\\common\\checkresult.py\", line 31, in check_result\n    assert_response(value, real_res)\n  File \"E:\\接口自动化备份\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1689326262723,"stop":1689326262724,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"899e7967d6ec4af1","name":"期望状态码","source":"899e7967d6ec4af1.attach","type":"text/plain","size":3},{"uid":"ec8e6ba979193377","name":"实际状态码","source":"ec8e6ba979193377.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1689326262724,"stop":1689326262724,"duration":0},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\接口自动化备份\\Wondersoft_ApiTest\\common\\checkresult.py\", line 84, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"c89fbf8520a605cc","name":"期望返回值","source":"c89fbf8520a605cc.attach","type":"text/plain","size":35},{"uid":"a05b9dc22db2e099","name":"实际返回值","source":"a05b9dc22db2e099.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"e5c2a19dc09cfe3d","name":"log","source":"e5c2a19dc09cfe3d.txt","type":"text/plain","size":47869}],"parameters":[],"stepsCount":9,"hasContent":true,"attachmentsCount":19,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"10876-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"c2179c663e877f82","status":"failed","statusDetails":"AssertionError","time":{"start":1689326256965,"stop":1689326257529,"duration":564}},{"uid":"9608c4e5eaef0305","status":"failed","statusDetails":"AssertionError","time":{"start":1689326251759,"stop":1689326251939,"duration":180}},{"uid":"93a76e8d73f0dd73","status":"failed","statusDetails":"AssertionError","time":{"start":1689326246383,"stop":1689326246545,"duration":162}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"bdf6394134e64aee.json","parameterValues":[]}