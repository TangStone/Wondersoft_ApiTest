{"uid":"b081ea30775e226d","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687260114975,"stop":1687260115184,"duration":209},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000002197C3CB910>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, dict) and isinstance(real_res, dict):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":3,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000002197C3CB910>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, dict) and isinstance(real_res, dict):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687260114977,"stop":1687260115091,"duration":114},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687260115003,"stop":1687260115085,"duration":82},"status":"passed","steps":[],"attachments":[{"uid":"7699886eaf222aa9","name":"请求方法：","source":"7699886eaf222aa9.attach","type":"text/plain","size":3},{"uid":"94346b2c6676ba7e","name":"请求地址","source":"94346b2c6676ba7e.attach","type":"text/plain","size":51},{"uid":"53ce3ec115306975","name":"请求头","source":"53ce3ec115306975.attach","type":"text/plain","size":467},{"uid":"636137a010b12e39","name":"请求参数","source":"636137a010b12e39.attach","type":"text/plain","size":30},{"uid":"3af986975dbb591e","name":"请求结果","source":"3af986975dbb591e.attach","type":"text/plain","size":1862}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687260115085,"stop":1687260115090,"duration":5},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687260115085,"stop":1687260115087,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"175fa2eac633ba43","name":"期望状态码","source":"175fa2eac633ba43.attach","type":"text/plain","size":3},{"uid":"a120e93df9f7b80d","name":"实际状态码","source":"a120e93df9f7b80d.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687260115087,"stop":1687260115090,"duration":3},"status":"passed","steps":[],"attachments":[{"uid":"b45d540d895ada47","name":"期望返回值","source":"b45d540d895ada47.attach","type":"text/plain","size":35},{"uid":"1f512b1ceb69b66f","name":"实际返回值","source":"1f512b1ceb69b66f.attach","type":"text/plain","size":1862}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"attachmentsCount":9,"shouldDisplayMessage":false},{"name":"执行当前接口：获取同步根组id","time":{"start":1687260115099,"stop":1687260115181,"duration":82},"status":"passed","steps":[],"attachments":[{"uid":"21d642087643ea0e","name":"请求方法：","source":"21d642087643ea0e.attach","type":"text/plain","size":3},{"uid":"5a83eed364a458aa","name":"请求地址","source":"5a83eed364a458aa.attach","type":"text/plain","size":64},{"uid":"bc64189b3ae07d61","name":"请求头","source":"bc64189b3ae07d61.attach","type":"text/plain","size":467},{"uid":"b18e79ab72ad155","name":"请求参数","source":"b18e79ab72ad155.attach","type":"text/plain","size":33},{"uid":"28eda3a315ba4216","name":"请求结果","source":"28eda3a315ba4216.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687260115181,"stop":1687260115183,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687260115181,"stop":1687260115182,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"412cbe04c3f9ae10","name":"期望状态码","source":"412cbe04c3f9ae10.attach","type":"text/plain","size":3},{"uid":"cbb04e14da64eb6b","name":"实际状态码","source":"cbb04e14da64eb6b.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687260115182,"stop":1687260115183,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"525cccb4a91f1298","name":"期望返回值","source":"525cccb4a91f1298.attach","type":"text/plain","size":35},{"uid":"7fcec6f944f81b4c","name":"实际返回值","source":"7fcec6f944f81b4c.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"c2c2f05cac557a6d","name":"log","source":"c2c2f05cac557a6d.txt","type":"text/plain","size":36633}],"parameters":[],"stepsCount":9,"hasContent":true,"attachmentsCount":19,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"7756-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f5a9ab8ceeacd50f","status":"failed","statusDetails":"AssertionError","time":{"start":1687260109769,"stop":1687260109948,"duration":179}},{"uid":"1f7adde5cfc3f883","status":"failed","statusDetails":"AssertionError","time":{"start":1687260104501,"stop":1687260104744,"duration":243}},{"uid":"7e4fb845712e1826","status":"failed","statusDetails":"AssertionError","time":{"start":1687260099055,"stop":1687260099249,"duration":194}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"b081ea30775e226d.json","parameterValues":[]}