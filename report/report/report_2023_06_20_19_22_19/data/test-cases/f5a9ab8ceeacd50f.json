{"uid":"f5a9ab8ceeacd50f","name":"获取同步根组id","fullName":"bms.testcases.test_02_usersync.TestUserSync#test_usersync_get_syncgroupid","historyId":"c076d0bb657b7fadcb6dc7f1415a3243","time":{"start":1687260109769,"stop":1687260109948,"duration":179},"description":"获取同步根组id","descriptionHtml":"<p>获取同步根组id</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000002197C3CB910>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, dict) and isinstance(real_res, dict):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"获取同步根组id","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_02_usersync.TestUserSync object at 0x000002197C3CB910>\ncaseid = 'usersync_get_syncgroupid_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'usersync_get_syncgroupid_01', 'description': '获取同步根组id', 'epic': '用户管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/usersync/usersync_get_syncgroupid.yaml').items()])\n    def test_usersync_get_syncgroupid(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_02_usersync.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'msg': 'success', 'statusCode': 0}\nreal_res = {'msg': '找不到对应的组织机构', 'statusCode': 1114886}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, dict) and isinstance(real_res, dict):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687260109771,"stop":1687260109879,"duration":108},"status":"passed","steps":[{"name":"执行当前接口：同步任务列表搜索-无搜索条件","time":{"start":1687260109798,"stop":1687260109877,"duration":79},"status":"passed","steps":[],"attachments":[{"uid":"145d2e0040563171","name":"请求方法：","source":"145d2e0040563171.attach","type":"text/plain","size":3},{"uid":"45fec26ef1688520","name":"请求地址","source":"45fec26ef1688520.attach","type":"text/plain","size":51},{"uid":"f4ca31637e7af12e","name":"请求头","source":"f4ca31637e7af12e.attach","type":"text/plain","size":467},{"uid":"35da0b1da1ff4b80","name":"请求参数","source":"35da0b1da1ff4b80.attach","type":"text/plain","size":30},{"uid":"7c97e6c672442b48","name":"请求结果","source":"7c97e6c672442b48.attach","type":"text/plain","size":1862}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687260109877,"stop":1687260109879,"duration":2},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687260109877,"stop":1687260109878,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"a3ec262516e1e4e9","name":"期望状态码","source":"a3ec262516e1e4e9.attach","type":"text/plain","size":3},{"uid":"d71860f93942ced7","name":"实际状态码","source":"d71860f93942ced7.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687260109878,"stop":1687260109879,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"cc92b96023ce6f43","name":"期望返回值","source":"cc92b96023ce6f43.attach","type":"text/plain","size":35},{"uid":"efeda5d333e51830","name":"实际返回值","source":"efeda5d333e51830.attach","type":"text/plain","size":1862}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"attachmentsCount":9,"shouldDisplayMessage":false},{"name":"执行当前接口：获取同步根组id","time":{"start":1687260109881,"stop":1687260109946,"duration":65},"status":"passed","steps":[],"attachments":[{"uid":"5492519a3d24b403","name":"请求方法：","source":"5492519a3d24b403.attach","type":"text/plain","size":3},{"uid":"1b34fe5673771549","name":"请求地址","source":"1b34fe5673771549.attach","type":"text/plain","size":64},{"uid":"73535f9da5b4924b","name":"请求头","source":"73535f9da5b4924b.attach","type":"text/plain","size":467},{"uid":"28359cdfab0eeb84","name":"请求参数","source":"28359cdfab0eeb84.attach","type":"text/plain","size":33},{"uid":"30bec9c0eb4a6e68","name":"请求结果","source":"30bec9c0eb4a6e68.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687260109946,"stop":1687260109948,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687260109946,"stop":1687260109946,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"71ebcc7b4a964f4b","name":"期望状态码","source":"71ebcc7b4a964f4b.attach","type":"text/plain","size":3},{"uid":"a4d7f98e534e901f","name":"实际状态码","source":"a4d7f98e534e901f.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687260109946,"stop":1687260109947,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"34d84da1184486e3","name":"期望返回值","source":"34d84da1184486e3.attach","type":"text/plain","size":35},{"uid":"b123a4305ad5457d","name":"实际返回值","source":"b123a4305ad5457d.attach","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"fc4ffc121e1eada2","name":"log","source":"fc4ffc121e1eada2.txt","type":"text/plain","size":27412}],"parameters":[],"stepsCount":9,"hasContent":true,"attachmentsCount":19,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"用户管理"},{"name":"feature","value":"用户同步管理-用户同步"},{"name":"story","value":"编辑，获取同步根组id接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_02_usersync"},{"name":"subSuite","value":"TestUserSync"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"7756-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_02_usersync"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"f5a9ab8ceeacd50f.json","parameterValues":[]}