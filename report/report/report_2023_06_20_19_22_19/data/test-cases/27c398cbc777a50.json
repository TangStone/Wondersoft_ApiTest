{"uid":"27c398cbc777a50","name":"更新指纹库-服务器导入-挂载","fullName":"bms.testcases.test_11_docFinger.TestDocFinger#test_docFinger_update","historyId":"ed1e7729e4b9bf1622652111bd7986b0","time":{"start":1687260127600,"stop":1687260127816,"duration":216},"description":"更新指纹库-服务器导入-挂载","descriptionHtml":"<p>更新指纹库-服务器导入-挂载</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x000002197C4DC2B0>\ncaseid = 'docFinger_update_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_01', 'description': '更新指纹库-服务器导入-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, dict) and isinstance(real_res, dict):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"更新指纹库-服务器导入-挂载","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <bms.testcases.test_11_docFinger.TestDocFinger object at 0x000002197C4DC2B0>\ncaseid = 'docFinger_update_01'\ncasedata = {'base_url': '${config(host)}', 'caseid': 'docFinger_update_01', 'description': '更新指纹库-服务器导入-挂载', 'epic': '规则管理', ...}\n\n    @pytest.mark.parametrize('caseid, casedata', [(caseid, casedata) for caseid, casedata in\n                                                  readcase.ReadCase().get_case_dict(\n                                                      ROOT_DIR + 'bms/data/docFinger/docFinger_update.yaml').items()])\n    def test_docFinger_update(self, caseid, casedata):\n        handleallure.allure_display(casedata)\n        logging.info(\"==========开始执行用例：%s==========\", caseid)\n>       runcase.excute_case(casedata)\n\nbms\\testcases\\test_11_docFinger.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\runcase.py:54: in excute_case\n    checkresult.check_result(hope_result, recv_data, recv_code)\ncommon\\checkresult.py:30: in check_result\n    assert_response(value, real_res)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhope_res = {'statusCode': 0}\nreal_res = {'msg': '该指纹库正在计算中，请稍后修改！', 'statusCode': -1}\n\n    def assert_response(hope_res, real_res):\n        \"\"\"\n        返回结果校验 -全返回校验\n        :param hope_res:\n        :param real_res:\n        :return:\n        \"\"\"\n        try:\n            with allure.step(\"返回值校验\"):\n                allure.attach(name=\"期望返回值\", body=str(hope_res))\n                allure.attach(name='实际返回值', body=str(real_res))\n                if isinstance(hope_res, dict) and isinstance(real_res, dict):\n                    flag = handledict.cmp_dict(hope_res, real_res)\n>                   assert flag\nE                   AssertionError\n\ncommon\\checkresult.py:45: AssertionError","steps":[{"name":"执行关联接口","time":{"start":1687260127600,"stop":1687260127755,"duration":155},"status":"passed","steps":[{"name":"执行当前接口：获取json文件类型","time":{"start":1687260127606,"stop":1687260127659,"duration":53},"status":"passed","steps":[],"attachments":[{"uid":"c649ddf989a989af","name":"请求方法：","source":"c649ddf989a989af.attach","type":"text/plain","size":4},{"uid":"40a1e30e8ae36307","name":"请求地址","source":"40a1e30e8ae36307.attach","type":"text/plain","size":71},{"uid":"6497bf6ee506c4d7","name":"请求头","source":"6497bf6ee506c4d7.attach","type":"text/plain","size":497},{"uid":"b62ad63a395798f5","name":"请求参数","source":"b62ad63a395798f5.attach","type":"text/plain","size":25},{"uid":"ec4574110217e9c6","name":"请求结果","source":"ec4574110217e9c6.attach","type":"text/plain","size":103}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687260127659,"stop":1687260127666,"duration":7},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687260127659,"stop":1687260127664,"duration":5},"status":"passed","steps":[],"attachments":[{"uid":"2d7a45601fd930aa","name":"期望状态码","source":"2d7a45601fd930aa.attach","type":"text/plain","size":3},{"uid":"ad5f42111860e22e","name":"实际状态码","source":"ad5f42111860e22e.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687260127664,"stop":1687260127665,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"3956f26afbe7cbec","name":"期望返回值","source":"3956f26afbe7cbec.attach","type":"text/plain","size":17},{"uid":"53f3b62ca685871b","name":"实际返回值","source":"53f3b62ca685871b.attach","type":"text/plain","size":103}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false},{"name":"执行当前接口：文档指纹库列表查询-根据指纹库名称模糊筛选","time":{"start":1687260127677,"stop":1687260127752,"duration":75},"status":"passed","steps":[],"attachments":[{"uid":"38922a471a321da4","name":"请求方法：","source":"38922a471a321da4.attach","type":"text/plain","size":4},{"uid":"492fab7c7343a2ed","name":"请求地址","source":"492fab7c7343a2ed.attach","type":"text/plain","size":80},{"uid":"75fceefd0b72aee5","name":"请求头","source":"75fceefd0b72aee5.attach","type":"text/plain","size":497},{"uid":"416de09b2fa44bf2","name":"请求参数","source":"416de09b2fa44bf2.attach","type":"text/plain","size":81},{"uid":"bcc719f5bd606b6e","name":"请求结果","source":"bcc719f5bd606b6e.attach","type":"text/plain","size":1262}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687260127752,"stop":1687260127755,"duration":3},"status":"passed","steps":[{"name":"状态码校验","time":{"start":1687260127752,"stop":1687260127752,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"3c605d046fd60b05","name":"期望状态码","source":"3c605d046fd60b05.attach","type":"text/plain","size":3},{"uid":"64d4793666b15b43","name":"实际状态码","source":"64d4793666b15b43.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687260127753,"stop":1687260127754,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"82dce744ff7f61b4","name":"期望返回值","source":"82dce744ff7f61b4.attach","type":"text/plain","size":17},{"uid":"606e1043d2abbf6c","name":"实际返回值","source":"606e1043d2abbf6c.attach","type":"text/plain","size":1262}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"json断言判断包含","time":{"start":1687260127754,"stop":1687260127755,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"6779800f9b458914","name":"期望结果","source":"6779800f9b458914.attach","type":"text/plain","size":96},{"uid":"56205642a55bdcdb","name":"实际实际结果","source":"56205642a55bdcdb.attach","type":"text/plain","size":44}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":3,"hasContent":true,"attachmentsCount":6,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":9,"hasContent":true,"attachmentsCount":20,"shouldDisplayMessage":false},{"name":"执行当前接口：更新指纹库-服务器导入-挂载","time":{"start":1687260127757,"stop":1687260127814,"duration":57},"status":"passed","steps":[],"attachments":[{"uid":"de9de4a41c47c9f4","name":"请求方法：","source":"de9de4a41c47c9f4.attach","type":"text/plain","size":4},{"uid":"8ebf264e787baa31","name":"请求地址","source":"8ebf264e787baa31.attach","type":"text/plain","size":76},{"uid":"1e3024f6acc925be","name":"请求头","source":"1e3024f6acc925be.attach","type":"text/plain","size":497},{"uid":"31029cc81e491896","name":"请求参数","source":"31029cc81e491896.attach","type":"text/plain","size":456},{"uid":"4de49b628d45fcb","name":"请求结果","source":"4de49b628d45fcb.attach","type":"text/plain","size":77}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":5,"shouldDisplayMessage":false},{"name":"结果校验","time":{"start":1687260127814,"stop":1687260127816,"duration":2},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 30, in check_result\n    assert_response(value, real_res)\n  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[{"name":"状态码校验","time":{"start":1687260127814,"stop":1687260127814,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"fedbfc22095bb597","name":"期望状态码","source":"fedbfc22095bb597.attach","type":"text/plain","size":3},{"uid":"11c14f8c5f72e1b9","name":"实际状态码","source":"11c14f8c5f72e1b9.attach","type":"text/plain","size":3}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":false},{"name":"返回值校验","time":{"start":1687260127814,"stop":1687260127815,"duration":1},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"E:\\Wondersoft_ApiTest\\common\\checkresult.py\", line 45, in assert_response\n    assert flag\n","steps":[],"attachments":[{"uid":"993dfe1f470a9eac","name":"期望返回值","source":"993dfe1f470a9eac.attach","type":"text/plain","size":17},{"uid":"f2b76ad019d29405","name":"实际返回值","source":"f2b76ad019d29405.attach","type":"text/plain","size":77}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":2,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":2,"hasContent":true,"attachmentsCount":4,"shouldDisplayMessage":false}],"attachments":[{"uid":"7b75aaf6be5d971a","name":"log","source":"7b75aaf6be5d971a.txt","type":"text/plain","size":13607}],"parameters":[],"stepsCount":14,"hasContent":true,"attachmentsCount":30,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"epic","value":"规则管理"},{"name":"feature","value":"基础规则-文件指纹"},{"name":"story","value":"更新文档指纹库接口"},{"name":"parentSuite","value":"bms.testcases"},{"name":"suite","value":"test_11_docFinger"},{"name":"subSuite","value":"TestDocFinger"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"7756-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"bms.testcases.test_11_docFinger"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"27c398cbc777a50.json","parameterValues":[]}